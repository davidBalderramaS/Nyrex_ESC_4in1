
Master_ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002510  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080026e8  080026e8  000036e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002718  08002718  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002718  08002718  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002718  08002718  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002718  08002718  00003718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800271c  0800271c  0000371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002720  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000068  08002788  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002788  000041e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000537d  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146a  00000000  00000000  00009415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  0000a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003bc  00000000  00000000  0000add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db3d  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000845f  00000000  00000000  00028cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1bac  00000000  00000000  00031128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2cd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001860  00000000  00000000  000e2d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e4578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080026d0 	.word	0x080026d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	080026d0 	.word	0x080026d0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db12      	blt.n	8000a2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	490a      	ldr	r1, [pc, #40]	@ (8000a38 <__NVIC_DisableIRQ+0x44>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	3320      	adds	r3, #32
 8000a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a20:	f3bf 8f4f 	dsb	sy
}
 8000a24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a26:	f3bf 8f6f 	isb	sy
}
 8000a2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <COMP1_Init>:

volatile uint16_t case_interrupt_counter = 0;

// COMP1_INP -> PA1+
// COMP1_INM -> PA4-
void COMP1_Init(void){
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	// Enable GPIOA Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000a40:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <COMP1_Init+0xb0>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	4a29      	ldr	r2, [pc, #164]	@ (8000aec <COMP1_Init+0xb0>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a4c:	4b27      	ldr	r3, [pc, #156]	@ (8000aec <COMP1_Init+0xb0>)
 8000a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a50:	4a26      	ldr	r2, [pc, #152]	@ (8000aec <COMP1_Init+0xb0>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PA1+ to Analog Mode
	GPIOA->MODER &= ~(0b11 << 2);
 8000a58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a62:	f023 030c 	bic.w	r3, r3, #12
 8000a66:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << 2);
 8000a68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a72:	f043 030c 	orr.w	r3, r3, #12
 8000a76:	6013      	str	r3, [r2, #0]
	// Set PA4- to Analog Mode
	GPIOA->MODER &= ~(0b11 << 8);
 8000a78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000a86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << 8);
 8000a88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a92:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000a96:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOA->PUPDR &= ~(0b11 << 2);
 8000a98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000aa2:	f023 030c 	bic.w	r3, r3, #12
 8000aa6:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(0b11 << 8);
 8000aa8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ab6:	60d3      	str	r3, [r2, #12]

	// Init COMP1
	// Clear CSR
	COMP1->CSR = 0;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <COMP1_Init+0xb4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
	// Set COMP1_INP input to PA1
	COMP1->CSR &= ~(1 << 8);
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <COMP1_Init+0xb4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8000af0 <COMP1_Init+0xb4>)
 8000ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ac8:	6013      	str	r3, [r2, #0]
	// Set COMP1_INM input to PA4
	COMP1->CSR |= (0b110 << 4);
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <COMP1_Init+0xb4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <COMP1_Init+0xb4>)
 8000ad0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000ad4:	6013      	str	r3, [r2, #0]
	// Enable COMP1
	COMP1->CSR |= COMP_CSR_EN;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <COMP1_Init+0xb4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <COMP1_Init+0xb4>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6013      	str	r3, [r2, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010200 	.word	0x40010200

08000af4 <COMP3_Init_v2>:

// COMP3_INP -> PC1+
// COMP3_INM -> PC0-
void COMP3_Init_v2(void){
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	// Enable GPIOC Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <COMP3_Init_v2+0x98>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	4a23      	ldr	r2, [pc, #140]	@ (8000b8c <COMP3_Init_v2+0x98>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <COMP3_Init_v2+0x98>)
 8000b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b08:	4a20      	ldr	r2, [pc, #128]	@ (8000b8c <COMP3_Init_v2+0x98>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PC1+ to Analog Mode
	GPIOC->MODER &= ~(0b11 << 2); // <-THIS
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b16:	f023 030c 	bic.w	r3, r3, #12
 8000b1a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b11 << 2);
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1b      	ldr	r2, [pc, #108]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b22:	f043 030c 	orr.w	r3, r3, #12
 8000b26:	6013      	str	r3, [r2, #0]
	// Set PC0- to Analog Mode
	GPIOC->MODER &= ~(0b11 << 0);
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b2e:	f023 0303 	bic.w	r3, r3, #3
 8000b32:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b11 << 0);
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a15      	ldr	r2, [pc, #84]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b3a:	f043 0303 	orr.w	r3, r3, #3
 8000b3e:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOC->PUPDR &= ~(0b11 << 0);
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b46:	f023 0303 	bic.w	r3, r3, #3
 8000b4a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR &= ~(0b11 << 2);
 8000b4c:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <COMP3_Init_v2+0x9c>)
 8000b52:	f023 030c 	bic.w	r3, r3, #12
 8000b56:	60d3      	str	r3, [r2, #12]

	// Init COMP3
	// Clear CSR
	COMP3->CSR = 0;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <COMP3_Init_v2+0xa0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
	// Set COMP3_INP input to PC1+
	COMP3->CSR |= (1 << 8);
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <COMP3_Init_v2+0xa0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <COMP3_Init_v2+0xa0>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b68:	6013      	str	r3, [r2, #0]
	// Set COMP3_INM input to PC0-
	COMP3->CSR |= (0b111 << 4);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <COMP3_Init_v2+0xa0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a09      	ldr	r2, [pc, #36]	@ (8000b94 <COMP3_Init_v2+0xa0>)
 8000b70:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000b74:	6013      	str	r3, [r2, #0]
	// Enable COMP3
	COMP3->CSR |= COMP_CSR_EN;
 8000b76:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <COMP3_Init_v2+0xa0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <COMP3_Init_v2+0xa0>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6013      	str	r3, [r2, #0]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000800 	.word	0x48000800
 8000b94:	40010208 	.word	0x40010208

08000b98 <COMP4_Init_v2>:

// COMP4_INP -> PB0+
// COMP4_INM -> PB2-
void COMP4_Init_v2(void){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	// Enable GPIOB Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <COMP4_Init_v2+0x98>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <COMP4_Init_v2+0x98>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <COMP4_Init_v2+0x98>)
 8000baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bac:	4a20      	ldr	r2, [pc, #128]	@ (8000c30 <COMP4_Init_v2+0x98>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PB0+ to Analog Mode
	GPIOB->MODER &= ~(0b11 << 0);
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bba:	f023 0303 	bic.w	r3, r3, #3
 8000bbe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b11 << 0);
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bc6:	f043 0303 	orr.w	r3, r3, #3
 8000bca:	6013      	str	r3, [r2, #0]
	// Set PB2- to Analog Mode
	GPIOB->MODER &= ~(0b11 << 4);
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bd2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bd6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b11 << 4);
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bde:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000be2:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOB->PUPDR &= ~(0b11 << 0);
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bea:	f023 0303 	bic.w	r3, r3, #3
 8000bee:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(0b11 << 4);
 8000bf0:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <COMP4_Init_v2+0x9c>)
 8000bf6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bfa:	60d3      	str	r3, [r2, #12]

	// Init COMP4
	// Clear CSR
	COMP4->CSR = 0;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <COMP4_Init_v2+0xa0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
	// Set COMP4_INP input to PB0+
	COMP4->CSR &= ~COMP_CSR_INPSEL;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <COMP4_Init_v2+0xa0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a0c      	ldr	r2, [pc, #48]	@ (8000c38 <COMP4_Init_v2+0xa0>)
 8000c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c0c:	6013      	str	r3, [r2, #0]
	// Set COMP4_INM input to PB2-
	COMP4->CSR |= (0b111 << 4);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <COMP4_Init_v2+0xa0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <COMP4_Init_v2+0xa0>)
 8000c14:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000c18:	6013      	str	r3, [r2, #0]
	// Enable COMP4
	COMP4->CSR |= COMP_CSR_EN;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <COMP4_Init_v2+0xa0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a06      	ldr	r2, [pc, #24]	@ (8000c38 <COMP4_Init_v2+0xa0>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6013      	str	r3, [r2, #0]
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000400 	.word	0x48000400
 8000c38:	4001020c 	.word	0x4001020c

08000c3c <Disable_All_COMP_Interrupts>:

	NVIC_EnableIRQ(COMP4_IRQn);
	NVIC_SetPriority(COMP4_IRQn, 1);
}

void Disable_All_COMP_Interrupts(void){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(COMP1_2_3_IRQn);
 8000c40:	2040      	movs	r0, #64	@ 0x40
 8000c42:	f7ff fed7 	bl	80009f4 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(COMP4_IRQn);
 8000c46:	2041      	movs	r0, #65	@ 0x41
 8000c48:	f7ff fed4 	bl	80009f4 <__NVIC_DisableIRQ>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <COMP1_2_3_IRQHandler>:

// This is what's called when COMP1,2,3 (Phase 1 & 2) interrupts are triggered
void COMP1_2_3_IRQHandler(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	// Phase 2: COMP3
	if (EXTI->PR1 & EXTI_PR1_PIF29){
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <COMP1_2_3_IRQHandler+0x88>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d019      	beq.n	8000c94 <COMP1_2_3_IRQHandler+0x44>
		EXTI->PR1 |= EXTI_PR1_PIF29;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <COMP1_2_3_IRQHandler+0x88>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd8 <COMP1_2_3_IRQHandler+0x88>)
 8000c66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c6a:	6153      	str	r3, [r2, #20]

		switch(COMP_Phase_State){
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <COMP1_2_3_IRQHandler+0x8c>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d002      	beq.n	8000c7c <COMP1_2_3_IRQHandler+0x2c>
 8000c76:	2b05      	cmp	r3, #5
 8000c78:	d006      	beq.n	8000c88 <COMP1_2_3_IRQHandler+0x38>
 8000c7a:	e00b      	b.n	8000c94 <COMP1_2_3_IRQHandler+0x44>
			case 2:
				// Disable interrupts. Prevent double fire
				Disable_All_COMP_Interrupts();
 8000c7c:	f7ff ffde 	bl	8000c3c <Disable_All_COMP_Interrupts>

				COMP_Phase_State = 3;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <COMP1_2_3_IRQHandler+0x8c>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	801a      	strh	r2, [r3, #0]
				break;
 8000c86:	e005      	b.n	8000c94 <COMP1_2_3_IRQHandler+0x44>

			case 5:
				// Disable interrupts. Prevent double fire
				Disable_All_COMP_Interrupts();
 8000c88:	f7ff ffd8 	bl	8000c3c <Disable_All_COMP_Interrupts>

				// Go to next state
				COMP_Phase_State = 6;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <COMP1_2_3_IRQHandler+0x8c>)
 8000c8e:	2206      	movs	r2, #6
 8000c90:	801a      	strh	r2, [r3, #0]
				break;
 8000c92:	bf00      	nop
		}
	}
	// Phase 1: COMP1
	if (EXTI->PR1 & EXTI_PR1_PIF21){
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <COMP1_2_3_IRQHandler+0x88>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d019      	beq.n	8000cd4 <COMP1_2_3_IRQHandler+0x84>
		EXTI->PR1 |= EXTI_PR1_PIF21;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <COMP1_2_3_IRQHandler+0x88>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <COMP1_2_3_IRQHandler+0x88>)
 8000ca6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000caa:	6153      	str	r3, [r2, #20]

		switch(COMP_Phase_State){
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <COMP1_2_3_IRQHandler+0x8c>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d002      	beq.n	8000cbc <COMP1_2_3_IRQHandler+0x6c>
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d006      	beq.n	8000cc8 <COMP1_2_3_IRQHandler+0x78>
				// Go to next state
				COMP_Phase_State = 1;
				break;
		}
	}
}
 8000cba:	e00b      	b.n	8000cd4 <COMP1_2_3_IRQHandler+0x84>
				Disable_All_COMP_Interrupts();
 8000cbc:	f7ff ffbe 	bl	8000c3c <Disable_All_COMP_Interrupts>
				COMP_Phase_State = 4;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <COMP1_2_3_IRQHandler+0x8c>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	801a      	strh	r2, [r3, #0]
				break;
 8000cc6:	e005      	b.n	8000cd4 <COMP1_2_3_IRQHandler+0x84>
				Disable_All_COMP_Interrupts();
 8000cc8:	f7ff ffb8 	bl	8000c3c <Disable_All_COMP_Interrupts>
				COMP_Phase_State = 1;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <COMP1_2_3_IRQHandler+0x8c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	801a      	strh	r2, [r3, #0]
				break;
 8000cd2:	bf00      	nop
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40010400 	.word	0x40010400
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <COMP4_IRQHandler>:

// This is what's called when COMP4 (Phase 3) interrupt is triggered
void COMP4_IRQHandler(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	// Phase 3
	if (EXTI->PR1 & EXTI_PR1_PIF30) {
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <COMP4_IRQHandler+0x44>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d017      	beq.n	8000d20 <COMP4_IRQHandler+0x40>
		// Clear pending flag (write 1 to clear)
		EXTI->PR1 |= EXTI_PR1_PIF30;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <COMP4_IRQHandler+0x44>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d24 <COMP4_IRQHandler+0x44>)
 8000cf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000cfa:	6153      	str	r3, [r2, #20]

		// Disable interrupts. Prevent double fire
		Disable_All_COMP_Interrupts();
 8000cfc:	f7ff ff9e 	bl	8000c3c <Disable_All_COMP_Interrupts>

		switch(COMP_Phase_State){
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <COMP4_IRQHandler+0x48>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d002      	beq.n	8000d10 <COMP4_IRQHandler+0x30>
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d004      	beq.n	8000d18 <COMP4_IRQHandler+0x38>
			case 4:
				COMP_Phase_State = 5;
				break;
		}
	}
}
 8000d0e:	e007      	b.n	8000d20 <COMP4_IRQHandler+0x40>
				COMP_Phase_State = 2;
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <COMP4_IRQHandler+0x48>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	801a      	strh	r2, [r3, #0]
				break;
 8000d16:	e003      	b.n	8000d20 <COMP4_IRQHandler+0x40>
				COMP_Phase_State = 5;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <COMP4_IRQHandler+0x48>)
 8000d1a:	2205      	movs	r2, #5
 8000d1c:	801a      	strh	r2, [r3, #0]
				break;
 8000d1e:	bf00      	nop
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40010400 	.word	0x40010400
 8000d28:	20000000 	.word	0x20000000

08000d2c <SPI2_Master_Init>:
*	PB12 -> GPIOx (General output)    ->        SPI2_NSS (Chip select)
*   PB13 -> SPI2_SCLK (Clock)         ->        SPI2_SCLK (Clock)
*	PB15 -> SPI2_MOSI (Tx)            ->        PB14 -> SPI2_MISO (Rx)
*	PB14 -> SPI2_MISO (Rx)            <-        PB15 -> SPI2_MOSI (Tx)
*/
void SPI2_Master_Init(void){
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	// Init Clk access to GPIOB and SPI2
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000d30:	4b3c      	ldr	r3, [pc, #240]	@ (8000e24 <SPI2_Master_Init+0xf8>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d34:	4a3b      	ldr	r2, [pc, #236]	@ (8000e24 <SPI2_Master_Init+0xf8>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_SPI2EN;
 8000d3c:	4b39      	ldr	r3, [pc, #228]	@ (8000e24 <SPI2_Master_Init+0xf8>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d40:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <SPI2_Master_Init+0xf8>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d46:	6593      	str	r3, [r2, #88]	@ 0x58

	// Config pins to Alt Funct Mode
	GPIOB->MODER &= ~((0b11 << 24) | (0b11 << 26) | (0b11 << 28) | (0b11 << 30));
 8000d48:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a36      	ldr	r2, [pc, #216]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000d52:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 24);  // PB12 == Gen Purpose Output
 8000d54:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a33      	ldr	r2, [pc, #204]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d5e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 26);  // PB13
 8000d60:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a30      	ldr	r2, [pc, #192]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d6a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 28);  // PB14
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2d      	ldr	r2, [pc, #180]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d76:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 30);  // PB15
 8000d78:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d82:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] &= ~(0b1111 << 20 | 0b1111 << 24 | 0b1111 << 28);
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d88:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d8e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 20); // PB13
 8000d90:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d94:	4a24      	ldr	r2, [pc, #144]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d96:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000d9a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 24); // PB14
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da0:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000da2:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8000da6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 28); // PB15
 8000da8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dac:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000dae:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000db2:	6253      	str	r3, [r2, #36]	@ 0x24

	// Config SPI2_CR1 register
	SPI2->CR1 |= SPI_CR1_MSTR;     // Set to master
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= (0b011 << 3);     // Baud rate == F_PCLK/16
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dc6:	f043 0318 	orr.w	r3, r3, #24
 8000dca:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSM;      // Software slave management enabled
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a16      	ldr	r2, [pc, #88]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSI;      // Internal slave select
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a13      	ldr	r2, [pc, #76]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de2:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~(SPI_CR1_CPOL | SPI_CR1_CPHA); // Mode 0
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a10      	ldr	r2, [pc, #64]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dea:	f023 0303 	bic.w	r3, r3, #3
 8000dee:	6013      	str	r3, [r2, #0]

	// Config SPI2_CR2 register
	SPI2->CR2 = 0;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
	SPI2->CR2 |= (0b0111 << 8);
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000dfc:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000e00:	6053      	str	r3, [r2, #4]

	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <SPI2_Master_Init+0x100>)
 8000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0c:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= SPI2_PB12_MASTER_CS; // Set NSS high (slave) inactive
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SPI2_Master_Init+0xfc>)
 8000e14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e18:	6153      	str	r3, [r2, #20]
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	40003800 	.word	0x40003800

08000e30 <SPI2_TX_RX>:

// Sends and receives data
uint8_t SPI2_TX_RX(uint8_t data){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	uint32_t Timeout_Tx = 100000;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <SPI2_TX_RX+0x70>)
 8000e3c:	60fb      	str	r3, [r7, #12]
	uint32_t Timeout_Rx = 100000;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <SPI2_TX_RX+0x70>)
 8000e40:	60bb      	str	r3, [r7, #8]

	// Wait for TX buffer empty
    while(!(SPI2->SR & SPI_SR_TXE)){
 8000e42:	e00a      	b.n	8000e5a <SPI2_TX_RX+0x2a>
        if (--Timeout_Tx == 0) {
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d104      	bne.n	8000e5a <SPI2_TX_RX+0x2a>
            printf("Master TXE Timeout \r\n");
 8000e50:	4814      	ldr	r0, [pc, #80]	@ (8000ea4 <SPI2_TX_RX+0x74>)
 8000e52:	f001 f863 	bl	8001f1c <puts>
            return 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e01d      	b.n	8000e96 <SPI2_TX_RX+0x66>
    while(!(SPI2->SR & SPI_SR_TXE)){
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <SPI2_TX_RX+0x78>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0ee      	beq.n	8000e44 <SPI2_TX_RX+0x14>
        }
    }
    // Write data
    *((__IO uint8_t*)&SPI2->DR) = data;
 8000e66:	4a11      	ldr	r2, [pc, #68]	@ (8000eac <SPI2_TX_RX+0x7c>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	7013      	strb	r3, [r2, #0]

    // Wait for RX buffer not empty
    while(!(SPI2->SR & SPI_SR_RXNE)){
 8000e6c:	e00a      	b.n	8000e84 <SPI2_TX_RX+0x54>
        if (--Timeout_Rx == 0) {
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d104      	bne.n	8000e84 <SPI2_TX_RX+0x54>
            printf("Master RXNE Timeout\r\n");
 8000e7a:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <SPI2_TX_RX+0x80>)
 8000e7c:	f001 f84e 	bl	8001f1c <puts>
            return 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e008      	b.n	8000e96 <SPI2_TX_RX+0x66>
    while(!(SPI2->SR & SPI_SR_RXNE)){
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <SPI2_TX_RX+0x78>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0ee      	beq.n	8000e6e <SPI2_TX_RX+0x3e>
        }
    }
    // Read received
    return *((__IO uint8_t*)&SPI2->DR);
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SPI2_TX_RX+0x7c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	000186a0 	.word	0x000186a0
 8000ea4:	080026e8 	.word	0x080026e8
 8000ea8:	40003800 	.word	0x40003800
 8000eac:	4000380c 	.word	0x4000380c
 8000eb0:	08002700 	.word	0x08002700

08000eb4 <USART1_ReadChar>:
    USART1->BRR = SystemCoreClock / BAUD_RATE;  // Set Baud rate (9600), assuming 16MHz Clk
    USART1->CR1 = USART_CR1_RE | USART_CR1_UE;  // Enable transmitter and USART
}

// Function for receiving data (characters)
char USART1_ReadChar(void) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    while (!(USART1->ISR & USART_ISR_RXNE));  // Wait for data
 8000eb8:	bf00      	nop
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <USART1_ReadChar+0x24>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0320 	and.w	r3, r3, #32
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <USART1_ReadChar+0x6>

    return (char)(USART1->RDR & 0xFF);        // Read char
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <USART1_ReadChar+0x24>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	b2db      	uxtb	r3, r3
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40013800 	.word	0x40013800

08000edc <__io_getchar>:

// Overrides scanf()
int __io_getchar(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    return USART1_ReadChar();
 8000ee0:	f7ff ffe8 	bl	8000eb4 <USART1_ReadChar>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <USART2_PA2_Init>:
#define BAUD_RATE  9600
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)


// Configure PA2 for USART2
void USART2_PA2_Init(void){
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
    // Enable GPIOA Clk and USART2 Clk
    RCC->AHB2ENR |= (1 << 0);
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <USART2_PA2_Init+0x7c>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <USART2_PA2_Init+0x7c>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= (1 << 17);
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <USART2_PA2_Init+0x7c>)
 8000efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f00:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <USART2_PA2_Init+0x7c>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f06:	6593      	str	r3, [r2, #88]	@ 0x58
    //RCC->APB1SMENR1 |= (1 << 17);

    // Configure PA2 as AF7 (USART2_TX)
    GPIOA->MODER &= ~(0b11 << 4);
 8000f08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f16:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0b10 << 4);    // Set PA2 to Alt Funct Mode
 8000f18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f22:	f043 0320 	orr.w	r3, r3, #32
 8000f26:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0b1111 << 8);
 8000f28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f36:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0b0111 << 8);  // Sets AFM to AF7
 8000f38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f46:	6213      	str	r3, [r2, #32]

    // Configure USART2
    USART2->BRR = SystemCoreClock / BAUD_RATE;  // Set Baud rate (9600), assuming 16MHz Clk
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <USART2_PA2_Init+0x80>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <USART2_PA2_Init+0x84>)
 8000f4e:	4909      	ldr	r1, [pc, #36]	@ (8000f74 <USART2_PA2_Init+0x88>)
 8000f50:	fba1 1303 	umull	r1, r3, r1, r3
 8000f54:	0a9b      	lsrs	r3, r3, #10
 8000f56:	60d3      	str	r3, [r2, #12]
    //USART2->BRR = 16000000 / BAUD_RATE;
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;  // Enable transmitter and USART
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <USART2_PA2_Init+0x84>)
 8000f5a:	2209      	movs	r2, #9
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	40004400 	.word	0x40004400
 8000f74:	1b4e81b5 	.word	0x1b4e81b5

08000f78 <USART2_Write>:

// Function for sending data (characters)
void USART2_Write(char ch) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));  // Wait until transmit data register empty
 8000f82:	bf00      	nop
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <USART2_Write+0x2c>)
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f9      	beq.n	8000f84 <USART2_Write+0xc>
    USART2->TDR = (ch & 0xFF);              // Send the character
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <USART2_Write+0x2c>)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <__io_putchar>:

// Overrides printf function
int __io_putchar(int ch) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    USART2_Write(ch);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ffdf 	bl	8000f78 <USART2_Write>
    return ch;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <Throttle_Algo>:
 * I subtracted 0.05 so that the function round would round down, not up when x/2 == 0.5
 * wouln't skip a number/count a number twice
 *
 */

uint8_t Throttle_Algo(uint8_t ADC_Value_Truncate2){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	double Throttle_Val = ((((double)(ADC_Value_Truncate2 / 2) - 0.05)) + 79);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	085b      	lsrs	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa6f 	bl	80004bc <__aeabi_i2d>
 8000fde:	a312      	add	r3, pc, #72	@ (adr r3, 8001028 <Throttle_Algo+0x60>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff f91c 	bl	8000220 <__aeabi_dsub>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001030 <Throttle_Algo+0x68>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f7ff f915 	bl	8000224 <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (uint8_t)round(Throttle_Val);
 8001002:	ed97 0b02 	vldr	d0, [r7, #8]
 8001006:	f001 fb1d 	bl	8002644 <round>
 800100a:	ec53 2b10 	vmov	r2, r3, d0
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fccf 	bl	80009b4 <__aeabi_d2uiz>
 8001016:	4603      	mov	r3, r0
 8001018:	b2db      	uxtb	r3, r3
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	9999999a 	.word	0x9999999a
 800102c:	3fa99999 	.word	0x3fa99999
 8001030:	00000000 	.word	0x00000000
 8001034:	4053c000 	.word	0x4053c000

08001038 <PWM_PB7_TIM4_CH2_Init>:
#include "../Communication/USART_printf.h"

volatile uint16_t temp = 0;

// PWM for PB7 (TIM4_CH2 -> AF2)
void PWM_PB7_TIM4_CH2_Init(void){
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800103c:	4b39      	ldr	r3, [pc, #228]	@ (8001124 <PWM_PB7_TIM4_CH2_Init+0xec>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001040:	4a38      	ldr	r2, [pc, #224]	@ (8001124 <PWM_PB7_TIM4_CH2_Init+0xec>)
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB7 output to Alt Funct Mode
	GPIOB->MODER &= ~(0b11 << 14);
 8001048:	4b37      	ldr	r3, [pc, #220]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a36      	ldr	r2, [pc, #216]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800104e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001052:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 14);      // MODE7 = Alt Funct Mode
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a33      	ldr	r2, [pc, #204]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800105a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800105e:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 28);
 8001060:	4b31      	ldr	r3, [pc, #196]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a30      	ldr	r2, [pc, #192]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001066:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800106a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 28);   // AFSEL7 set to AF2
 800106c:	4b2e      	ldr	r3, [pc, #184]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a2d      	ldr	r2, [pc, #180]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001072:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001076:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 14);    // High speed pin
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a2a      	ldr	r2, [pc, #168]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800107e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001082:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT7; // No Push-pull
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800108a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800108e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 14);    // No pull-up/pull-down
 8001090:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a24      	ldr	r2, [pc, #144]	@ (8001128 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001096:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800109a:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM4
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <PWM_PB7_TIM4_CH2_Init+0xec>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	4a20      	ldr	r2, [pc, #128]	@ (8001124 <PWM_PB7_TIM4_CH2_Init+0xec>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM4->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80010a8:	4b20      	ldr	r3, [pc, #128]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 160 - 1;             // Period     (cycle length)
 80010ae:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010b0:	229f      	movs	r2, #159	@ 0x9f
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR2 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	639a      	str	r2, [r3, #56]	@ 0x38

	// Other timer settings
	TIM4->CCMR1 &= ~(0b111 << 12);
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80010c4:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=  (0b110 << 12);   // CH2 set to PWM mode 1
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010cc:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80010d0:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC2PE;  // Enable pre-load register
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	4a15      	ldr	r2, [pc, #84]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010dc:	6193      	str	r3, [r2, #24]

	TIM4->CCER &= ~TIM_CCER_CC2P;    // set output polarity to active HIGH in CH2
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a12      	ldr	r2, [pc, #72]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010e4:	f023 0320 	bic.w	r3, r3, #32
 80010e8:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= TIM_CCER_CC2E;     // Capture/Compare enabled for CH2
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4a0f      	ldr	r2, [pc, #60]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	6213      	str	r3, [r2, #32]

	TIM4->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a09      	ldr	r2, [pc, #36]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800110c:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM4
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a06      	ldr	r2, [pc, #24]	@ (800112c <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6013      	str	r3, [r2, #0]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400
 800112c:	40000800 	.word	0x40000800

08001130 <PWM_PB6_TIM4_CH1_Init>:

// PWM for PB6 (TIM4_CH1 -> AF2)
void PWM_PB6_TIM4_CH1_Init(void){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001134:	4b39      	ldr	r3, [pc, #228]	@ (800121c <PWM_PB6_TIM4_CH1_Init+0xec>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	4a38      	ldr	r2, [pc, #224]	@ (800121c <PWM_PB6_TIM4_CH1_Init+0xec>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB6 output to Alt Funct Mode
	GPIOB->MODER  &= ~(0b11 << 12);
 8001140:	4b37      	ldr	r3, [pc, #220]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a36      	ldr	r2, [pc, #216]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001146:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800114a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |= (0b10 << 12);    // MODE6 = Alt Funct Mode
 800114c:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a33      	ldr	r2, [pc, #204]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001152:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001156:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 24);
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a30      	ldr	r2, [pc, #192]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800115e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001162:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 24);  // AFSEL6 set to AF2
 8001164:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a2d      	ldr	r2, [pc, #180]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800116e:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 12);    // High speed pin
 8001170:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	4a2a      	ldr	r2, [pc, #168]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001176:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117a:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT6; // No Push-pull
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001186:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 12);    // No pull-up/pull-down
 8001188:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800118e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001192:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM4
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <PWM_PB6_TIM4_CH1_Init+0xec>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001198:	4a20      	ldr	r2, [pc, #128]	@ (800121c <PWM_PB6_TIM4_CH1_Init+0xec>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM4->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80011a0:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 160 - 1;             // Period     (cycle length)
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011a8:	229f      	movs	r2, #159	@ 0x9f
 80011aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR1 = 0;                 // Sets Duty Cycle (ON state) , CCR1 for CH1
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34

	// Other timer settings
	TIM4->CCMR1 &= ~(0b111 << 4);    // Alternate register
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011bc:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=  (0b110 << 4);    // CH1 set to PWM mode 1
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a18      	ldr	r2, [pc, #96]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80011c8:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC1PE;  // Enable pre-load register
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a15      	ldr	r2, [pc, #84]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6193      	str	r3, [r2, #24]

	TIM4->CCER &= ~TIM_CCER_CC1P;    // set output polarity to active HIGH in CH1
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011dc:	f023 0302 	bic.w	r3, r3, #2
 80011e0:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= TIM_CCER_CC1E;     // Capture/Compare enabled for CH1
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]

	TIM4->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a09      	ldr	r2, [pc, #36]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001204:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM4
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6013      	str	r3, [r2, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400
 8001224:	40000800 	.word	0x40000800

08001228 <PWM_PB3_TIM2_CH2_Init>:

// PWM for PB3 (TIM2_CH2 -> AF1)
void PWM_PB3_TIM2_CH2_Init(void){
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800122c:	4b43      	ldr	r3, [pc, #268]	@ (800133c <PWM_PB3_TIM2_CH2_Init+0x114>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	4a42      	ldr	r2, [pc, #264]	@ (800133c <PWM_PB3_TIM2_CH2_Init+0x114>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB3 output to Alt Funct Mode
	GPIOB->MODER  &= ~(0b11 << 6);
 8001238:	4b41      	ldr	r3, [pc, #260]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a40      	ldr	r2, [pc, #256]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800123e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001242:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |= (0b10 << 6);    // MODE6 = Alt Funct Mode
 8001244:	4b3e      	ldr	r3, [pc, #248]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a3d      	ldr	r2, [pc, #244]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800124a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800124e:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 12);
 8001250:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a3a      	ldr	r2, [pc, #232]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001256:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800125a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0001 << 12);  // AFSEL3 set to AF1
 800125c:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a37      	ldr	r2, [pc, #220]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001262:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001266:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 6);    // High speed pin
 8001268:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	4a34      	ldr	r2, [pc, #208]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800126e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001272:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT3; // No Push-pull
 8001274:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a31      	ldr	r2, [pc, #196]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800127a:	f023 0308 	bic.w	r3, r3, #8
 800127e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 6);    // No pull-up/pull-down
 8001280:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4a2e      	ldr	r2, [pc, #184]	@ (8001340 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001286:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800128a:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 800128c:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <PWM_PB3_TIM2_CH2_Init+0x114>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001290:	4a2a      	ldr	r2, [pc, #168]	@ (800133c <PWM_PB3_TIM2_CH2_Init+0x114>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM2->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 8001298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129c:	2200      	movs	r2, #0
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 160 - 1;             // Period     (cycle length)
 80012a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a4:	229f      	movs	r2, #159	@ 0x9f
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR2 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 80012a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ac:	2200      	movs	r2, #0
 80012ae:	639a      	str	r2, [r3, #56]	@ 0x38

	// Other timer settings
	TIM2->CCMR1 &= ~(0b111 << 12);   // Alternate register
 80012b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80012be:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b110 << 12);   // CH2 set to PWM mode 1
 80012c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ca:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80012ce:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE;  // Enable pre-load register CH2
 80012d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012de:	6193      	str	r3, [r2, #24]

	TIM2->CCER &= ~TIM_CCER_CC2P;    // set output polarity to active HIGH in CH2
 80012e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ea:	f023 0320 	bic.w	r3, r3, #32
 80012ee:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC2E;     // Capture/Compare enabled for CH2
 80012f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6213      	str	r3, [r2, #32]

	TIM2->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8001300:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8001310:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800131a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8001320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400

08001344 <PWM_PA15_TIM2_CH1_Init>:

// PWM for PA15 (TIM2_CH1 -> AF1)
void PWM_PA15_TIM2_CH1_Init(void){
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001348:	4b4a      	ldr	r3, [pc, #296]	@ (8001474 <PWM_PA15_TIM2_CH1_Init+0x130>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134c:	4a49      	ldr	r2, [pc, #292]	@ (8001474 <PWM_PA15_TIM2_CH1_Init+0x130>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PA15 output to Alt Funct Mode
	GPIOA->MODER  &= ~(0b11 << 30);
 8001354:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800135e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001362:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |= (0b10 << 30);     // MODE15 = Alt Funct Mode
 8001364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800136e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001372:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~(0b1111 << 28);
 8001374:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800137e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001382:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (0b0001 << 28);  // AFSEL15 set to AF1
 8001384:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001392:	6253      	str	r3, [r2, #36]	@ 0x24

	// GPIO settings
	GPIOA->OSPEEDR |= (0b10 << 30);     // High speed pin
 8001394:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800139e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013a2:	6093      	str	r3, [r2, #8]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT15; // No Push-pull
 80013a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80013b2:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR  &= ~(0b11 << 30);     // No pull-up/pull-down
 80013b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80013c2:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <PWM_PA15_TIM2_CH1_Init+0x130>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001474 <PWM_PA15_TIM2_CH1_Init+0x130>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM2->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80013d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 160 - 1;             // Period     (cycle length)
 80013d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013dc:	229f      	movs	r2, #159	@ 0x9f
 80013de:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 80013e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013e4:	2200      	movs	r2, #0
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34

	// Other timer settings
	TIM2->CCMR1 &= ~(0b111 << 4);    // Alternate register
 80013e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013f6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b110 << 4);    // CH1 set to PWM mode 1
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001402:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001406:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;  // Enable pre-load register CH1
 8001408:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6193      	str	r3, [r2, #24]

	TIM2->CCER &= ~TIM_CCER_CC1P;    // set output polarity to active HIGH in CH1
 8001418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001422:	f023 0302 	bic.w	r3, r3, #2
 8001426:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC1E;     // Capture/Compare enabled for CH1
 8001428:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6213      	str	r3, [r2, #32]

	TIM2->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8001438:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8001448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001456:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8001458:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <PWM_PC2_TIM1_CH3_Init>:

// PWM for PC2 (TIM1_CH3 -> AF2)
void PWM_PC2_TIM1_CH3_Init(void){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800147c:	4b3c      	ldr	r3, [pc, #240]	@ (8001570 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a3b      	ldr	r2, [pc, #236]	@ (8001570 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PC2 output to Alt Funct Mode
	GPIOC->MODER  &= ~(0b11 << 4);
 8001488:	4b3a      	ldr	r3, [pc, #232]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a39      	ldr	r2, [pc, #228]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 800148e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001492:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |= (0b10 << 4);    // MODE2 = Alt Funct Mode
 8001494:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a36      	ldr	r2, [pc, #216]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 800149a:	f043 0320 	orr.w	r3, r3, #32
 800149e:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0b1111 << 8);
 80014a0:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a33      	ldr	r2, [pc, #204]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014aa:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 8);  // AFSEL2 set to AF2
 80014ac:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a30      	ldr	r2, [pc, #192]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b6:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOC->OSPEEDR |= (0b10 << 4);     // High speed pin
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT2; // No Push-pull
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR  &= ~(0b11 << 4);     // No pull-up/pull-down
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a27      	ldr	r2, [pc, #156]	@ (8001574 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014d6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80014da:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e0:	4a23      	ldr	r2, [pc, #140]	@ (8001570 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 80014e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014e6:	6613      	str	r3, [r2, #96]	@ 0x60
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM1->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 160 - 1;             // Period     (cycle length)
 80014ee:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 80014f0:	229f      	movs	r2, #159	@ 0x9f
 80014f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR3 = 0;                 // Sets Duty Cycle (ON state) , CCR3 for CH3
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Other timer settings
	TIM1->CCMR2 &= ~(0b111 << 4);    // Alternate register
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001504:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |=  (0b110 << 4);    // CH3 set to PWM mode 1
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a1b      	ldr	r2, [pc, #108]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 800150c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001510:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3PE;  // Enable pre-load register CH3
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	61d3      	str	r3, [r2, #28]

	TIM1->CCER &= ~TIM_CCER_CC3P;    // set output polarity to active HIGH in CH3
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a15      	ldr	r2, [pc, #84]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001528:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3E;     // Capture/Compare enabled for CH3
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6213      	str	r3, [r2, #32]

	TIM1->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a0f      	ldr	r2, [pc, #60]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8001542:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a0c      	ldr	r2, [pc, #48]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154c:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]
	TIM1->BDTR |= TIM_BDTR_MOE;      // Enable since TIM1 is a "Special Timer"
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001564:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	48000800 	.word	0x48000800
 8001578:	40012c00 	.word	0x40012c00

0800157c <PWM_PC3_TIM1_CH4_Init>:

// PWM for PC3 (TIM1_CH4 -> AF2)
void PWM_PC3_TIM1_CH4_Init(void){
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8001580:	4b39      	ldr	r3, [pc, #228]	@ (8001668 <PWM_PC3_TIM1_CH4_Init+0xec>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001584:	4a38      	ldr	r2, [pc, #224]	@ (8001668 <PWM_PC3_TIM1_CH4_Init+0xec>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PC2 output to Alt Funct Mode
	GPIOC->MODER  &= ~(0b11 << 6);
 800158c:	4b37      	ldr	r3, [pc, #220]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a36      	ldr	r2, [pc, #216]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8001592:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001596:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |= (0b10 << 6);     // MODE2 = Alt Funct Mode
 8001598:	4b34      	ldr	r3, [pc, #208]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a33      	ldr	r2, [pc, #204]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 800159e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a2:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0b1111 << 12);
 80015a4:	4b31      	ldr	r3, [pc, #196]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a30      	ldr	r2, [pc, #192]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80015ae:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 12);  // AFSEL3 set to AF2
 80015b0:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a2d      	ldr	r2, [pc, #180]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015ba:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOC->OSPEEDR |= (0b10 << 6);     // High speed pin
 80015bc:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c6:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT3; // No Push-pull
 80015c8:	4b28      	ldr	r3, [pc, #160]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a27      	ldr	r2, [pc, #156]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015ce:	f023 0308 	bic.w	r3, r3, #8
 80015d2:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR  &= ~(0b11 << 6);     // No pull-up/pull-down
 80015d4:	4b25      	ldr	r3, [pc, #148]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4a24      	ldr	r2, [pc, #144]	@ (800166c <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80015de:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80015e0:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <PWM_PC3_TIM1_CH4_Init+0xec>)
 80015e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e4:	4a20      	ldr	r2, [pc, #128]	@ (8001668 <PWM_PC3_TIM1_CH4_Init+0xec>)
 80015e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015ea:	6613      	str	r3, [r2, #96]	@ 0x60
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM1->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80015ec:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 160 - 1;             // Period     (cycle length)
 80015f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 80015f4:	229f      	movs	r2, #159	@ 0x9f
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR4 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40

	// Other timer settings
	TIM1->CCMR2 &= ~(0b111 << 12);    // Alternate register
 80015fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a1b      	ldr	r2, [pc, #108]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001608:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |=  (0b110 << 12);    // CH4 set to PWM mode 1
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001610:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001614:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4PE;  // Enable pre-load register CH4
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a15      	ldr	r2, [pc, #84]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800161c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001620:	61d3      	str	r3, [r2, #28]

	TIM1->CCER &= ~TIM_CCER_CC4P;    // set output polarity to active HIGH in CH4
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001628:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800162c:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC4E;     // Capture/Compare enabled for CH4
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a0f      	ldr	r2, [pc, #60]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001634:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001638:	6213      	str	r3, [r2, #32]

	TIM1->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 800163a:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001650:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6013      	str	r3, [r2, #0]
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000
 800166c:	48000800 	.word	0x48000800
 8001670:	40012c00 	.word	0x40012c00

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <NMI_Handler+0x4>

0800167c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <UsageFault_Handler+0x4>

0800169c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 fafd 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e00a      	b.n	80016fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e4:	f7ff fbfa 	bl	8000edc <__io_getchar>
 80016e8:	4601      	mov	r1, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbf0      	blt.n	80016e4 <_read+0x12>
  }

  return len;
 8001702:	687b      	ldr	r3, [r7, #4]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e009      	b.n	8001732 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fc3e 	bl	8000fa8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	dbf1      	blt.n	800171e <_write+0x12>
  }
  return len;
 800173a:	687b      	ldr	r3, [r7, #4]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_close>:

int _close(int file)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800176c:	605a      	str	r2, [r3, #4]
  return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_isatty>:

int _isatty(int file)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f000 fccc 	bl	8002178 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20008000 	.word	0x20008000
 800180c:	00000400 	.word	0x00000400
 8001810:	20000088 	.word	0x20000088
 8001814:	200001e0 	.word	0x200001e0

08001818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_EnableIRQ>:
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	2b00      	cmp	r3, #0
 800184c:	db0b      	blt.n	8001866 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	4907      	ldr	r1, [pc, #28]	@ (8001874 <__NVIC_EnableIRQ+0x38>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	2001      	movs	r0, #1
 800185e:	fa00 f202 	lsl.w	r2, r0, r2
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	@ (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	@ (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <ADC_Poten_PA7_Init>:
#define ADC_Bits            4096

volatile uint16_t ADC_Value_PA7 = 0;

// Initializes GPIOA, Timer, and Interrupt peripherals for PA7
void ADC_Poten_PA7_Init(void){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
	// Step 1: Init GPIOA
	// Enable GPIOA Clk access
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80018d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001a08 <ADC_Poten_PA7_Init+0x13c>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001a08 <ADC_Poten_PA7_Init+0x13c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Set PA7 to analog mode
	GPIOA->MODER |= (0b11 << 14);
 80018de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80018e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018ec:	6013      	str	r3, [r2, #0]


	// Step 2: Init Timer (TIM3_CH2 -> AF2)
    // Enable TIM3 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 80018ee:	4b46      	ldr	r3, [pc, #280]	@ (8001a08 <ADC_Poten_PA7_Init+0x13c>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	4a45      	ldr	r2, [pc, #276]	@ (8001a08 <ADC_Poten_PA7_Init+0x13c>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6593      	str	r3, [r2, #88]	@ 0x58

    // Set prescaler and auto-reload for 10ms period (For 16 MHz Clk)
    TIM3->PSC = 16000 - 1;   // 16 MHz / 16000 = 1 kHz
 80018fa:	4b44      	ldr	r3, [pc, #272]	@ (8001a0c <ADC_Poten_PA7_Init+0x140>)
 80018fc:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001900:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000 - 1;    // 1 kHz / 1000 = 1 Hz (1s)
 8001902:	4b42      	ldr	r3, [pc, #264]	@ (8001a0c <ADC_Poten_PA7_Init+0x140>)
 8001904:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001908:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set TIM3 to generate TRGO on update event
    TIM3->CR2 |= (0b010 << 4);
 800190a:	4b40      	ldr	r3, [pc, #256]	@ (8001a0c <ADC_Poten_PA7_Init+0x140>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a0c <ADC_Poten_PA7_Init+0x140>)
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	6053      	str	r3, [r2, #4]

    // Enable timer
    TIM3->CR1 |= TIM_CR1_CEN;
 8001916:	4b3d      	ldr	r3, [pc, #244]	@ (8001a0c <ADC_Poten_PA7_Init+0x140>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a0c <ADC_Poten_PA7_Init+0x140>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6013      	str	r3, [r2, #0]


    // Step 3: Init Interrupt (ADC2_IN4) -> IN4 = CH4
	// enable ADC2 Clk and ADC Clk source
	RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8001922:	4b39      	ldr	r3, [pc, #228]	@ (8001a08 <ADC_Poten_PA7_Init+0x13c>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	4a38      	ldr	r2, [pc, #224]	@ (8001a08 <ADC_Poten_PA7_Init+0x13c>)
 8001928:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800192c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->CCIPR |= (0b10 << 28);
 800192e:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <ADC_Poten_PA7_Init+0x13c>)
 8001930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001934:	4a34      	ldr	r2, [pc, #208]	@ (8001a08 <ADC_Poten_PA7_Init+0x13c>)
 8001936:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800193a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	// ADC startup sequence
	// Enable ADC voltage regulator (RM0440: 21.4.6)
	ADC2->CR &= ~(ADC_CR_ADEN|ADC_CR_DEEPPWD);     // Disable ADC and DEEPPWD
 800193e:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4a33      	ldr	r2, [pc, #204]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 8001944:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADVREGEN;                   // Enable voltage regulator
 800194e:	4b30      	ldr	r3, [pc, #192]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4a2f      	ldr	r2, [pc, #188]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	6093      	str	r3, [r2, #8]
	for (volatile uint32_t i = 0; i < 1000; i++);  // Wait ~20 µs for regulator
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	e002      	b.n	8001966 <ADC_Poten_PA7_Init+0x9a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800196c:	d3f8      	bcc.n	8001960 <ADC_Poten_PA7_Init+0x94>

	// Calibrate ADC
	ADC2->CR |= ADC_CR_ADCAL;         // Start calibration
 800196e:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4a27      	ldr	r2, [pc, #156]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 8001974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001978:	6093      	str	r3, [r2, #8]
	while (ADC2->CR & ADC_CR_ADCAL);  // Wait for calibration to complete
 800197a:	bf00      	nop
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dbfb      	blt.n	800197c <ADC_Poten_PA7_Init+0xb0>

	// Enable ADC
	ADC2->CR |= ADC_CR_ADEN;
 8001984:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a21      	ldr	r2, [pc, #132]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6093      	str	r3, [r2, #8]
	while (!(ADC2->ISR & ADC_ISR_ADRDY));  // Wait for ADC to be ready
 8001990:	bf00      	nop
 8001992:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f9      	beq.n	8001992 <ADC_Poten_PA7_Init+0xc6>

    // Trigger from TIM3 TRGO
    ADC2->CFGR |= (0b00100 << 5);  // TIM3_TRGO = 4 (RM0440: Table 67. Interconnect 19)
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a8:	60d3      	str	r3, [r2, #12]
    ADC2->CFGR |= (0b01 << 10);    // Trigger on rising edge
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4a18      	ldr	r2, [pc, #96]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b4:	60d3      	str	r3, [r2, #12]

    // Convert CH4 first -> SQ1
	ADC2->SQR1 |= (4 << 6);
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set sample time for SMP4 (CH4) -> 47.5 ADC Clk cycles
	ADC2->SMPR1 &= ~(0b111 << 12);
 80019c2:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80019cc:	6153      	str	r3, [r2, #20]
	ADC2->SMPR1 |= (0b100 << 12);
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6153      	str	r3, [r2, #20]

    // Enable end of conv interrupt EOCIE
    ADC2->IER |= ADC_IER_EOCIE;
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a0c      	ldr	r2, [pc, #48]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6053      	str	r3, [r2, #4]

    // Enable ADC interrupt in NVIC
    NVIC_SetPriority(ADC1_2_IRQn, 2);  // Optional: Set priority
 80019e6:	2102      	movs	r1, #2
 80019e8:	2012      	movs	r0, #18
 80019ea:	f7ff ff45 	bl	8001878 <__NVIC_SetPriority>
    NVIC_EnableIRQ(ADC1_2_IRQn);
 80019ee:	2012      	movs	r0, #18
 80019f0:	f7ff ff24 	bl	800183c <__NVIC_EnableIRQ>

    // Start ADC conversion (triggered by TIM3_TRGO)
    ADC2->CR |= ADC_CR_ADSTART;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <ADC_Poten_PA7_Init+0x144>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6093      	str	r3, [r2, #8]
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	50000100 	.word	0x50000100

08001a14 <ADC1_2_IRQHandler>:

// ADC Interrupt thingy
void ADC1_2_IRQHandler(void) {
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
    if (ADC2->ISR & ADC_ISR_EOC) {
 8001a18:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <ADC1_2_IRQHandler+0x24>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <ADC1_2_IRQHandler+0x1a>
    	// 12-bit result (0–4095)
    	ADC_Value_PA7 = ADC2->DR;
 8001a24:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <ADC1_2_IRQHandler+0x24>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <ADC1_2_IRQHandler+0x28>)
 8001a2c:	801a      	strh	r2, [r3, #0]
    }
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	50000100 	.word	0x50000100
 8001a3c:	2000008c 	.word	0x2000008c

08001a40 <ADC_Truncate>:
 *  This function adjusts/truncates values of the ADC input (potentiometer value)
 *  in order to fit the PWM duty cycle range
 *  ADC = 0-4095
 *  PWM duty cycle = CCRx = 0-159 <-- For a 100k Hz PWM signal
 */
uint16_t ADC_Truncate(int ADC_Val_Poten){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	// truncatedVal = (userInput/4095) * 159
	double ADC_Val_Truncated = (((double)ADC_Val_Poten/(ADC_Bits - 1)) * PWM_DutyCycle_Max);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7fe fd37 	bl	80004bc <__aeabi_i2d>
 8001a4e:	a312      	add	r3, pc, #72	@ (adr r3, 8001a98 <ADC_Truncate+0x58>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fec6 	bl	80007e4 <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	a30f      	add	r3, pc, #60	@ (adr r3, 8001aa0 <ADC_Truncate+0x60>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fd93 	bl	8000590 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// round up to nearest whole number
	return (uint16_t)round(ADC_Val_Truncated);
 8001a72:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a76:	f000 fde5 	bl	8002644 <round>
 8001a7a:	ec53 2b10 	vmov	r2, r3, d0
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7fe ff97 	bl	80009b4 <__aeabi_d2uiz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29b      	uxth	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	f3af 8000 	nop.w
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	40affe00 	.word	0x40affe00
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	4063e000 	.word	0x4063e000

08001aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa8:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aaa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aac:	f7ff feb4 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	@ (8001ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	@ (8001ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <LoopForever+0xe>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8001af4 <LoopForever+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f000 fb55 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ada:	f000 f89f 	bl	8001c1c <main>

08001ade <LoopForever>:

LoopForever:
    b LoopForever
 8001ade:	e7fe      	b.n	8001ade <LoopForever>
  ldr   r0, =_estack
 8001ae0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001aec:	08002720 	.word	0x08002720
  ldr r2, =_sbss
 8001af0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001af4:	200001e0 	.word	0x200001e0

08001af8 <CORDIC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <CORDIC_IRQHandler>
	...

08001afc <Delay_TIM17_Init>:

#include "Delay_Timer.h"
#include "stm32g431xx.h"
#include <stdio.h>

void Delay_TIM17_Init(void){
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
	// Init Clk for TIM3
	RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
 8001b00:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <Delay_TIM17_Init+0x60>)
 8001b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b04:	4a15      	ldr	r2, [pc, #84]	@ (8001b5c <Delay_TIM17_Init+0x60>)
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b0a:	6613      	str	r3, [r2, #96]	@ 0x60

	 // Wait for clock stabilization (optional, for robustness)
	 while (!(RCC->APB2ENR & RCC_APB2ENR_TIM17EN)) {}
 8001b0c:	bf00      	nop
 8001b0e:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <Delay_TIM17_Init+0x60>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f9      	beq.n	8001b0e <Delay_TIM17_Init+0x12>
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 1MHz = 16 Mhz / (16 + 1)(userInput + 1)
	     // 1MHz == 1 uS
	     // therefore, set PSC = 16 and ARR = userInput

	TIM17->PSC = (SystemCoreClock / 1000000) - 1;        // Clk pre-scaler -> 16MHz / 16 = 1MHz
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <Delay_TIM17_Init+0x64>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a11      	ldr	r2, [pc, #68]	@ (8001b64 <Delay_TIM17_Init+0x68>)
 8001b20:	fba2 2303 	umull	r2, r3, r2, r3
 8001b24:	0c9b      	lsrs	r3, r3, #18
 8001b26:	4a10      	ldr	r2, [pc, #64]	@ (8001b68 <Delay_TIM17_Init+0x6c>)
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM17->ARR = 0xFFFF;        // Set maximum duty cycle == 1uS
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <Delay_TIM17_Init+0x6c>)
 8001b2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b32:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Generate an update event to apply PSC and ARR
	TIM17->EGR |= TIM_EGR_UG;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <Delay_TIM17_Init+0x6c>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	4a0b      	ldr	r2, [pc, #44]	@ (8001b68 <Delay_TIM17_Init+0x6c>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6153      	str	r3, [r2, #20]

    // Clear the counter
	TIM17->CNT = 0;
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <Delay_TIM17_Init+0x6c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the timer
	TIM17->CR1 |= TIM_CR1_CEN;
 8001b46:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <Delay_TIM17_Init+0x6c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	@ (8001b68 <Delay_TIM17_Init+0x6c>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	20000004 	.word	0x20000004
 8001b64:	431bde83 	.word	0x431bde83
 8001b68:	40014800 	.word	0x40014800

08001b6c <Delay_uS>:

// 1,000,000 uS == 1 sec
void Delay_uS(uint16_t time_uS){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
	// Reset the counter
	TIM17->CNT = 0;
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <Delay_uS+0x2c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24

	//while ((volatile uint16_t)TIM3->CNT < time_uS);
	while (TIM17->CNT < time_uS);
 8001b7c:	bf00      	nop
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <Delay_uS+0x2c>)
 8001b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d3fa      	bcc.n	8001b7e <Delay_uS+0x12>
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40014800 	.word	0x40014800

08001b9c <Delay_mS>:

// 1,000 uS == 1 mS --> 1000 mS == 1 sec
void Delay_mS(uint16_t time_mS){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]

	for (uint16_t counter = 0; counter < time_mS; counter++){
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	81fb      	strh	r3, [r7, #14]
 8001baa:	e006      	b.n	8001bba <Delay_mS+0x1e>
		Delay_uS(1000);
 8001bac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bb0:	f7ff ffdc 	bl	8001b6c <Delay_uS>
	for (uint16_t counter = 0; counter < time_mS; counter++){
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	81fb      	strh	r3, [r7, #14]
 8001bba:	89fa      	ldrh	r2, [r7, #14]
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f4      	bcc.n	8001bac <Delay_mS+0x10>
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <LED_PA10_Init>:

#define LED_PA10         (1 << 10)
#define DELAY_BRUTE_CNT  250000

// Turn on LED on breadboard
void LED_PA10_Init(void){
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	// init Clk to GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <LED_PA10_Init+0x4c>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd4:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <LED_PA10_Init+0x4c>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Clear PA10
	GPIOA->MODER &= ~(0b11 << 20);
 8001bdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001be6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001bea:	6013      	str	r3, [r2, #0]

	// Set PA10 as output
	GPIOA->MODER |= (0b01 << 20);
 8001bec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bfa:	6013      	str	r3, [r2, #0]

	// Set to LOW default
	GPIOA->ODR &= ~LED_PA10;
 8001bfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c0a:	6153      	str	r3, [r2, #20]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <main>:

/*
 *       Master
 */

int main(void){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	LED_PA10_Init();
 8001c22:	f7ff ffd3 	bl	8001bcc <LED_PA10_Init>
	USART2_PA2_Init();        // PA2 == COMP2_INM
 8001c26:	f7ff f961 	bl	8000eec <USART2_PA2_Init>
	ADC_Poten_PA7_Init();     // TIMER3
 8001c2a:	f7ff fe4f 	bl	80018cc <ADC_Poten_PA7_Init>
	Delay_TIM17_Init();       // Delay_mS()
 8001c2e:	f7ff ff65 	bl	8001afc <Delay_TIM17_Init>

	COMP1_Init();             // PA1+ | PA4-  -> P1
 8001c32:	f7fe ff03 	bl	8000a3c <COMP1_Init>
	COMP3_Init_v2();          // PC1+ | PC0-  -> P2
 8001c36:	f7fe ff5d 	bl	8000af4 <COMP3_Init_v2>
	COMP4_Init_v2();          // PB0+ | PB2-  -> P3
 8001c3a:	f7fe ffad 	bl	8000b98 <COMP4_Init_v2>

	PWM_PB6_TIM4_CH1_Init();  // M1H
 8001c3e:	f7ff fa77 	bl	8001130 <PWM_PB6_TIM4_CH1_Init>
	PWM_PB3_TIM2_CH2_Init();  // M1L
 8001c42:	f7ff faf1 	bl	8001228 <PWM_PB3_TIM2_CH2_Init>
	PWM_PA15_TIM2_CH1_Init(); // M2H
 8001c46:	f7ff fb7d 	bl	8001344 <PWM_PA15_TIM2_CH1_Init>
	PWM_PB7_TIM4_CH2_Init();  // M2L
 8001c4a:	f7ff f9f5 	bl	8001038 <PWM_PB7_TIM4_CH2_Init>
	PWM_PC2_TIM1_CH3_Init();  // M3H
 8001c4e:	f7ff fc13 	bl	8001478 <PWM_PC2_TIM1_CH3_Init>
	PWM_PC3_TIM1_CH4_Init();  // M3L
 8001c52:	f7ff fc93 	bl	800157c <PWM_PC3_TIM1_CH4_Init>

	SPI2_Master_Init();
 8001c56:	f7ff f869 	bl	8000d2c <SPI2_Master_Init>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c5e:	607b      	str	r3, [r7, #4]
  return(result);
 8001c60:	687b      	ldr	r3, [r7, #4]

	// Ensure global interrupts are enabled
	if (__get_PRIMASK() & 1){
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <main+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c6a:	b662      	cpsie	i
}
 8001c6c:	bf00      	nop
	while (1){
		// Active LED
		//GPIOA->ODR ^= LED_PA10;

		// Send SPI data
		GPIOB->ODR &= ~SPI2_PB12_MASTER_CS; // Enable CS for slave1
 8001c6e:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <main+0xa0>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <main+0xa0>)
 8001c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c78:	6153      	str	r3, [r2, #20]
		Delay_mS(1);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff ff8e 	bl	8001b9c <Delay_mS>

		Read_Slave_Value = SPI2_TX_RX(Throttle_Algo(ADC_Truncate(ADC_Value_PA7))); // Send (Max == 2^8 == 255) and store read value
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <main+0xa4>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff feda 	bl	8001a40 <ADC_Truncate>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f999 	bl	8000fc8 <Throttle_Algo>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f8c9 	bl	8000e30 <SPI2_TX_RX>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <main+0xa8>)
 8001ca4:	701a      	strb	r2, [r3, #0]
		//Read_Slave_Value = SPI2_TX_RX(140);
		//Delay_mS(1); // Hold time

		GPIOB->ODR |= SPI2_PB12_MASTER_CS;  // Disable  CS
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <main+0xa0>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <main+0xa0>)
 8001cac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cb0:	6153      	str	r3, [r2, #20]
		//printf("Read from Slave: %u \r\n", Read_Slave_Value);
		Delay_mS(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff ff72 	bl	8001b9c <Delay_mS>
		GPIOB->ODR &= ~SPI2_PB12_MASTER_CS; // Enable CS for slave1
 8001cb8:	bf00      	nop
 8001cba:	e7d8      	b.n	8001c6e <main+0x52>
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	2000008c 	.word	0x2000008c
 8001cc4:	20000084 	.word	0x20000084

08001cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_IncTick+0x1c>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_IncTick+0x20>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a03      	ldr	r2, [pc, #12]	@ (8001ce4 <HAL_IncTick+0x1c>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	20000090 	.word	0x20000090
 8001ce8:	20000008 	.word	0x20000008

08001cec <std>:
 8001cec:	2300      	movs	r3, #0
 8001cee:	b510      	push	{r4, lr}
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8001cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cfa:	6083      	str	r3, [r0, #8]
 8001cfc:	8181      	strh	r1, [r0, #12]
 8001cfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8001d00:	81c2      	strh	r2, [r0, #14]
 8001d02:	6183      	str	r3, [r0, #24]
 8001d04:	4619      	mov	r1, r3
 8001d06:	2208      	movs	r2, #8
 8001d08:	305c      	adds	r0, #92	@ 0x5c
 8001d0a:	f000 f9e7 	bl	80020dc <memset>
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <std+0x58>)
 8001d10:	6263      	str	r3, [r4, #36]	@ 0x24
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <std+0x5c>)
 8001d14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <std+0x60>)
 8001d18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <std+0x64>)
 8001d1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <std+0x68>)
 8001d20:	6224      	str	r4, [r4, #32]
 8001d22:	429c      	cmp	r4, r3
 8001d24:	d006      	beq.n	8001d34 <std+0x48>
 8001d26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001d2a:	4294      	cmp	r4, r2
 8001d2c:	d002      	beq.n	8001d34 <std+0x48>
 8001d2e:	33d0      	adds	r3, #208	@ 0xd0
 8001d30:	429c      	cmp	r4, r3
 8001d32:	d105      	bne.n	8001d40 <std+0x54>
 8001d34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d3c:	f000 ba46 	b.w	80021cc <__retarget_lock_init_recursive>
 8001d40:	bd10      	pop	{r4, pc}
 8001d42:	bf00      	nop
 8001d44:	08001f2d 	.word	0x08001f2d
 8001d48:	08001f4f 	.word	0x08001f4f
 8001d4c:	08001f87 	.word	0x08001f87
 8001d50:	08001fab 	.word	0x08001fab
 8001d54:	20000094 	.word	0x20000094

08001d58 <stdio_exit_handler>:
 8001d58:	4a02      	ldr	r2, [pc, #8]	@ (8001d64 <stdio_exit_handler+0xc>)
 8001d5a:	4903      	ldr	r1, [pc, #12]	@ (8001d68 <stdio_exit_handler+0x10>)
 8001d5c:	4803      	ldr	r0, [pc, #12]	@ (8001d6c <stdio_exit_handler+0x14>)
 8001d5e:	f000 b869 	b.w	8001e34 <_fwalk_sglue>
 8001d62:	bf00      	nop
 8001d64:	2000000c 	.word	0x2000000c
 8001d68:	080024cd 	.word	0x080024cd
 8001d6c:	2000001c 	.word	0x2000001c

08001d70 <cleanup_stdio>:
 8001d70:	6841      	ldr	r1, [r0, #4]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <cleanup_stdio+0x34>)
 8001d74:	4299      	cmp	r1, r3
 8001d76:	b510      	push	{r4, lr}
 8001d78:	4604      	mov	r4, r0
 8001d7a:	d001      	beq.n	8001d80 <cleanup_stdio+0x10>
 8001d7c:	f000 fba6 	bl	80024cc <_fflush_r>
 8001d80:	68a1      	ldr	r1, [r4, #8]
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <cleanup_stdio+0x38>)
 8001d84:	4299      	cmp	r1, r3
 8001d86:	d002      	beq.n	8001d8e <cleanup_stdio+0x1e>
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f000 fb9f 	bl	80024cc <_fflush_r>
 8001d8e:	68e1      	ldr	r1, [r4, #12]
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <cleanup_stdio+0x3c>)
 8001d92:	4299      	cmp	r1, r3
 8001d94:	d004      	beq.n	8001da0 <cleanup_stdio+0x30>
 8001d96:	4620      	mov	r0, r4
 8001d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d9c:	f000 bb96 	b.w	80024cc <_fflush_r>
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	20000094 	.word	0x20000094
 8001da8:	200000fc 	.word	0x200000fc
 8001dac:	20000164 	.word	0x20000164

08001db0 <global_stdio_init.part.0>:
 8001db0:	b510      	push	{r4, lr}
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <global_stdio_init.part.0+0x30>)
 8001db4:	4c0b      	ldr	r4, [pc, #44]	@ (8001de4 <global_stdio_init.part.0+0x34>)
 8001db6:	4a0c      	ldr	r2, [pc, #48]	@ (8001de8 <global_stdio_init.part.0+0x38>)
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	4620      	mov	r0, r4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	f7ff ff94 	bl	8001cec <std>
 8001dc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2109      	movs	r1, #9
 8001dcc:	f7ff ff8e 	bl	8001cec <std>
 8001dd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dda:	2112      	movs	r1, #18
 8001ddc:	f7ff bf86 	b.w	8001cec <std>
 8001de0:	200001cc 	.word	0x200001cc
 8001de4:	20000094 	.word	0x20000094
 8001de8:	08001d59 	.word	0x08001d59

08001dec <__sfp_lock_acquire>:
 8001dec:	4801      	ldr	r0, [pc, #4]	@ (8001df4 <__sfp_lock_acquire+0x8>)
 8001dee:	f000 b9ee 	b.w	80021ce <__retarget_lock_acquire_recursive>
 8001df2:	bf00      	nop
 8001df4:	200001d5 	.word	0x200001d5

08001df8 <__sfp_lock_release>:
 8001df8:	4801      	ldr	r0, [pc, #4]	@ (8001e00 <__sfp_lock_release+0x8>)
 8001dfa:	f000 b9e9 	b.w	80021d0 <__retarget_lock_release_recursive>
 8001dfe:	bf00      	nop
 8001e00:	200001d5 	.word	0x200001d5

08001e04 <__sinit>:
 8001e04:	b510      	push	{r4, lr}
 8001e06:	4604      	mov	r4, r0
 8001e08:	f7ff fff0 	bl	8001dec <__sfp_lock_acquire>
 8001e0c:	6a23      	ldr	r3, [r4, #32]
 8001e0e:	b11b      	cbz	r3, 8001e18 <__sinit+0x14>
 8001e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e14:	f7ff bff0 	b.w	8001df8 <__sfp_lock_release>
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <__sinit+0x28>)
 8001e1a:	6223      	str	r3, [r4, #32]
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <__sinit+0x2c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f5      	bne.n	8001e10 <__sinit+0xc>
 8001e24:	f7ff ffc4 	bl	8001db0 <global_stdio_init.part.0>
 8001e28:	e7f2      	b.n	8001e10 <__sinit+0xc>
 8001e2a:	bf00      	nop
 8001e2c:	08001d71 	.word	0x08001d71
 8001e30:	200001cc 	.word	0x200001cc

08001e34 <_fwalk_sglue>:
 8001e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e38:	4607      	mov	r7, r0
 8001e3a:	4688      	mov	r8, r1
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	2600      	movs	r6, #0
 8001e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e44:	f1b9 0901 	subs.w	r9, r9, #1
 8001e48:	d505      	bpl.n	8001e56 <_fwalk_sglue+0x22>
 8001e4a:	6824      	ldr	r4, [r4, #0]
 8001e4c:	2c00      	cmp	r4, #0
 8001e4e:	d1f7      	bne.n	8001e40 <_fwalk_sglue+0xc>
 8001e50:	4630      	mov	r0, r6
 8001e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e56:	89ab      	ldrh	r3, [r5, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d907      	bls.n	8001e6c <_fwalk_sglue+0x38>
 8001e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e60:	3301      	adds	r3, #1
 8001e62:	d003      	beq.n	8001e6c <_fwalk_sglue+0x38>
 8001e64:	4629      	mov	r1, r5
 8001e66:	4638      	mov	r0, r7
 8001e68:	47c0      	blx	r8
 8001e6a:	4306      	orrs	r6, r0
 8001e6c:	3568      	adds	r5, #104	@ 0x68
 8001e6e:	e7e9      	b.n	8001e44 <_fwalk_sglue+0x10>

08001e70 <_puts_r>:
 8001e70:	6a03      	ldr	r3, [r0, #32]
 8001e72:	b570      	push	{r4, r5, r6, lr}
 8001e74:	6884      	ldr	r4, [r0, #8]
 8001e76:	4605      	mov	r5, r0
 8001e78:	460e      	mov	r6, r1
 8001e7a:	b90b      	cbnz	r3, 8001e80 <_puts_r+0x10>
 8001e7c:	f7ff ffc2 	bl	8001e04 <__sinit>
 8001e80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e82:	07db      	lsls	r3, r3, #31
 8001e84:	d405      	bmi.n	8001e92 <_puts_r+0x22>
 8001e86:	89a3      	ldrh	r3, [r4, #12]
 8001e88:	0598      	lsls	r0, r3, #22
 8001e8a:	d402      	bmi.n	8001e92 <_puts_r+0x22>
 8001e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e8e:	f000 f99e 	bl	80021ce <__retarget_lock_acquire_recursive>
 8001e92:	89a3      	ldrh	r3, [r4, #12]
 8001e94:	0719      	lsls	r1, r3, #28
 8001e96:	d502      	bpl.n	8001e9e <_puts_r+0x2e>
 8001e98:	6923      	ldr	r3, [r4, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d135      	bne.n	8001f0a <_puts_r+0x9a>
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	4628      	mov	r0, r5
 8001ea2:	f000 f8c5 	bl	8002030 <__swsetup_r>
 8001ea6:	b380      	cbz	r0, 8001f0a <_puts_r+0x9a>
 8001ea8:	f04f 35ff 	mov.w	r5, #4294967295
 8001eac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001eae:	07da      	lsls	r2, r3, #31
 8001eb0:	d405      	bmi.n	8001ebe <_puts_r+0x4e>
 8001eb2:	89a3      	ldrh	r3, [r4, #12]
 8001eb4:	059b      	lsls	r3, r3, #22
 8001eb6:	d402      	bmi.n	8001ebe <_puts_r+0x4e>
 8001eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001eba:	f000 f989 	bl	80021d0 <__retarget_lock_release_recursive>
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da04      	bge.n	8001ed0 <_puts_r+0x60>
 8001ec6:	69a2      	ldr	r2, [r4, #24]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dc17      	bgt.n	8001efc <_puts_r+0x8c>
 8001ecc:	290a      	cmp	r1, #10
 8001ece:	d015      	beq.n	8001efc <_puts_r+0x8c>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	6022      	str	r2, [r4, #0]
 8001ed6:	7019      	strb	r1, [r3, #0]
 8001ed8:	68a3      	ldr	r3, [r4, #8]
 8001eda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	60a3      	str	r3, [r4, #8]
 8001ee2:	2900      	cmp	r1, #0
 8001ee4:	d1ed      	bne.n	8001ec2 <_puts_r+0x52>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da11      	bge.n	8001f0e <_puts_r+0x9e>
 8001eea:	4622      	mov	r2, r4
 8001eec:	210a      	movs	r1, #10
 8001eee:	4628      	mov	r0, r5
 8001ef0:	f000 f85f 	bl	8001fb2 <__swbuf_r>
 8001ef4:	3001      	adds	r0, #1
 8001ef6:	d0d7      	beq.n	8001ea8 <_puts_r+0x38>
 8001ef8:	250a      	movs	r5, #10
 8001efa:	e7d7      	b.n	8001eac <_puts_r+0x3c>
 8001efc:	4622      	mov	r2, r4
 8001efe:	4628      	mov	r0, r5
 8001f00:	f000 f857 	bl	8001fb2 <__swbuf_r>
 8001f04:	3001      	adds	r0, #1
 8001f06:	d1e7      	bne.n	8001ed8 <_puts_r+0x68>
 8001f08:	e7ce      	b.n	8001ea8 <_puts_r+0x38>
 8001f0a:	3e01      	subs	r6, #1
 8001f0c:	e7e4      	b.n	8001ed8 <_puts_r+0x68>
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	6022      	str	r2, [r4, #0]
 8001f14:	220a      	movs	r2, #10
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e7ee      	b.n	8001ef8 <_puts_r+0x88>
	...

08001f1c <puts>:
 8001f1c:	4b02      	ldr	r3, [pc, #8]	@ (8001f28 <puts+0xc>)
 8001f1e:	4601      	mov	r1, r0
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	f7ff bfa5 	b.w	8001e70 <_puts_r>
 8001f26:	bf00      	nop
 8001f28:	20000018 	.word	0x20000018

08001f2c <__sread>:
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	460c      	mov	r4, r1
 8001f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f34:	f000 f8fc 	bl	8002130 <_read_r>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	bfab      	itete	ge
 8001f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8001f40:	181b      	addge	r3, r3, r0
 8001f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001f46:	bfac      	ite	ge
 8001f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001f4a:	81a3      	strhlt	r3, [r4, #12]
 8001f4c:	bd10      	pop	{r4, pc}

08001f4e <__swrite>:
 8001f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f52:	461f      	mov	r7, r3
 8001f54:	898b      	ldrh	r3, [r1, #12]
 8001f56:	05db      	lsls	r3, r3, #23
 8001f58:	4605      	mov	r5, r0
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	4616      	mov	r6, r2
 8001f5e:	d505      	bpl.n	8001f6c <__swrite+0x1e>
 8001f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f64:	2302      	movs	r3, #2
 8001f66:	2200      	movs	r2, #0
 8001f68:	f000 f8d0 	bl	800210c <_lseek_r>
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f76:	81a3      	strh	r3, [r4, #12]
 8001f78:	4632      	mov	r2, r6
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f82:	f000 b8e7 	b.w	8002154 <_write_r>

08001f86 <__sseek>:
 8001f86:	b510      	push	{r4, lr}
 8001f88:	460c      	mov	r4, r1
 8001f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f8e:	f000 f8bd 	bl	800210c <_lseek_r>
 8001f92:	1c43      	adds	r3, r0, #1
 8001f94:	89a3      	ldrh	r3, [r4, #12]
 8001f96:	bf15      	itete	ne
 8001f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001fa2:	81a3      	strheq	r3, [r4, #12]
 8001fa4:	bf18      	it	ne
 8001fa6:	81a3      	strhne	r3, [r4, #12]
 8001fa8:	bd10      	pop	{r4, pc}

08001faa <__sclose>:
 8001faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fae:	f000 b89d 	b.w	80020ec <_close_r>

08001fb2 <__swbuf_r>:
 8001fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb4:	460e      	mov	r6, r1
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	4605      	mov	r5, r0
 8001fba:	b118      	cbz	r0, 8001fc4 <__swbuf_r+0x12>
 8001fbc:	6a03      	ldr	r3, [r0, #32]
 8001fbe:	b90b      	cbnz	r3, 8001fc4 <__swbuf_r+0x12>
 8001fc0:	f7ff ff20 	bl	8001e04 <__sinit>
 8001fc4:	69a3      	ldr	r3, [r4, #24]
 8001fc6:	60a3      	str	r3, [r4, #8]
 8001fc8:	89a3      	ldrh	r3, [r4, #12]
 8001fca:	071a      	lsls	r2, r3, #28
 8001fcc:	d501      	bpl.n	8001fd2 <__swbuf_r+0x20>
 8001fce:	6923      	ldr	r3, [r4, #16]
 8001fd0:	b943      	cbnz	r3, 8001fe4 <__swbuf_r+0x32>
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	4628      	mov	r0, r5
 8001fd6:	f000 f82b 	bl	8002030 <__swsetup_r>
 8001fda:	b118      	cbz	r0, 8001fe4 <__swbuf_r+0x32>
 8001fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8001fe0:	4638      	mov	r0, r7
 8001fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	6922      	ldr	r2, [r4, #16]
 8001fe8:	1a98      	subs	r0, r3, r2
 8001fea:	6963      	ldr	r3, [r4, #20]
 8001fec:	b2f6      	uxtb	r6, r6
 8001fee:	4283      	cmp	r3, r0
 8001ff0:	4637      	mov	r7, r6
 8001ff2:	dc05      	bgt.n	8002000 <__swbuf_r+0x4e>
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	f000 fa68 	bl	80024cc <_fflush_r>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d1ed      	bne.n	8001fdc <__swbuf_r+0x2a>
 8002000:	68a3      	ldr	r3, [r4, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	60a3      	str	r3, [r4, #8]
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	6022      	str	r2, [r4, #0]
 800200c:	701e      	strb	r6, [r3, #0]
 800200e:	6962      	ldr	r2, [r4, #20]
 8002010:	1c43      	adds	r3, r0, #1
 8002012:	429a      	cmp	r2, r3
 8002014:	d004      	beq.n	8002020 <__swbuf_r+0x6e>
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	07db      	lsls	r3, r3, #31
 800201a:	d5e1      	bpl.n	8001fe0 <__swbuf_r+0x2e>
 800201c:	2e0a      	cmp	r6, #10
 800201e:	d1df      	bne.n	8001fe0 <__swbuf_r+0x2e>
 8002020:	4621      	mov	r1, r4
 8002022:	4628      	mov	r0, r5
 8002024:	f000 fa52 	bl	80024cc <_fflush_r>
 8002028:	2800      	cmp	r0, #0
 800202a:	d0d9      	beq.n	8001fe0 <__swbuf_r+0x2e>
 800202c:	e7d6      	b.n	8001fdc <__swbuf_r+0x2a>
	...

08002030 <__swsetup_r>:
 8002030:	b538      	push	{r3, r4, r5, lr}
 8002032:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <__swsetup_r+0xa8>)
 8002034:	4605      	mov	r5, r0
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	460c      	mov	r4, r1
 800203a:	b118      	cbz	r0, 8002044 <__swsetup_r+0x14>
 800203c:	6a03      	ldr	r3, [r0, #32]
 800203e:	b90b      	cbnz	r3, 8002044 <__swsetup_r+0x14>
 8002040:	f7ff fee0 	bl	8001e04 <__sinit>
 8002044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002048:	0719      	lsls	r1, r3, #28
 800204a:	d422      	bmi.n	8002092 <__swsetup_r+0x62>
 800204c:	06da      	lsls	r2, r3, #27
 800204e:	d407      	bmi.n	8002060 <__swsetup_r+0x30>
 8002050:	2209      	movs	r2, #9
 8002052:	602a      	str	r2, [r5, #0]
 8002054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002058:	81a3      	strh	r3, [r4, #12]
 800205a:	f04f 30ff 	mov.w	r0, #4294967295
 800205e:	e033      	b.n	80020c8 <__swsetup_r+0x98>
 8002060:	0758      	lsls	r0, r3, #29
 8002062:	d512      	bpl.n	800208a <__swsetup_r+0x5a>
 8002064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002066:	b141      	cbz	r1, 800207a <__swsetup_r+0x4a>
 8002068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800206c:	4299      	cmp	r1, r3
 800206e:	d002      	beq.n	8002076 <__swsetup_r+0x46>
 8002070:	4628      	mov	r0, r5
 8002072:	f000 f8af 	bl	80021d4 <_free_r>
 8002076:	2300      	movs	r3, #0
 8002078:	6363      	str	r3, [r4, #52]	@ 0x34
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002080:	81a3      	strh	r3, [r4, #12]
 8002082:	2300      	movs	r3, #0
 8002084:	6063      	str	r3, [r4, #4]
 8002086:	6923      	ldr	r3, [r4, #16]
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	89a3      	ldrh	r3, [r4, #12]
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	81a3      	strh	r3, [r4, #12]
 8002092:	6923      	ldr	r3, [r4, #16]
 8002094:	b94b      	cbnz	r3, 80020aa <__swsetup_r+0x7a>
 8002096:	89a3      	ldrh	r3, [r4, #12]
 8002098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800209c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020a0:	d003      	beq.n	80020aa <__swsetup_r+0x7a>
 80020a2:	4621      	mov	r1, r4
 80020a4:	4628      	mov	r0, r5
 80020a6:	f000 fa5f 	bl	8002568 <__smakebuf_r>
 80020aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ae:	f013 0201 	ands.w	r2, r3, #1
 80020b2:	d00a      	beq.n	80020ca <__swsetup_r+0x9a>
 80020b4:	2200      	movs	r2, #0
 80020b6:	60a2      	str	r2, [r4, #8]
 80020b8:	6962      	ldr	r2, [r4, #20]
 80020ba:	4252      	negs	r2, r2
 80020bc:	61a2      	str	r2, [r4, #24]
 80020be:	6922      	ldr	r2, [r4, #16]
 80020c0:	b942      	cbnz	r2, 80020d4 <__swsetup_r+0xa4>
 80020c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80020c6:	d1c5      	bne.n	8002054 <__swsetup_r+0x24>
 80020c8:	bd38      	pop	{r3, r4, r5, pc}
 80020ca:	0799      	lsls	r1, r3, #30
 80020cc:	bf58      	it	pl
 80020ce:	6962      	ldrpl	r2, [r4, #20]
 80020d0:	60a2      	str	r2, [r4, #8]
 80020d2:	e7f4      	b.n	80020be <__swsetup_r+0x8e>
 80020d4:	2000      	movs	r0, #0
 80020d6:	e7f7      	b.n	80020c8 <__swsetup_r+0x98>
 80020d8:	20000018 	.word	0x20000018

080020dc <memset>:
 80020dc:	4402      	add	r2, r0
 80020de:	4603      	mov	r3, r0
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d100      	bne.n	80020e6 <memset+0xa>
 80020e4:	4770      	bx	lr
 80020e6:	f803 1b01 	strb.w	r1, [r3], #1
 80020ea:	e7f9      	b.n	80020e0 <memset+0x4>

080020ec <_close_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4d06      	ldr	r5, [pc, #24]	@ (8002108 <_close_r+0x1c>)
 80020f0:	2300      	movs	r3, #0
 80020f2:	4604      	mov	r4, r0
 80020f4:	4608      	mov	r0, r1
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	f7ff fb24 	bl	8001744 <_close>
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	d102      	bne.n	8002106 <_close_r+0x1a>
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	b103      	cbz	r3, 8002106 <_close_r+0x1a>
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	200001d0 	.word	0x200001d0

0800210c <_lseek_r>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	4d07      	ldr	r5, [pc, #28]	@ (800212c <_lseek_r+0x20>)
 8002110:	4604      	mov	r4, r0
 8002112:	4608      	mov	r0, r1
 8002114:	4611      	mov	r1, r2
 8002116:	2200      	movs	r2, #0
 8002118:	602a      	str	r2, [r5, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	f7ff fb39 	bl	8001792 <_lseek>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	d102      	bne.n	800212a <_lseek_r+0x1e>
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	b103      	cbz	r3, 800212a <_lseek_r+0x1e>
 8002128:	6023      	str	r3, [r4, #0]
 800212a:	bd38      	pop	{r3, r4, r5, pc}
 800212c:	200001d0 	.word	0x200001d0

08002130 <_read_r>:
 8002130:	b538      	push	{r3, r4, r5, lr}
 8002132:	4d07      	ldr	r5, [pc, #28]	@ (8002150 <_read_r+0x20>)
 8002134:	4604      	mov	r4, r0
 8002136:	4608      	mov	r0, r1
 8002138:	4611      	mov	r1, r2
 800213a:	2200      	movs	r2, #0
 800213c:	602a      	str	r2, [r5, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	f7ff fac7 	bl	80016d2 <_read>
 8002144:	1c43      	adds	r3, r0, #1
 8002146:	d102      	bne.n	800214e <_read_r+0x1e>
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	b103      	cbz	r3, 800214e <_read_r+0x1e>
 800214c:	6023      	str	r3, [r4, #0]
 800214e:	bd38      	pop	{r3, r4, r5, pc}
 8002150:	200001d0 	.word	0x200001d0

08002154 <_write_r>:
 8002154:	b538      	push	{r3, r4, r5, lr}
 8002156:	4d07      	ldr	r5, [pc, #28]	@ (8002174 <_write_r+0x20>)
 8002158:	4604      	mov	r4, r0
 800215a:	4608      	mov	r0, r1
 800215c:	4611      	mov	r1, r2
 800215e:	2200      	movs	r2, #0
 8002160:	602a      	str	r2, [r5, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff fad2 	bl	800170c <_write>
 8002168:	1c43      	adds	r3, r0, #1
 800216a:	d102      	bne.n	8002172 <_write_r+0x1e>
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	b103      	cbz	r3, 8002172 <_write_r+0x1e>
 8002170:	6023      	str	r3, [r4, #0]
 8002172:	bd38      	pop	{r3, r4, r5, pc}
 8002174:	200001d0 	.word	0x200001d0

08002178 <__errno>:
 8002178:	4b01      	ldr	r3, [pc, #4]	@ (8002180 <__errno+0x8>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000018 	.word	0x20000018

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4d0d      	ldr	r5, [pc, #52]	@ (80021bc <__libc_init_array+0x38>)
 8002188:	4c0d      	ldr	r4, [pc, #52]	@ (80021c0 <__libc_init_array+0x3c>)
 800218a:	1b64      	subs	r4, r4, r5
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	2600      	movs	r6, #0
 8002190:	42a6      	cmp	r6, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	4d0b      	ldr	r5, [pc, #44]	@ (80021c4 <__libc_init_array+0x40>)
 8002196:	4c0c      	ldr	r4, [pc, #48]	@ (80021c8 <__libc_init_array+0x44>)
 8002198:	f000 fa9a 	bl	80026d0 <_init>
 800219c:	1b64      	subs	r4, r4, r5
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	2600      	movs	r6, #0
 80021a2:	42a6      	cmp	r6, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ac:	4798      	blx	r3
 80021ae:	3601      	adds	r6, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b6:	4798      	blx	r3
 80021b8:	3601      	adds	r6, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	08002718 	.word	0x08002718
 80021c0:	08002718 	.word	0x08002718
 80021c4:	08002718 	.word	0x08002718
 80021c8:	0800271c 	.word	0x0800271c

080021cc <__retarget_lock_init_recursive>:
 80021cc:	4770      	bx	lr

080021ce <__retarget_lock_acquire_recursive>:
 80021ce:	4770      	bx	lr

080021d0 <__retarget_lock_release_recursive>:
 80021d0:	4770      	bx	lr
	...

080021d4 <_free_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4605      	mov	r5, r0
 80021d8:	2900      	cmp	r1, #0
 80021da:	d041      	beq.n	8002260 <_free_r+0x8c>
 80021dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021e0:	1f0c      	subs	r4, r1, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bfb8      	it	lt
 80021e6:	18e4      	addlt	r4, r4, r3
 80021e8:	f000 f8e0 	bl	80023ac <__malloc_lock>
 80021ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002264 <_free_r+0x90>)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	b933      	cbnz	r3, 8002200 <_free_r+0x2c>
 80021f2:	6063      	str	r3, [r4, #4]
 80021f4:	6014      	str	r4, [r2, #0]
 80021f6:	4628      	mov	r0, r5
 80021f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021fc:	f000 b8dc 	b.w	80023b8 <__malloc_unlock>
 8002200:	42a3      	cmp	r3, r4
 8002202:	d908      	bls.n	8002216 <_free_r+0x42>
 8002204:	6820      	ldr	r0, [r4, #0]
 8002206:	1821      	adds	r1, r4, r0
 8002208:	428b      	cmp	r3, r1
 800220a:	bf01      	itttt	eq
 800220c:	6819      	ldreq	r1, [r3, #0]
 800220e:	685b      	ldreq	r3, [r3, #4]
 8002210:	1809      	addeq	r1, r1, r0
 8002212:	6021      	streq	r1, [r4, #0]
 8002214:	e7ed      	b.n	80021f2 <_free_r+0x1e>
 8002216:	461a      	mov	r2, r3
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	b10b      	cbz	r3, 8002220 <_free_r+0x4c>
 800221c:	42a3      	cmp	r3, r4
 800221e:	d9fa      	bls.n	8002216 <_free_r+0x42>
 8002220:	6811      	ldr	r1, [r2, #0]
 8002222:	1850      	adds	r0, r2, r1
 8002224:	42a0      	cmp	r0, r4
 8002226:	d10b      	bne.n	8002240 <_free_r+0x6c>
 8002228:	6820      	ldr	r0, [r4, #0]
 800222a:	4401      	add	r1, r0
 800222c:	1850      	adds	r0, r2, r1
 800222e:	4283      	cmp	r3, r0
 8002230:	6011      	str	r1, [r2, #0]
 8002232:	d1e0      	bne.n	80021f6 <_free_r+0x22>
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	6053      	str	r3, [r2, #4]
 800223a:	4408      	add	r0, r1
 800223c:	6010      	str	r0, [r2, #0]
 800223e:	e7da      	b.n	80021f6 <_free_r+0x22>
 8002240:	d902      	bls.n	8002248 <_free_r+0x74>
 8002242:	230c      	movs	r3, #12
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	e7d6      	b.n	80021f6 <_free_r+0x22>
 8002248:	6820      	ldr	r0, [r4, #0]
 800224a:	1821      	adds	r1, r4, r0
 800224c:	428b      	cmp	r3, r1
 800224e:	bf04      	itt	eq
 8002250:	6819      	ldreq	r1, [r3, #0]
 8002252:	685b      	ldreq	r3, [r3, #4]
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	bf04      	itt	eq
 8002258:	1809      	addeq	r1, r1, r0
 800225a:	6021      	streq	r1, [r4, #0]
 800225c:	6054      	str	r4, [r2, #4]
 800225e:	e7ca      	b.n	80021f6 <_free_r+0x22>
 8002260:	bd38      	pop	{r3, r4, r5, pc}
 8002262:	bf00      	nop
 8002264:	200001dc 	.word	0x200001dc

08002268 <sbrk_aligned>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4e0f      	ldr	r6, [pc, #60]	@ (80022a8 <sbrk_aligned+0x40>)
 800226c:	460c      	mov	r4, r1
 800226e:	6831      	ldr	r1, [r6, #0]
 8002270:	4605      	mov	r5, r0
 8002272:	b911      	cbnz	r1, 800227a <sbrk_aligned+0x12>
 8002274:	f000 f9d6 	bl	8002624 <_sbrk_r>
 8002278:	6030      	str	r0, [r6, #0]
 800227a:	4621      	mov	r1, r4
 800227c:	4628      	mov	r0, r5
 800227e:	f000 f9d1 	bl	8002624 <_sbrk_r>
 8002282:	1c43      	adds	r3, r0, #1
 8002284:	d103      	bne.n	800228e <sbrk_aligned+0x26>
 8002286:	f04f 34ff 	mov.w	r4, #4294967295
 800228a:	4620      	mov	r0, r4
 800228c:	bd70      	pop	{r4, r5, r6, pc}
 800228e:	1cc4      	adds	r4, r0, #3
 8002290:	f024 0403 	bic.w	r4, r4, #3
 8002294:	42a0      	cmp	r0, r4
 8002296:	d0f8      	beq.n	800228a <sbrk_aligned+0x22>
 8002298:	1a21      	subs	r1, r4, r0
 800229a:	4628      	mov	r0, r5
 800229c:	f000 f9c2 	bl	8002624 <_sbrk_r>
 80022a0:	3001      	adds	r0, #1
 80022a2:	d1f2      	bne.n	800228a <sbrk_aligned+0x22>
 80022a4:	e7ef      	b.n	8002286 <sbrk_aligned+0x1e>
 80022a6:	bf00      	nop
 80022a8:	200001d8 	.word	0x200001d8

080022ac <_malloc_r>:
 80022ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022b0:	1ccd      	adds	r5, r1, #3
 80022b2:	f025 0503 	bic.w	r5, r5, #3
 80022b6:	3508      	adds	r5, #8
 80022b8:	2d0c      	cmp	r5, #12
 80022ba:	bf38      	it	cc
 80022bc:	250c      	movcc	r5, #12
 80022be:	2d00      	cmp	r5, #0
 80022c0:	4606      	mov	r6, r0
 80022c2:	db01      	blt.n	80022c8 <_malloc_r+0x1c>
 80022c4:	42a9      	cmp	r1, r5
 80022c6:	d904      	bls.n	80022d2 <_malloc_r+0x26>
 80022c8:	230c      	movs	r3, #12
 80022ca:	6033      	str	r3, [r6, #0]
 80022cc:	2000      	movs	r0, #0
 80022ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023a8 <_malloc_r+0xfc>
 80022d6:	f000 f869 	bl	80023ac <__malloc_lock>
 80022da:	f8d8 3000 	ldr.w	r3, [r8]
 80022de:	461c      	mov	r4, r3
 80022e0:	bb44      	cbnz	r4, 8002334 <_malloc_r+0x88>
 80022e2:	4629      	mov	r1, r5
 80022e4:	4630      	mov	r0, r6
 80022e6:	f7ff ffbf 	bl	8002268 <sbrk_aligned>
 80022ea:	1c43      	adds	r3, r0, #1
 80022ec:	4604      	mov	r4, r0
 80022ee:	d158      	bne.n	80023a2 <_malloc_r+0xf6>
 80022f0:	f8d8 4000 	ldr.w	r4, [r8]
 80022f4:	4627      	mov	r7, r4
 80022f6:	2f00      	cmp	r7, #0
 80022f8:	d143      	bne.n	8002382 <_malloc_r+0xd6>
 80022fa:	2c00      	cmp	r4, #0
 80022fc:	d04b      	beq.n	8002396 <_malloc_r+0xea>
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	4639      	mov	r1, r7
 8002302:	4630      	mov	r0, r6
 8002304:	eb04 0903 	add.w	r9, r4, r3
 8002308:	f000 f98c 	bl	8002624 <_sbrk_r>
 800230c:	4581      	cmp	r9, r0
 800230e:	d142      	bne.n	8002396 <_malloc_r+0xea>
 8002310:	6821      	ldr	r1, [r4, #0]
 8002312:	1a6d      	subs	r5, r5, r1
 8002314:	4629      	mov	r1, r5
 8002316:	4630      	mov	r0, r6
 8002318:	f7ff ffa6 	bl	8002268 <sbrk_aligned>
 800231c:	3001      	adds	r0, #1
 800231e:	d03a      	beq.n	8002396 <_malloc_r+0xea>
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	442b      	add	r3, r5
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	f8d8 3000 	ldr.w	r3, [r8]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	bb62      	cbnz	r2, 8002388 <_malloc_r+0xdc>
 800232e:	f8c8 7000 	str.w	r7, [r8]
 8002332:	e00f      	b.n	8002354 <_malloc_r+0xa8>
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	1b52      	subs	r2, r2, r5
 8002338:	d420      	bmi.n	800237c <_malloc_r+0xd0>
 800233a:	2a0b      	cmp	r2, #11
 800233c:	d917      	bls.n	800236e <_malloc_r+0xc2>
 800233e:	1961      	adds	r1, r4, r5
 8002340:	42a3      	cmp	r3, r4
 8002342:	6025      	str	r5, [r4, #0]
 8002344:	bf18      	it	ne
 8002346:	6059      	strne	r1, [r3, #4]
 8002348:	6863      	ldr	r3, [r4, #4]
 800234a:	bf08      	it	eq
 800234c:	f8c8 1000 	streq.w	r1, [r8]
 8002350:	5162      	str	r2, [r4, r5]
 8002352:	604b      	str	r3, [r1, #4]
 8002354:	4630      	mov	r0, r6
 8002356:	f000 f82f 	bl	80023b8 <__malloc_unlock>
 800235a:	f104 000b 	add.w	r0, r4, #11
 800235e:	1d23      	adds	r3, r4, #4
 8002360:	f020 0007 	bic.w	r0, r0, #7
 8002364:	1ac2      	subs	r2, r0, r3
 8002366:	bf1c      	itt	ne
 8002368:	1a1b      	subne	r3, r3, r0
 800236a:	50a3      	strne	r3, [r4, r2]
 800236c:	e7af      	b.n	80022ce <_malloc_r+0x22>
 800236e:	6862      	ldr	r2, [r4, #4]
 8002370:	42a3      	cmp	r3, r4
 8002372:	bf0c      	ite	eq
 8002374:	f8c8 2000 	streq.w	r2, [r8]
 8002378:	605a      	strne	r2, [r3, #4]
 800237a:	e7eb      	b.n	8002354 <_malloc_r+0xa8>
 800237c:	4623      	mov	r3, r4
 800237e:	6864      	ldr	r4, [r4, #4]
 8002380:	e7ae      	b.n	80022e0 <_malloc_r+0x34>
 8002382:	463c      	mov	r4, r7
 8002384:	687f      	ldr	r7, [r7, #4]
 8002386:	e7b6      	b.n	80022f6 <_malloc_r+0x4a>
 8002388:	461a      	mov	r2, r3
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	42a3      	cmp	r3, r4
 800238e:	d1fb      	bne.n	8002388 <_malloc_r+0xdc>
 8002390:	2300      	movs	r3, #0
 8002392:	6053      	str	r3, [r2, #4]
 8002394:	e7de      	b.n	8002354 <_malloc_r+0xa8>
 8002396:	230c      	movs	r3, #12
 8002398:	6033      	str	r3, [r6, #0]
 800239a:	4630      	mov	r0, r6
 800239c:	f000 f80c 	bl	80023b8 <__malloc_unlock>
 80023a0:	e794      	b.n	80022cc <_malloc_r+0x20>
 80023a2:	6005      	str	r5, [r0, #0]
 80023a4:	e7d6      	b.n	8002354 <_malloc_r+0xa8>
 80023a6:	bf00      	nop
 80023a8:	200001dc 	.word	0x200001dc

080023ac <__malloc_lock>:
 80023ac:	4801      	ldr	r0, [pc, #4]	@ (80023b4 <__malloc_lock+0x8>)
 80023ae:	f7ff bf0e 	b.w	80021ce <__retarget_lock_acquire_recursive>
 80023b2:	bf00      	nop
 80023b4:	200001d4 	.word	0x200001d4

080023b8 <__malloc_unlock>:
 80023b8:	4801      	ldr	r0, [pc, #4]	@ (80023c0 <__malloc_unlock+0x8>)
 80023ba:	f7ff bf09 	b.w	80021d0 <__retarget_lock_release_recursive>
 80023be:	bf00      	nop
 80023c0:	200001d4 	.word	0x200001d4

080023c4 <__sflush_r>:
 80023c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023cc:	0716      	lsls	r6, r2, #28
 80023ce:	4605      	mov	r5, r0
 80023d0:	460c      	mov	r4, r1
 80023d2:	d454      	bmi.n	800247e <__sflush_r+0xba>
 80023d4:	684b      	ldr	r3, [r1, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	dc02      	bgt.n	80023e0 <__sflush_r+0x1c>
 80023da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	dd48      	ble.n	8002472 <__sflush_r+0xae>
 80023e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023e2:	2e00      	cmp	r6, #0
 80023e4:	d045      	beq.n	8002472 <__sflush_r+0xae>
 80023e6:	2300      	movs	r3, #0
 80023e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80023ec:	682f      	ldr	r7, [r5, #0]
 80023ee:	6a21      	ldr	r1, [r4, #32]
 80023f0:	602b      	str	r3, [r5, #0]
 80023f2:	d030      	beq.n	8002456 <__sflush_r+0x92>
 80023f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023f6:	89a3      	ldrh	r3, [r4, #12]
 80023f8:	0759      	lsls	r1, r3, #29
 80023fa:	d505      	bpl.n	8002408 <__sflush_r+0x44>
 80023fc:	6863      	ldr	r3, [r4, #4]
 80023fe:	1ad2      	subs	r2, r2, r3
 8002400:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002402:	b10b      	cbz	r3, 8002408 <__sflush_r+0x44>
 8002404:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	2300      	movs	r3, #0
 800240a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800240c:	6a21      	ldr	r1, [r4, #32]
 800240e:	4628      	mov	r0, r5
 8002410:	47b0      	blx	r6
 8002412:	1c43      	adds	r3, r0, #1
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	d106      	bne.n	8002426 <__sflush_r+0x62>
 8002418:	6829      	ldr	r1, [r5, #0]
 800241a:	291d      	cmp	r1, #29
 800241c:	d82b      	bhi.n	8002476 <__sflush_r+0xb2>
 800241e:	4a2a      	ldr	r2, [pc, #168]	@ (80024c8 <__sflush_r+0x104>)
 8002420:	40ca      	lsrs	r2, r1
 8002422:	07d6      	lsls	r6, r2, #31
 8002424:	d527      	bpl.n	8002476 <__sflush_r+0xb2>
 8002426:	2200      	movs	r2, #0
 8002428:	6062      	str	r2, [r4, #4]
 800242a:	04d9      	lsls	r1, r3, #19
 800242c:	6922      	ldr	r2, [r4, #16]
 800242e:	6022      	str	r2, [r4, #0]
 8002430:	d504      	bpl.n	800243c <__sflush_r+0x78>
 8002432:	1c42      	adds	r2, r0, #1
 8002434:	d101      	bne.n	800243a <__sflush_r+0x76>
 8002436:	682b      	ldr	r3, [r5, #0]
 8002438:	b903      	cbnz	r3, 800243c <__sflush_r+0x78>
 800243a:	6560      	str	r0, [r4, #84]	@ 0x54
 800243c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800243e:	602f      	str	r7, [r5, #0]
 8002440:	b1b9      	cbz	r1, 8002472 <__sflush_r+0xae>
 8002442:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002446:	4299      	cmp	r1, r3
 8002448:	d002      	beq.n	8002450 <__sflush_r+0x8c>
 800244a:	4628      	mov	r0, r5
 800244c:	f7ff fec2 	bl	80021d4 <_free_r>
 8002450:	2300      	movs	r3, #0
 8002452:	6363      	str	r3, [r4, #52]	@ 0x34
 8002454:	e00d      	b.n	8002472 <__sflush_r+0xae>
 8002456:	2301      	movs	r3, #1
 8002458:	4628      	mov	r0, r5
 800245a:	47b0      	blx	r6
 800245c:	4602      	mov	r2, r0
 800245e:	1c50      	adds	r0, r2, #1
 8002460:	d1c9      	bne.n	80023f6 <__sflush_r+0x32>
 8002462:	682b      	ldr	r3, [r5, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0c6      	beq.n	80023f6 <__sflush_r+0x32>
 8002468:	2b1d      	cmp	r3, #29
 800246a:	d001      	beq.n	8002470 <__sflush_r+0xac>
 800246c:	2b16      	cmp	r3, #22
 800246e:	d11e      	bne.n	80024ae <__sflush_r+0xea>
 8002470:	602f      	str	r7, [r5, #0]
 8002472:	2000      	movs	r0, #0
 8002474:	e022      	b.n	80024bc <__sflush_r+0xf8>
 8002476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800247a:	b21b      	sxth	r3, r3
 800247c:	e01b      	b.n	80024b6 <__sflush_r+0xf2>
 800247e:	690f      	ldr	r7, [r1, #16]
 8002480:	2f00      	cmp	r7, #0
 8002482:	d0f6      	beq.n	8002472 <__sflush_r+0xae>
 8002484:	0793      	lsls	r3, r2, #30
 8002486:	680e      	ldr	r6, [r1, #0]
 8002488:	bf08      	it	eq
 800248a:	694b      	ldreq	r3, [r1, #20]
 800248c:	600f      	str	r7, [r1, #0]
 800248e:	bf18      	it	ne
 8002490:	2300      	movne	r3, #0
 8002492:	eba6 0807 	sub.w	r8, r6, r7
 8002496:	608b      	str	r3, [r1, #8]
 8002498:	f1b8 0f00 	cmp.w	r8, #0
 800249c:	dde9      	ble.n	8002472 <__sflush_r+0xae>
 800249e:	6a21      	ldr	r1, [r4, #32]
 80024a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80024a2:	4643      	mov	r3, r8
 80024a4:	463a      	mov	r2, r7
 80024a6:	4628      	mov	r0, r5
 80024a8:	47b0      	blx	r6
 80024aa:	2800      	cmp	r0, #0
 80024ac:	dc08      	bgt.n	80024c0 <__sflush_r+0xfc>
 80024ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024b6:	81a3      	strh	r3, [r4, #12]
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024c0:	4407      	add	r7, r0
 80024c2:	eba8 0800 	sub.w	r8, r8, r0
 80024c6:	e7e7      	b.n	8002498 <__sflush_r+0xd4>
 80024c8:	20400001 	.word	0x20400001

080024cc <_fflush_r>:
 80024cc:	b538      	push	{r3, r4, r5, lr}
 80024ce:	690b      	ldr	r3, [r1, #16]
 80024d0:	4605      	mov	r5, r0
 80024d2:	460c      	mov	r4, r1
 80024d4:	b913      	cbnz	r3, 80024dc <_fflush_r+0x10>
 80024d6:	2500      	movs	r5, #0
 80024d8:	4628      	mov	r0, r5
 80024da:	bd38      	pop	{r3, r4, r5, pc}
 80024dc:	b118      	cbz	r0, 80024e6 <_fflush_r+0x1a>
 80024de:	6a03      	ldr	r3, [r0, #32]
 80024e0:	b90b      	cbnz	r3, 80024e6 <_fflush_r+0x1a>
 80024e2:	f7ff fc8f 	bl	8001e04 <__sinit>
 80024e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f3      	beq.n	80024d6 <_fflush_r+0xa>
 80024ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80024f0:	07d0      	lsls	r0, r2, #31
 80024f2:	d404      	bmi.n	80024fe <_fflush_r+0x32>
 80024f4:	0599      	lsls	r1, r3, #22
 80024f6:	d402      	bmi.n	80024fe <_fflush_r+0x32>
 80024f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024fa:	f7ff fe68 	bl	80021ce <__retarget_lock_acquire_recursive>
 80024fe:	4628      	mov	r0, r5
 8002500:	4621      	mov	r1, r4
 8002502:	f7ff ff5f 	bl	80023c4 <__sflush_r>
 8002506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002508:	07da      	lsls	r2, r3, #31
 800250a:	4605      	mov	r5, r0
 800250c:	d4e4      	bmi.n	80024d8 <_fflush_r+0xc>
 800250e:	89a3      	ldrh	r3, [r4, #12]
 8002510:	059b      	lsls	r3, r3, #22
 8002512:	d4e1      	bmi.n	80024d8 <_fflush_r+0xc>
 8002514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002516:	f7ff fe5b 	bl	80021d0 <__retarget_lock_release_recursive>
 800251a:	e7dd      	b.n	80024d8 <_fflush_r+0xc>

0800251c <__swhatbuf_r>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	460c      	mov	r4, r1
 8002520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002524:	2900      	cmp	r1, #0
 8002526:	b096      	sub	sp, #88	@ 0x58
 8002528:	4615      	mov	r5, r2
 800252a:	461e      	mov	r6, r3
 800252c:	da0d      	bge.n	800254a <__swhatbuf_r+0x2e>
 800252e:	89a3      	ldrh	r3, [r4, #12]
 8002530:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002534:	f04f 0100 	mov.w	r1, #0
 8002538:	bf14      	ite	ne
 800253a:	2340      	movne	r3, #64	@ 0x40
 800253c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002540:	2000      	movs	r0, #0
 8002542:	6031      	str	r1, [r6, #0]
 8002544:	602b      	str	r3, [r5, #0]
 8002546:	b016      	add	sp, #88	@ 0x58
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	466a      	mov	r2, sp
 800254c:	f000 f848 	bl	80025e0 <_fstat_r>
 8002550:	2800      	cmp	r0, #0
 8002552:	dbec      	blt.n	800252e <__swhatbuf_r+0x12>
 8002554:	9901      	ldr	r1, [sp, #4]
 8002556:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800255a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800255e:	4259      	negs	r1, r3
 8002560:	4159      	adcs	r1, r3
 8002562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002566:	e7eb      	b.n	8002540 <__swhatbuf_r+0x24>

08002568 <__smakebuf_r>:
 8002568:	898b      	ldrh	r3, [r1, #12]
 800256a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800256c:	079d      	lsls	r5, r3, #30
 800256e:	4606      	mov	r6, r0
 8002570:	460c      	mov	r4, r1
 8002572:	d507      	bpl.n	8002584 <__smakebuf_r+0x1c>
 8002574:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002578:	6023      	str	r3, [r4, #0]
 800257a:	6123      	str	r3, [r4, #16]
 800257c:	2301      	movs	r3, #1
 800257e:	6163      	str	r3, [r4, #20]
 8002580:	b003      	add	sp, #12
 8002582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002584:	ab01      	add	r3, sp, #4
 8002586:	466a      	mov	r2, sp
 8002588:	f7ff ffc8 	bl	800251c <__swhatbuf_r>
 800258c:	9f00      	ldr	r7, [sp, #0]
 800258e:	4605      	mov	r5, r0
 8002590:	4639      	mov	r1, r7
 8002592:	4630      	mov	r0, r6
 8002594:	f7ff fe8a 	bl	80022ac <_malloc_r>
 8002598:	b948      	cbnz	r0, 80025ae <__smakebuf_r+0x46>
 800259a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800259e:	059a      	lsls	r2, r3, #22
 80025a0:	d4ee      	bmi.n	8002580 <__smakebuf_r+0x18>
 80025a2:	f023 0303 	bic.w	r3, r3, #3
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	81a3      	strh	r3, [r4, #12]
 80025ac:	e7e2      	b.n	8002574 <__smakebuf_r+0xc>
 80025ae:	89a3      	ldrh	r3, [r4, #12]
 80025b0:	6020      	str	r0, [r4, #0]
 80025b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b6:	81a3      	strh	r3, [r4, #12]
 80025b8:	9b01      	ldr	r3, [sp, #4]
 80025ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80025be:	b15b      	cbz	r3, 80025d8 <__smakebuf_r+0x70>
 80025c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025c4:	4630      	mov	r0, r6
 80025c6:	f000 f81d 	bl	8002604 <_isatty_r>
 80025ca:	b128      	cbz	r0, 80025d8 <__smakebuf_r+0x70>
 80025cc:	89a3      	ldrh	r3, [r4, #12]
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	81a3      	strh	r3, [r4, #12]
 80025d8:	89a3      	ldrh	r3, [r4, #12]
 80025da:	431d      	orrs	r5, r3
 80025dc:	81a5      	strh	r5, [r4, #12]
 80025de:	e7cf      	b.n	8002580 <__smakebuf_r+0x18>

080025e0 <_fstat_r>:
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4d07      	ldr	r5, [pc, #28]	@ (8002600 <_fstat_r+0x20>)
 80025e4:	2300      	movs	r3, #0
 80025e6:	4604      	mov	r4, r0
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	602b      	str	r3, [r5, #0]
 80025ee:	f7ff f8b5 	bl	800175c <_fstat>
 80025f2:	1c43      	adds	r3, r0, #1
 80025f4:	d102      	bne.n	80025fc <_fstat_r+0x1c>
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	b103      	cbz	r3, 80025fc <_fstat_r+0x1c>
 80025fa:	6023      	str	r3, [r4, #0]
 80025fc:	bd38      	pop	{r3, r4, r5, pc}
 80025fe:	bf00      	nop
 8002600:	200001d0 	.word	0x200001d0

08002604 <_isatty_r>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4d06      	ldr	r5, [pc, #24]	@ (8002620 <_isatty_r+0x1c>)
 8002608:	2300      	movs	r3, #0
 800260a:	4604      	mov	r4, r0
 800260c:	4608      	mov	r0, r1
 800260e:	602b      	str	r3, [r5, #0]
 8002610:	f7ff f8b4 	bl	800177c <_isatty>
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	d102      	bne.n	800261e <_isatty_r+0x1a>
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	b103      	cbz	r3, 800261e <_isatty_r+0x1a>
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	bd38      	pop	{r3, r4, r5, pc}
 8002620:	200001d0 	.word	0x200001d0

08002624 <_sbrk_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4d06      	ldr	r5, [pc, #24]	@ (8002640 <_sbrk_r+0x1c>)
 8002628:	2300      	movs	r3, #0
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	602b      	str	r3, [r5, #0]
 8002630:	f7ff f8bc 	bl	80017ac <_sbrk>
 8002634:	1c43      	adds	r3, r0, #1
 8002636:	d102      	bne.n	800263e <_sbrk_r+0x1a>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	b103      	cbz	r3, 800263e <_sbrk_r+0x1a>
 800263c:	6023      	str	r3, [r4, #0]
 800263e:	bd38      	pop	{r3, r4, r5, pc}
 8002640:	200001d0 	.word	0x200001d0

08002644 <round>:
 8002644:	ec51 0b10 	vmov	r0, r1, d0
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800264e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8002652:	2a13      	cmp	r2, #19
 8002654:	460b      	mov	r3, r1
 8002656:	4605      	mov	r5, r0
 8002658:	dc1b      	bgt.n	8002692 <round+0x4e>
 800265a:	2a00      	cmp	r2, #0
 800265c:	da0b      	bge.n	8002676 <round+0x32>
 800265e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8002662:	3201      	adds	r2, #1
 8002664:	bf04      	itt	eq
 8002666:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800266a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	e015      	b.n	80026a2 <round+0x5e>
 8002676:	4c15      	ldr	r4, [pc, #84]	@ (80026cc <round+0x88>)
 8002678:	4114      	asrs	r4, r2
 800267a:	ea04 0601 	and.w	r6, r4, r1
 800267e:	4306      	orrs	r6, r0
 8002680:	d00f      	beq.n	80026a2 <round+0x5e>
 8002682:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8002686:	fa41 f202 	asr.w	r2, r1, r2
 800268a:	4413      	add	r3, r2
 800268c:	ea23 0304 	bic.w	r3, r3, r4
 8002690:	e7ed      	b.n	800266e <round+0x2a>
 8002692:	2a33      	cmp	r2, #51	@ 0x33
 8002694:	dd08      	ble.n	80026a8 <round+0x64>
 8002696:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800269a:	d102      	bne.n	80026a2 <round+0x5e>
 800269c:	4602      	mov	r2, r0
 800269e:	f7fd fdc1 	bl	8000224 <__adddf3>
 80026a2:	ec41 0b10 	vmov	d0, r0, r1
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80026ac:	f04f 34ff 	mov.w	r4, #4294967295
 80026b0:	40f4      	lsrs	r4, r6
 80026b2:	4204      	tst	r4, r0
 80026b4:	d0f5      	beq.n	80026a2 <round+0x5e>
 80026b6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80026ba:	2201      	movs	r2, #1
 80026bc:	408a      	lsls	r2, r1
 80026be:	1952      	adds	r2, r2, r5
 80026c0:	bf28      	it	cs
 80026c2:	3301      	addcs	r3, #1
 80026c4:	ea22 0204 	bic.w	r2, r2, r4
 80026c8:	e7d2      	b.n	8002670 <round+0x2c>
 80026ca:	bf00      	nop
 80026cc:	000fffff 	.word	0x000fffff

080026d0 <_init>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	bf00      	nop
 80026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d6:	bc08      	pop	{r3}
 80026d8:	469e      	mov	lr, r3
 80026da:	4770      	bx	lr

080026dc <_fini>:
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	bf00      	nop
 80026e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e2:	bc08      	pop	{r3}
 80026e4:	469e      	mov	lr, r3
 80026e6:	4770      	bx	lr
