
Master_ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002410  08002410  00003410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800248c  0800248c  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800248c  0800248c  0000348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002494  08002494  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002494  08002494  00003494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002498  08002498  00003498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800249c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000068  08002504  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002504  000041e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005271  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e9  00000000  00000000  00009309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  0000a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a9  00000000  00000000  0000ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d97a  00000000  00000000  0000afd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007db8  00000000  00000000  0002894b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1b54  00000000  00000000  00030703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001854  00000000  00000000  000e229c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e3af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080023f8 	.word	0x080023f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080023f8 	.word	0x080023f8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db12      	blt.n	80002f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	490a      	ldr	r1, [pc, #40]	@ (8000304 <__NVIC_DisableIRQ+0x44>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	3320      	adds	r3, #32
 80002e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ec:	f3bf 8f4f 	dsb	sy
}
 80002f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002f2:	f3bf 8f6f 	isb	sy
}
 80002f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000e100 	.word	0xe000e100

08000308 <COMP1_Init>:

volatile uint16_t case_interrupt_counter = 0;

// COMP1_INP -> PA1+
// COMP1_INM -> PA4-
void COMP1_Init(void){
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	// Enable GPIOA Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800030c:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <COMP1_Init+0xb0>)
 800030e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000310:	4a29      	ldr	r2, [pc, #164]	@ (80003b8 <COMP1_Init+0xb0>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000318:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <COMP1_Init+0xb0>)
 800031a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800031c:	4a26      	ldr	r2, [pc, #152]	@ (80003b8 <COMP1_Init+0xb0>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PA1+ to Analog Mode
	GPIOA->MODER &= ~(0b11 << 2);
 8000324:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800032e:	f023 030c 	bic.w	r3, r3, #12
 8000332:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << 2);
 8000334:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033e:	f043 030c 	orr.w	r3, r3, #12
 8000342:	6013      	str	r3, [r2, #0]
	// Set PA4- to Analog Mode
	GPIOA->MODER &= ~(0b11 << 8);
 8000344:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800034e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000352:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << 8);
 8000354:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800035e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000362:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOA->PUPDR &= ~(0b11 << 2);
 8000364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800036e:	f023 030c 	bic.w	r3, r3, #12
 8000372:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(0b11 << 8);
 8000374:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800037e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000382:	60d3      	str	r3, [r2, #12]

	// Init COMP1
	// Clear CSR
	COMP1->CSR = 0;
 8000384:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <COMP1_Init+0xb4>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
	// Set COMP1_INP input to PA1
	COMP1->CSR &= ~(1 << 8);
 800038a:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <COMP1_Init+0xb4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a0b      	ldr	r2, [pc, #44]	@ (80003bc <COMP1_Init+0xb4>)
 8000390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000394:	6013      	str	r3, [r2, #0]
	// Set COMP1_INM input to PA4
	COMP1->CSR |= (0b110 << 4);
 8000396:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <COMP1_Init+0xb4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a08      	ldr	r2, [pc, #32]	@ (80003bc <COMP1_Init+0xb4>)
 800039c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80003a0:	6013      	str	r3, [r2, #0]
	// Enable COMP1
	COMP1->CSR |= COMP_CSR_EN;
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <COMP1_Init+0xb4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <COMP1_Init+0xb4>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010200 	.word	0x40010200

080003c0 <COMP3_Init_v2>:

// COMP3_INP -> PC1+
// COMP3_INM -> PC0-
void COMP3_Init_v2(void){
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	// Enable GPIOC Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80003c4:	4b24      	ldr	r3, [pc, #144]	@ (8000458 <COMP3_Init_v2+0x98>)
 80003c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c8:	4a23      	ldr	r2, [pc, #140]	@ (8000458 <COMP3_Init_v2+0x98>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003d0:	4b21      	ldr	r3, [pc, #132]	@ (8000458 <COMP3_Init_v2+0x98>)
 80003d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003d4:	4a20      	ldr	r2, [pc, #128]	@ (8000458 <COMP3_Init_v2+0x98>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PC1+ to Analog Mode
	GPIOC->MODER &= ~(0b11 << 2); // <-THIS
 80003dc:	4b1f      	ldr	r3, [pc, #124]	@ (800045c <COMP3_Init_v2+0x9c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a1e      	ldr	r2, [pc, #120]	@ (800045c <COMP3_Init_v2+0x9c>)
 80003e2:	f023 030c 	bic.w	r3, r3, #12
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b11 << 2);
 80003e8:	4b1c      	ldr	r3, [pc, #112]	@ (800045c <COMP3_Init_v2+0x9c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a1b      	ldr	r2, [pc, #108]	@ (800045c <COMP3_Init_v2+0x9c>)
 80003ee:	f043 030c 	orr.w	r3, r3, #12
 80003f2:	6013      	str	r3, [r2, #0]
	// Set PC0- to Analog Mode
	GPIOC->MODER &= ~(0b11 << 0);
 80003f4:	4b19      	ldr	r3, [pc, #100]	@ (800045c <COMP3_Init_v2+0x9c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a18      	ldr	r2, [pc, #96]	@ (800045c <COMP3_Init_v2+0x9c>)
 80003fa:	f023 0303 	bic.w	r3, r3, #3
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b11 << 0);
 8000400:	4b16      	ldr	r3, [pc, #88]	@ (800045c <COMP3_Init_v2+0x9c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a15      	ldr	r2, [pc, #84]	@ (800045c <COMP3_Init_v2+0x9c>)
 8000406:	f043 0303 	orr.w	r3, r3, #3
 800040a:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOC->PUPDR &= ~(0b11 << 0);
 800040c:	4b13      	ldr	r3, [pc, #76]	@ (800045c <COMP3_Init_v2+0x9c>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	4a12      	ldr	r2, [pc, #72]	@ (800045c <COMP3_Init_v2+0x9c>)
 8000412:	f023 0303 	bic.w	r3, r3, #3
 8000416:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR &= ~(0b11 << 2);
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <COMP3_Init_v2+0x9c>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4a0f      	ldr	r2, [pc, #60]	@ (800045c <COMP3_Init_v2+0x9c>)
 800041e:	f023 030c 	bic.w	r3, r3, #12
 8000422:	60d3      	str	r3, [r2, #12]

	// Init COMP3
	// Clear CSR
	COMP3->CSR = 0;
 8000424:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <COMP3_Init_v2+0xa0>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
	// Set COMP3_INP input to PC1+
	COMP3->CSR |= (1 << 8);
 800042a:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <COMP3_Init_v2+0xa0>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a0c      	ldr	r2, [pc, #48]	@ (8000460 <COMP3_Init_v2+0xa0>)
 8000430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000434:	6013      	str	r3, [r2, #0]
	// Set COMP3_INM input to PC0-
	COMP3->CSR |= (0b111 << 4);
 8000436:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <COMP3_Init_v2+0xa0>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a09      	ldr	r2, [pc, #36]	@ (8000460 <COMP3_Init_v2+0xa0>)
 800043c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000440:	6013      	str	r3, [r2, #0]
	// Enable COMP3
	COMP3->CSR |= COMP_CSR_EN;
 8000442:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <COMP3_Init_v2+0xa0>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a06      	ldr	r2, [pc, #24]	@ (8000460 <COMP3_Init_v2+0xa0>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6013      	str	r3, [r2, #0]
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	48000800 	.word	0x48000800
 8000460:	40010208 	.word	0x40010208

08000464 <COMP4_Init_v2>:

// COMP4_INP -> PB0+
// COMP4_INM -> PB2-
void COMP4_Init_v2(void){
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	// Enable GPIOB Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000468:	4b24      	ldr	r3, [pc, #144]	@ (80004fc <COMP4_Init_v2+0x98>)
 800046a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046c:	4a23      	ldr	r2, [pc, #140]	@ (80004fc <COMP4_Init_v2+0x98>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <COMP4_Init_v2+0x98>)
 8000476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000478:	4a20      	ldr	r2, [pc, #128]	@ (80004fc <COMP4_Init_v2+0x98>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PB0+ to Analog Mode
	GPIOB->MODER &= ~(0b11 << 0);
 8000480:	4b1f      	ldr	r3, [pc, #124]	@ (8000500 <COMP4_Init_v2+0x9c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1e      	ldr	r2, [pc, #120]	@ (8000500 <COMP4_Init_v2+0x9c>)
 8000486:	f023 0303 	bic.w	r3, r3, #3
 800048a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b11 << 0);
 800048c:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <COMP4_Init_v2+0x9c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1b      	ldr	r2, [pc, #108]	@ (8000500 <COMP4_Init_v2+0x9c>)
 8000492:	f043 0303 	orr.w	r3, r3, #3
 8000496:	6013      	str	r3, [r2, #0]
	// Set PB2- to Analog Mode
	GPIOB->MODER &= ~(0b11 << 4);
 8000498:	4b19      	ldr	r3, [pc, #100]	@ (8000500 <COMP4_Init_v2+0x9c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a18      	ldr	r2, [pc, #96]	@ (8000500 <COMP4_Init_v2+0x9c>)
 800049e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80004a2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b11 << 4);
 80004a4:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <COMP4_Init_v2+0x9c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a15      	ldr	r2, [pc, #84]	@ (8000500 <COMP4_Init_v2+0x9c>)
 80004aa:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80004ae:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOB->PUPDR &= ~(0b11 << 0);
 80004b0:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <COMP4_Init_v2+0x9c>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <COMP4_Init_v2+0x9c>)
 80004b6:	f023 0303 	bic.w	r3, r3, #3
 80004ba:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(0b11 << 4);
 80004bc:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <COMP4_Init_v2+0x9c>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000500 <COMP4_Init_v2+0x9c>)
 80004c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80004c6:	60d3      	str	r3, [r2, #12]

	// Init COMP4
	// Clear CSR
	COMP4->CSR = 0;
 80004c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <COMP4_Init_v2+0xa0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
	// Set COMP4_INP input to PB0+
	COMP4->CSR &= ~COMP_CSR_INPSEL;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <COMP4_Init_v2+0xa0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000504 <COMP4_Init_v2+0xa0>)
 80004d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004d8:	6013      	str	r3, [r2, #0]
	// Set COMP4_INM input to PB2-
	COMP4->CSR |= (0b111 << 4);
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <COMP4_Init_v2+0xa0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a09      	ldr	r2, [pc, #36]	@ (8000504 <COMP4_Init_v2+0xa0>)
 80004e0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80004e4:	6013      	str	r3, [r2, #0]
	// Enable COMP4
	COMP4->CSR |= COMP_CSR_EN;
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <COMP4_Init_v2+0xa0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a06      	ldr	r2, [pc, #24]	@ (8000504 <COMP4_Init_v2+0xa0>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400
 8000504:	4001020c 	.word	0x4001020c

08000508 <Disable_All_COMP_Interrupts>:

	NVIC_EnableIRQ(COMP4_IRQn);
	NVIC_SetPriority(COMP4_IRQn, 1);
}

void Disable_All_COMP_Interrupts(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(COMP1_2_3_IRQn);
 800050c:	2040      	movs	r0, #64	@ 0x40
 800050e:	f7ff fed7 	bl	80002c0 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(COMP4_IRQn);
 8000512:	2041      	movs	r0, #65	@ 0x41
 8000514:	f7ff fed4 	bl	80002c0 <__NVIC_DisableIRQ>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <COMP1_2_3_IRQHandler>:

// This is what's called when COMP1,2,3 (Phase 1 & 2) interrupts are triggered
void COMP1_2_3_IRQHandler(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	// Phase 2: COMP3
	if (EXTI->PR1 & EXTI_PR1_PIF29){
 8000520:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <COMP1_2_3_IRQHandler+0x88>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d019      	beq.n	8000560 <COMP1_2_3_IRQHandler+0x44>
		EXTI->PR1 |= EXTI_PR1_PIF29;
 800052c:	4b1d      	ldr	r3, [pc, #116]	@ (80005a4 <COMP1_2_3_IRQHandler+0x88>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4a1c      	ldr	r2, [pc, #112]	@ (80005a4 <COMP1_2_3_IRQHandler+0x88>)
 8000532:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000536:	6153      	str	r3, [r2, #20]

		switch(COMP_Phase_State){
 8000538:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <COMP1_2_3_IRQHandler+0x8c>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	b29b      	uxth	r3, r3
 800053e:	2b02      	cmp	r3, #2
 8000540:	d002      	beq.n	8000548 <COMP1_2_3_IRQHandler+0x2c>
 8000542:	2b05      	cmp	r3, #5
 8000544:	d006      	beq.n	8000554 <COMP1_2_3_IRQHandler+0x38>
 8000546:	e00b      	b.n	8000560 <COMP1_2_3_IRQHandler+0x44>
			case 2:
				// Disable interrupts. Prevent double fire
				Disable_All_COMP_Interrupts();
 8000548:	f7ff ffde 	bl	8000508 <Disable_All_COMP_Interrupts>

				COMP_Phase_State = 3;
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <COMP1_2_3_IRQHandler+0x8c>)
 800054e:	2203      	movs	r2, #3
 8000550:	801a      	strh	r2, [r3, #0]
				break;
 8000552:	e005      	b.n	8000560 <COMP1_2_3_IRQHandler+0x44>

			case 5:
				// Disable interrupts. Prevent double fire
				Disable_All_COMP_Interrupts();
 8000554:	f7ff ffd8 	bl	8000508 <Disable_All_COMP_Interrupts>

				// Go to next state
				COMP_Phase_State = 6;
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <COMP1_2_3_IRQHandler+0x8c>)
 800055a:	2206      	movs	r2, #6
 800055c:	801a      	strh	r2, [r3, #0]
				break;
 800055e:	bf00      	nop
		}
	}
	// Phase 1: COMP1
	if (EXTI->PR1 & EXTI_PR1_PIF21){
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <COMP1_2_3_IRQHandler+0x88>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000568:	2b00      	cmp	r3, #0
 800056a:	d019      	beq.n	80005a0 <COMP1_2_3_IRQHandler+0x84>
		EXTI->PR1 |= EXTI_PR1_PIF21;
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <COMP1_2_3_IRQHandler+0x88>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a0c      	ldr	r2, [pc, #48]	@ (80005a4 <COMP1_2_3_IRQHandler+0x88>)
 8000572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000576:	6153      	str	r3, [r2, #20]

		switch(COMP_Phase_State){
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <COMP1_2_3_IRQHandler+0x8c>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	b29b      	uxth	r3, r3
 800057e:	2b03      	cmp	r3, #3
 8000580:	d002      	beq.n	8000588 <COMP1_2_3_IRQHandler+0x6c>
 8000582:	2b06      	cmp	r3, #6
 8000584:	d006      	beq.n	8000594 <COMP1_2_3_IRQHandler+0x78>
				// Go to next state
				COMP_Phase_State = 1;
				break;
		}
	}
}
 8000586:	e00b      	b.n	80005a0 <COMP1_2_3_IRQHandler+0x84>
				Disable_All_COMP_Interrupts();
 8000588:	f7ff ffbe 	bl	8000508 <Disable_All_COMP_Interrupts>
				COMP_Phase_State = 4;
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <COMP1_2_3_IRQHandler+0x8c>)
 800058e:	2204      	movs	r2, #4
 8000590:	801a      	strh	r2, [r3, #0]
				break;
 8000592:	e005      	b.n	80005a0 <COMP1_2_3_IRQHandler+0x84>
				Disable_All_COMP_Interrupts();
 8000594:	f7ff ffb8 	bl	8000508 <Disable_All_COMP_Interrupts>
				COMP_Phase_State = 1;
 8000598:	4b03      	ldr	r3, [pc, #12]	@ (80005a8 <COMP1_2_3_IRQHandler+0x8c>)
 800059a:	2201      	movs	r2, #1
 800059c:	801a      	strh	r2, [r3, #0]
				break;
 800059e:	bf00      	nop
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40010400 	.word	0x40010400
 80005a8:	20000000 	.word	0x20000000

080005ac <COMP4_IRQHandler>:

// This is what's called when COMP4 (Phase 3) interrupt is triggered
void COMP4_IRQHandler(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	// Phase 3
	if (EXTI->PR1 & EXTI_PR1_PIF30) {
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <COMP4_IRQHandler+0x44>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d017      	beq.n	80005ec <COMP4_IRQHandler+0x40>
		// Clear pending flag (write 1 to clear)
		EXTI->PR1 |= EXTI_PR1_PIF30;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <COMP4_IRQHandler+0x44>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	@ (80005f0 <COMP4_IRQHandler+0x44>)
 80005c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80005c6:	6153      	str	r3, [r2, #20]

		// Disable interrupts. Prevent double fire
		Disable_All_COMP_Interrupts();
 80005c8:	f7ff ff9e 	bl	8000508 <Disable_All_COMP_Interrupts>

		switch(COMP_Phase_State){
 80005cc:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <COMP4_IRQHandler+0x48>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d002      	beq.n	80005dc <COMP4_IRQHandler+0x30>
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d004      	beq.n	80005e4 <COMP4_IRQHandler+0x38>
			case 4:
				COMP_Phase_State = 5;
				break;
		}
	}
}
 80005da:	e007      	b.n	80005ec <COMP4_IRQHandler+0x40>
				COMP_Phase_State = 2;
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <COMP4_IRQHandler+0x48>)
 80005de:	2202      	movs	r2, #2
 80005e0:	801a      	strh	r2, [r3, #0]
				break;
 80005e2:	e003      	b.n	80005ec <COMP4_IRQHandler+0x40>
				COMP_Phase_State = 5;
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <COMP4_IRQHandler+0x48>)
 80005e6:	2205      	movs	r2, #5
 80005e8:	801a      	strh	r2, [r3, #0]
				break;
 80005ea:	bf00      	nop
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40010400 	.word	0x40010400
 80005f4:	20000000 	.word	0x20000000

080005f8 <SPI2_Master_Init>:
*	PB12 -> GPIOx (General output)    ->        SPI2_NSS (Chip select)
*   PB13 -> SPI2_SCLK (Clock)         ->        SPI2_SCLK (Clock)
*	PB15 -> SPI2_MOSI (Tx)            ->        PB14 -> SPI2_MISO (Rx)
*	PB14 -> SPI2_MISO (Rx)            <-        PB15 -> SPI2_MOSI (Tx)
*/
void SPI2_Master_Init(void){
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	// Init Clk access to GPIOB and SPI2
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80005fc:	4b3c      	ldr	r3, [pc, #240]	@ (80006f0 <SPI2_Master_Init+0xf8>)
 80005fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000600:	4a3b      	ldr	r2, [pc, #236]	@ (80006f0 <SPI2_Master_Init+0xf8>)
 8000602:	f043 0302 	orr.w	r3, r3, #2
 8000606:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_SPI2EN;
 8000608:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <SPI2_Master_Init+0xf8>)
 800060a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800060c:	4a38      	ldr	r2, [pc, #224]	@ (80006f0 <SPI2_Master_Init+0xf8>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6593      	str	r3, [r2, #88]	@ 0x58

	// Config pins to Alt Funct Mode
	GPIOB->MODER &= ~((0b11 << 24) | (0b11 << 26) | (0b11 << 28) | (0b11 << 30));
 8000614:	4b37      	ldr	r3, [pc, #220]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a36      	ldr	r2, [pc, #216]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800061a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800061e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 24);  // PB12 == Gen Purpose Output
 8000620:	4b34      	ldr	r3, [pc, #208]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a33      	ldr	r2, [pc, #204]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800062a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 26);  // PB13
 800062c:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a30      	ldr	r2, [pc, #192]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000636:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 28);  // PB14
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a2d      	ldr	r2, [pc, #180]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800063e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000642:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 30);  // PB15
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800064a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800064e:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] &= ~(0b1111 << 20 | 0b1111 << 24 | 0b1111 << 28);
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000654:	4a27      	ldr	r2, [pc, #156]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000656:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800065a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 20); // PB13
 800065c:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800065e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000660:	4a24      	ldr	r2, [pc, #144]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000662:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000666:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 24); // PB14
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800066a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800066e:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8000672:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 28); // PB15
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 8000676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000678:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 800067a:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 800067e:	6253      	str	r3, [r2, #36]	@ 0x24

	// Config SPI2_CR1 register
	SPI2->CR1 |= SPI_CR1_MSTR;     // Set to master
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <SPI2_Master_Init+0x100>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <SPI2_Master_Init+0x100>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= (0b011 << 3);     // Baud rate == F_PCLK/16
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <SPI2_Master_Init+0x100>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a19      	ldr	r2, [pc, #100]	@ (80006f8 <SPI2_Master_Init+0x100>)
 8000692:	f043 0318 	orr.w	r3, r3, #24
 8000696:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSM;      // Software slave management enabled
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <SPI2_Master_Init+0x100>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a16      	ldr	r2, [pc, #88]	@ (80006f8 <SPI2_Master_Init+0x100>)
 800069e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006a2:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSI;      // Internal slave select
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a13      	ldr	r2, [pc, #76]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ae:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~(SPI_CR1_CPOL | SPI_CR1_CPHA); // Mode 0
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a10      	ldr	r2, [pc, #64]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006b6:	f023 0303 	bic.w	r3, r3, #3
 80006ba:	6013      	str	r3, [r2, #0]

	// Config SPI2_CR2 register
	SPI2->CR2 = 0;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
	SPI2->CR2 |= (0b0111 << 8);
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	4a0c      	ldr	r2, [pc, #48]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006c8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80006cc:	6053      	str	r3, [r2, #4]

	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <SPI2_Master_Init+0x100>)
 80006d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d8:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= SPI2_PB12_MASTER_CS; // Set NSS high (slave) inactive
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <SPI2_Master_Init+0xfc>)
 80006e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006e4:	6153      	str	r3, [r2, #20]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000400 	.word	0x48000400
 80006f8:	40003800 	.word	0x40003800

080006fc <SPI2_TX_RX>:

// Sends and receives data
uint8_t SPI2_TX_RX(uint8_t data){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	uint32_t Timeout_Tx = 100000;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <SPI2_TX_RX+0x70>)
 8000708:	60fb      	str	r3, [r7, #12]
	uint32_t Timeout_Rx = 100000;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <SPI2_TX_RX+0x70>)
 800070c:	60bb      	str	r3, [r7, #8]

	// Wait for TX buffer empty
    while(!(SPI2->SR & SPI_SR_TXE)){
 800070e:	e00a      	b.n	8000726 <SPI2_TX_RX+0x2a>
        if (--Timeout_Tx == 0) {
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3b01      	subs	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d104      	bne.n	8000726 <SPI2_TX_RX+0x2a>
            printf("Master TXE Timeout \r\n");
 800071c:	4814      	ldr	r0, [pc, #80]	@ (8000770 <SPI2_TX_RX+0x74>)
 800071e:	f001 f809 	bl	8001734 <puts>
            return 0;
 8000722:	2300      	movs	r3, #0
 8000724:	e01d      	b.n	8000762 <SPI2_TX_RX+0x66>
    while(!(SPI2->SR & SPI_SR_TXE)){
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <SPI2_TX_RX+0x78>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0ee      	beq.n	8000710 <SPI2_TX_RX+0x14>
        }
    }
    // Write data
    *((__IO uint8_t*)&SPI2->DR) = data;
 8000732:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <SPI2_TX_RX+0x7c>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	7013      	strb	r3, [r2, #0]

    // Wait for RX buffer not empty
    while(!(SPI2->SR & SPI_SR_RXNE)){
 8000738:	e00a      	b.n	8000750 <SPI2_TX_RX+0x54>
        if (--Timeout_Rx == 0) {
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3b01      	subs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d104      	bne.n	8000750 <SPI2_TX_RX+0x54>
            printf("Master RXNE Timeout\r\n");
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <SPI2_TX_RX+0x80>)
 8000748:	f000 fff4 	bl	8001734 <puts>
            return 0;
 800074c:	2300      	movs	r3, #0
 800074e:	e008      	b.n	8000762 <SPI2_TX_RX+0x66>
    while(!(SPI2->SR & SPI_SR_RXNE)){
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <SPI2_TX_RX+0x78>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0ee      	beq.n	800073a <SPI2_TX_RX+0x3e>
        }
    }
    // Read received
    return *((__IO uint8_t*)&SPI2->DR);
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <SPI2_TX_RX+0x7c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	000186a0 	.word	0x000186a0
 8000770:	08002410 	.word	0x08002410
 8000774:	40003800 	.word	0x40003800
 8000778:	4000380c 	.word	0x4000380c
 800077c:	08002428 	.word	0x08002428

08000780 <USART1_ReadChar>:
    USART1->BRR = SystemCoreClock / BAUD_RATE;  // Set Baud rate (9600), assuming 16MHz Clk
    USART1->CR1 = USART_CR1_RE | USART_CR1_UE;  // Enable transmitter and USART
}

// Function for receiving data (characters)
char USART1_ReadChar(void) {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    while (!(USART1->ISR & USART_ISR_RXNE));  // Wait for data
 8000784:	bf00      	nop
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <USART1_ReadChar+0x24>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <USART1_ReadChar+0x6>

    return (char)(USART1->RDR & 0xFF);        // Read char
 8000792:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <USART1_ReadChar+0x24>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000796:	b2db      	uxtb	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40013800 	.word	0x40013800

080007a8 <__io_getchar>:

// Overrides scanf()
int __io_getchar(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    return USART1_ReadChar();
 80007ac:	f7ff ffe8 	bl	8000780 <USART1_ReadChar>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <USART2_PA2_Init>:
#define BAUD_RATE  9600
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)


// Configure PA2 for USART2
void USART2_PA2_Init(void){
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
    // Enable GPIOA Clk and USART2 Clk
    RCC->AHB2ENR |= (1 << 0);
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <USART2_PA2_Init+0x7c>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <USART2_PA2_Init+0x7c>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= (1 << 17);
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <USART2_PA2_Init+0x7c>)
 80007ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007cc:	4a19      	ldr	r2, [pc, #100]	@ (8000834 <USART2_PA2_Init+0x7c>)
 80007ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d2:	6593      	str	r3, [r2, #88]	@ 0x58
    //RCC->APB1SMENR1 |= (1 << 17);

    // Configure PA2 as AF7 (USART2_TX)
    GPIOA->MODER &= ~(0b11 << 4);
 80007d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80007de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0b10 << 4);    // Set PA2 to Alt Funct Mode
 80007e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80007ee:	f043 0320 	orr.w	r3, r3, #32
 80007f2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0b1111 << 8);
 80007f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80007fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000802:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0b0111 << 8);  // Sets AFM to AF7
 8000804:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000808:	6a1b      	ldr	r3, [r3, #32]
 800080a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800080e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000812:	6213      	str	r3, [r2, #32]

    // Configure USART2
    USART2->BRR = SystemCoreClock / BAUD_RATE;  // Set Baud rate (9600), assuming 16MHz Clk
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <USART2_PA2_Init+0x80>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a08      	ldr	r2, [pc, #32]	@ (800083c <USART2_PA2_Init+0x84>)
 800081a:	4909      	ldr	r1, [pc, #36]	@ (8000840 <USART2_PA2_Init+0x88>)
 800081c:	fba1 1303 	umull	r1, r3, r1, r3
 8000820:	0a9b      	lsrs	r3, r3, #10
 8000822:	60d3      	str	r3, [r2, #12]
    //USART2->BRR = 16000000 / BAUD_RATE;
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;  // Enable transmitter and USART
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <USART2_PA2_Init+0x84>)
 8000826:	2209      	movs	r2, #9
 8000828:	601a      	str	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	20000004 	.word	0x20000004
 800083c:	40004400 	.word	0x40004400
 8000840:	1b4e81b5 	.word	0x1b4e81b5

08000844 <USART2_Write>:

// Function for sending data (characters)
void USART2_Write(char ch) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));  // Wait until transmit data register empty
 800084e:	bf00      	nop
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <USART2_Write+0x2c>)
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f9      	beq.n	8000850 <USART2_Write+0xc>
    USART2->TDR = (ch & 0xFF);              // Send the character
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <USART2_Write+0x2c>)
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40004400 	.word	0x40004400

08000874 <__io_putchar>:

// Overrides printf function
int __io_putchar(int ch) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    USART2_Write(ch);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffdf 	bl	8000844 <USART2_Write>
    return ch;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <PWM_PB7_TIM4_CH2_Init>:
#include "../Communication/USART_printf.h"

volatile uint16_t temp = 0;

// PWM for PB7 (TIM4_CH2 -> AF2)
void PWM_PB7_TIM4_CH2_Init(void){
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000894:	4b39      	ldr	r3, [pc, #228]	@ (800097c <PWM_PB7_TIM4_CH2_Init+0xec>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000898:	4a38      	ldr	r2, [pc, #224]	@ (800097c <PWM_PB7_TIM4_CH2_Init+0xec>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB7 output to Alt Funct Mode
	GPIOB->MODER &= ~(0b11 << 14);
 80008a0:	4b37      	ldr	r3, [pc, #220]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a36      	ldr	r2, [pc, #216]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008aa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 14);      // MODE7 = Alt Funct Mode
 80008ac:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a33      	ldr	r2, [pc, #204]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008b6:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 28);
 80008b8:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4a30      	ldr	r2, [pc, #192]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80008c2:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 28);   // AFSEL7 set to AF2
 80008c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	4a2d      	ldr	r2, [pc, #180]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80008ce:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 14);    // High speed pin
 80008d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008da:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT7; // No Push-pull
 80008dc:	4b28      	ldr	r3, [pc, #160]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a27      	ldr	r2, [pc, #156]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008e6:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 14);    // No pull-up/pull-down
 80008e8:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4a24      	ldr	r2, [pc, #144]	@ (8000980 <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80008ee:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f2:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM4
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 80008f4:	4b21      	ldr	r3, [pc, #132]	@ (800097c <PWM_PB7_TIM4_CH2_Init+0xec>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f8:	4a20      	ldr	r2, [pc, #128]	@ (800097c <PWM_PB7_TIM4_CH2_Init+0xec>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM4->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 8000900:	4b20      	ldr	r3, [pc, #128]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 160 - 1;             // Period     (cycle length)
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000908:	229f      	movs	r2, #159	@ 0x9f
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR2 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 800090c:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 800090e:	2200      	movs	r2, #0
 8000910:	639a      	str	r2, [r3, #56]	@ 0x38

	// Other timer settings
	TIM4->CCMR1 &= ~(0b111 << 12);
 8000912:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800091c:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=  (0b110 << 12);   // CH2 set to PWM mode 1
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000924:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000928:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC2PE;  // Enable pre-load register
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a15      	ldr	r2, [pc, #84]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000930:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000934:	6193      	str	r3, [r2, #24]

	TIM4->CCER &= ~TIM_CCER_CC2P;    // set output polarity to active HIGH in CH2
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 800093c:	f023 0320 	bic.w	r3, r3, #32
 8000940:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= TIM_CCER_CC2E;     // Capture/Compare enabled for CH2
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	4a0f      	ldr	r2, [pc, #60]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6213      	str	r3, [r2, #32]

	TIM4->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a0c      	ldr	r2, [pc, #48]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a09      	ldr	r2, [pc, #36]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000964:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM4
 8000966:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6013      	str	r3, [r2, #0]
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400
 8000984:	40000800 	.word	0x40000800

08000988 <PWM_PB6_TIM4_CH1_Init>:

// PWM for PB6 (TIM4_CH1 -> AF2)
void PWM_PB6_TIM4_CH1_Init(void){
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800098c:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <PWM_PB6_TIM4_CH1_Init+0xec>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000990:	4a38      	ldr	r2, [pc, #224]	@ (8000a74 <PWM_PB6_TIM4_CH1_Init+0xec>)
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB6 output to Alt Funct Mode
	GPIOB->MODER  &= ~(0b11 << 12);
 8000998:	4b37      	ldr	r3, [pc, #220]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a36      	ldr	r2, [pc, #216]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800099e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009a2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |= (0b10 << 12);    // MODE6 = Alt Funct Mode
 80009a4:	4b34      	ldr	r3, [pc, #208]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a33      	ldr	r2, [pc, #204]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009ae:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 24);
 80009b0:	4b31      	ldr	r3, [pc, #196]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009b2:	6a1b      	ldr	r3, [r3, #32]
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009b6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80009ba:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 24);  // AFSEL6 set to AF2
 80009bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c6:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 12);    // High speed pin
 80009c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009d2:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT6; // No Push-pull
 80009d4:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	4a27      	ldr	r2, [pc, #156]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009de:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 12);    // No pull-up/pull-down
 80009e0:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a24      	ldr	r2, [pc, #144]	@ (8000a78 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80009e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009ea:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM4
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <PWM_PB6_TIM4_CH1_Init+0xec>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f0:	4a20      	ldr	r2, [pc, #128]	@ (8000a74 <PWM_PB6_TIM4_CH1_Init+0xec>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM4->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80009f8:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 160 - 1;             // Period     (cycle length)
 80009fe:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a00:	229f      	movs	r2, #159	@ 0x9f
 8000a02:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR1 = 0;                 // Sets Duty Cycle (ON state) , CCR1 for CH1
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34

	// Other timer settings
	TIM4->CCMR1 &= ~(0b111 << 4);    // Alternate register
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a14:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=  (0b110 << 4);    // CH1 set to PWM mode 1
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a18      	ldr	r2, [pc, #96]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000a20:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC1PE;  // Enable pre-load register
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a15      	ldr	r2, [pc, #84]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6193      	str	r3, [r2, #24]

	TIM4->CCER &= ~TIM_CCER_CC1P;    // set output polarity to active HIGH in CH1
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a34:	f023 0302 	bic.w	r3, r3, #2
 8000a38:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= TIM_CCER_CC1E;     // Capture/Compare enabled for CH1
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6213      	str	r3, [r2, #32]

	TIM4->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8000a46:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a09      	ldr	r2, [pc, #36]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a5c:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM4
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a06      	ldr	r2, [pc, #24]	@ (8000a7c <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6013      	str	r3, [r2, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	40000800 	.word	0x40000800

08000a80 <PWM_PB3_TIM2_CH2_Init>:

// PWM for PB3 (TIM2_CH2 -> AF1)
void PWM_PB3_TIM2_CH2_Init(void){
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000a84:	4b43      	ldr	r3, [pc, #268]	@ (8000b94 <PWM_PB3_TIM2_CH2_Init+0x114>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	4a42      	ldr	r2, [pc, #264]	@ (8000b94 <PWM_PB3_TIM2_CH2_Init+0x114>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB3 output to Alt Funct Mode
	GPIOB->MODER  &= ~(0b11 << 6);
 8000a90:	4b41      	ldr	r3, [pc, #260]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a40      	ldr	r2, [pc, #256]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000a96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000a9a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |= (0b10 << 6);    // MODE6 = Alt Funct Mode
 8000a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa6:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 12);
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000aaa:	6a1b      	ldr	r3, [r3, #32]
 8000aac:	4a3a      	ldr	r2, [pc, #232]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000aae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000ab2:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0001 << 12);  // AFSEL3 set to AF1
 8000ab4:	4b38      	ldr	r3, [pc, #224]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	4a37      	ldr	r2, [pc, #220]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000aba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000abe:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 6);    // High speed pin
 8000ac0:	4b35      	ldr	r3, [pc, #212]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	4a34      	ldr	r2, [pc, #208]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aca:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT3; // No Push-pull
 8000acc:	4b32      	ldr	r3, [pc, #200]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	4a31      	ldr	r2, [pc, #196]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000ad2:	f023 0308 	bic.w	r3, r3, #8
 8000ad6:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 6);    // No pull-up/pull-down
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	4a2e      	ldr	r2, [pc, #184]	@ (8000b98 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8000ade:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000ae2:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <PWM_PB3_TIM2_CH2_Init+0x114>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b94 <PWM_PB3_TIM2_CH2_Init+0x114>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM2->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 8000af0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 160 - 1;             // Period     (cycle length)
 8000af8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000afc:	229f      	movs	r2, #159	@ 0x9f
 8000afe:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR2 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 8000b00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b04:	2200      	movs	r2, #0
 8000b06:	639a      	str	r2, [r3, #56]	@ 0x38

	// Other timer settings
	TIM2->CCMR1 &= ~(0b111 << 12);   // Alternate register
 8000b08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000b16:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b110 << 12);   // CH2 set to PWM mode 1
 8000b18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b22:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000b26:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE;  // Enable pre-load register CH2
 8000b28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b32:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b36:	6193      	str	r3, [r2, #24]

	TIM2->CCER &= ~TIM_CCER_CC2P;    // set output polarity to active HIGH in CH2
 8000b38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b42:	f023 0320 	bic.w	r3, r3, #32
 8000b46:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC2E;     // Capture/Compare enabled for CH2
 8000b48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6213      	str	r3, [r2, #32]

	TIM2->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8000b58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8000b68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b76:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8000b78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400

08000b9c <PWM_PA15_TIM2_CH1_Init>:

// PWM for PA15 (TIM2_CH1 -> AF1)
void PWM_PA15_TIM2_CH1_Init(void){
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000ba0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ccc <PWM_PA15_TIM2_CH1_Init+0x130>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	4a49      	ldr	r2, [pc, #292]	@ (8000ccc <PWM_PA15_TIM2_CH1_Init+0x130>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PA15 output to Alt Funct Mode
	GPIOA->MODER  &= ~(0b11 << 30);
 8000bac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bb6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000bba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |= (0b10 << 30);     // MODE15 = Alt Funct Mode
 8000bbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~(0b1111 << 28);
 8000bcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000bda:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (0b0001 << 28);  // AFSEL15 set to AF1
 8000bdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	6253      	str	r3, [r2, #36]	@ 0x24

	// GPIO settings
	GPIOA->OSPEEDR |= (0b10 << 30);     // High speed pin
 8000bec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	6093      	str	r3, [r2, #8]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT15; // No Push-pull
 8000bfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c0a:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR  &= ~(0b11 << 30);     // No pull-up/pull-down
 8000c0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c16:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000c1a:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ccc <PWM_PA15_TIM2_CH1_Init+0x130>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c20:	4a2a      	ldr	r2, [pc, #168]	@ (8000ccc <PWM_PA15_TIM2_CH1_Init+0x130>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM2->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 160 - 1;             // Period     (cycle length)
 8000c30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c34:	229f      	movs	r2, #159	@ 0x9f
 8000c36:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	635a      	str	r2, [r3, #52]	@ 0x34

	// Other timer settings
	TIM2->CCMR1 &= ~(0b111 << 4);    // Alternate register
 8000c40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000c4e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b110 << 4);    // CH1 set to PWM mode 1
 8000c50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000c5e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;  // Enable pre-load register CH1
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6193      	str	r3, [r2, #24]

	TIM2->CCER &= ~TIM_CCER_CC1P;    // set output polarity to active HIGH in CH1
 8000c70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c7a:	f023 0302 	bic.w	r3, r3, #2
 8000c7e:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC1E;     // Capture/Compare enabled for CH1
 8000c80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6213      	str	r3, [r2, #32]

	TIM2->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8000c90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8000ca0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cae:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8000cb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <PWM_PC2_TIM1_CH3_Init>:

// PWM for PC2 (TIM1_CH3 -> AF2)
void PWM_PC2_TIM1_CH3_Init(void){
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc8 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8000dc8 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PC2 output to Alt Funct Mode
	GPIOC->MODER  &= ~(0b11 << 4);
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a39      	ldr	r2, [pc, #228]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000ce6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000cea:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |= (0b10 << 4);    // MODE2 = Alt Funct Mode
 8000cec:	4b37      	ldr	r3, [pc, #220]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a36      	ldr	r2, [pc, #216]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000cf2:	f043 0320 	orr.w	r3, r3, #32
 8000cf6:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0b1111 << 8);
 8000cf8:	4b34      	ldr	r3, [pc, #208]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	4a33      	ldr	r2, [pc, #204]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000cfe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d02:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 8);  // AFSEL2 set to AF2
 8000d04:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	4a30      	ldr	r2, [pc, #192]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0e:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOC->OSPEEDR |= (0b10 << 4);     // High speed pin
 8000d10:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	4a2d      	ldr	r2, [pc, #180]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000d16:	f043 0320 	orr.w	r3, r3, #32
 8000d1a:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT2; // No Push-pull
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000d22:	f023 0304 	bic.w	r3, r3, #4
 8000d26:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR  &= ~(0b11 << 4);     // No pull-up/pull-down
 8000d28:	4b28      	ldr	r3, [pc, #160]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	4a27      	ldr	r2, [pc, #156]	@ (8000dcc <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8000d2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d32:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000d34:	4b24      	ldr	r3, [pc, #144]	@ (8000dc8 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 8000d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d38:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 8000d3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d3e:	6613      	str	r3, [r2, #96]	@ 0x60
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM1->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 8000d40:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 160 - 1;             // Period     (cycle length)
 8000d46:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d48:	229f      	movs	r2, #159	@ 0x9f
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR3 = 0;                 // Sets Duty Cycle (ON state) , CCR3 for CH3
 8000d4c:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Other timer settings
	TIM1->CCMR2 &= ~(0b111 << 4);    // Alternate register
 8000d52:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d5c:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |=  (0b110 << 4);    // CH3 set to PWM mode 1
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d64:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000d68:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3PE;  // Enable pre-load register CH3
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a18      	ldr	r2, [pc, #96]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	61d3      	str	r3, [r2, #28]

	TIM1->CCER &= ~TIM_CCER_CC3P;    // set output polarity to active HIGH in CH3
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4a15      	ldr	r2, [pc, #84]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d80:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3E;     // Capture/Compare enabled for CH3
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8c:	6213      	str	r3, [r2, #32]

	TIM1->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da4:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a09      	ldr	r2, [pc, #36]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6013      	str	r3, [r2, #0]
	TIM1->BDTR |= TIM_BDTR_MOE;      // Enable since TIM1 is a "Special Timer"
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <PWM_PC2_TIM1_CH3_Init+0x100>)
 8000db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dbc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	40012c00 	.word	0x40012c00

08000dd4 <PWM_PC3_TIM1_CH4_Init>:

// PWM for PC3 (TIM1_CH4 -> AF2)
void PWM_PC3_TIM1_CH4_Init(void){
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000dd8:	4b39      	ldr	r3, [pc, #228]	@ (8000ec0 <PWM_PC3_TIM1_CH4_Init+0xec>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ddc:	4a38      	ldr	r2, [pc, #224]	@ (8000ec0 <PWM_PC3_TIM1_CH4_Init+0xec>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PC2 output to Alt Funct Mode
	GPIOC->MODER  &= ~(0b11 << 6);
 8000de4:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a36      	ldr	r2, [pc, #216]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000dea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000dee:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |= (0b10 << 6);     // MODE2 = Alt Funct Mode
 8000df0:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a33      	ldr	r2, [pc, #204]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dfa:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0b1111 << 12);
 8000dfc:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4a30      	ldr	r2, [pc, #192]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000e06:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 12);  // AFSEL3 set to AF2
 8000e08:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e12:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOC->OSPEEDR |= (0b10 << 6);     // High speed pin
 8000e14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4a2a      	ldr	r2, [pc, #168]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1e:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT3; // No Push-pull
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4a27      	ldr	r2, [pc, #156]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e26:	f023 0308 	bic.w	r3, r3, #8
 8000e2a:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR  &= ~(0b11 << 6);     // No pull-up/pull-down
 8000e2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4a24      	ldr	r2, [pc, #144]	@ (8000ec4 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8000e32:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000e36:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000e38:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <PWM_PC3_TIM1_CH4_Init+0xec>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3c:	4a20      	ldr	r2, [pc, #128]	@ (8000ec0 <PWM_PC3_TIM1_CH4_Init+0xec>)
 8000e3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e42:	6613      	str	r3, [r2, #96]	@ 0x60
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM1->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 8000e44:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 160 - 1;             // Period     (cycle length)
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e4c:	229f      	movs	r2, #159	@ 0x9f
 8000e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR4 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 8000e50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	641a      	str	r2, [r3, #64]	@ 0x40

	// Other timer settings
	TIM1->CCMR2 &= ~(0b111 << 12);    // Alternate register
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000e60:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |=  (0b110 << 12);    // CH4 set to PWM mode 1
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e68:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000e6c:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4PE;  // Enable pre-load register CH4
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e78:	61d3      	str	r3, [r2, #28]

	TIM1->CCER &= ~TIM_CCER_CC4P;    // set output polarity to active HIGH in CH4
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000e84:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC4E;     // Capture/Compare enabled for CH4
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e90:	6213      	str	r3, [r2, #32]

	TIM1->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea8:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6013      	str	r3, [r2, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	40012c00 	.word	0x40012c00

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f22:	f000 facb 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e00a      	b.n	8000f52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f3c:	f7ff fc34 	bl	80007a8 <__io_getchar>
 8000f40:	4601      	mov	r1, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	60ba      	str	r2, [r7, #8]
 8000f48:	b2ca      	uxtb	r2, r1
 8000f4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbf0      	blt.n	8000f3c <_read+0x12>
  }

  return len;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e009      	b.n	8000f8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	60ba      	str	r2, [r7, #8]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fc78 	bl	8000874 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dbf1      	blt.n	8000f76 <_write+0x12>
  }
  return len;
 8000f92:	687b      	ldr	r3, [r7, #4]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_close>:

int _close(int file)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc4:	605a      	str	r2, [r3, #4]
  return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_isatty>:

int _isatty(int file)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fdc:	2301      	movs	r3, #1
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b085      	sub	sp, #20
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f000 fcac 	bl	8001990 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20008000 	.word	0x20008000
 8001064:	00000400 	.word	0x00000400
 8001068:	20000088 	.word	0x20000088
 800106c:	200001e0 	.word	0x200001e0

08001070 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	@ (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <ADC_Poten_PA7_Init>:
#define ADC_Bits            4096

volatile uint16_t ADC_Value_PA7 = 0;

// Initializes GPIOA, Timer, and Interrupt peripherals for PA7
void ADC_Poten_PA7_Init(void){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	// Step 1: Init GPIOA
	// Enable GPIOA Clk access
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800112a:	4b4d      	ldr	r3, [pc, #308]	@ (8001260 <ADC_Poten_PA7_Init+0x13c>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a4c      	ldr	r2, [pc, #304]	@ (8001260 <ADC_Poten_PA7_Init+0x13c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Set PA7 to analog mode
	GPIOA->MODER |= (0b11 << 14);
 8001136:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001140:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001144:	6013      	str	r3, [r2, #0]


	// Step 2: Init Timer (TIM3_CH2 -> AF2)
    // Enable TIM3 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 8001146:	4b46      	ldr	r3, [pc, #280]	@ (8001260 <ADC_Poten_PA7_Init+0x13c>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114a:	4a45      	ldr	r2, [pc, #276]	@ (8001260 <ADC_Poten_PA7_Init+0x13c>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6593      	str	r3, [r2, #88]	@ 0x58

    // Set prescaler and auto-reload for 10ms period (For 16 MHz Clk)
    TIM3->PSC = 16000 - 1;   // 16 MHz / 16000 = 1 kHz
 8001152:	4b44      	ldr	r3, [pc, #272]	@ (8001264 <ADC_Poten_PA7_Init+0x140>)
 8001154:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000 - 1;    // 1 kHz / 1000 = 1 Hz (1s)
 800115a:	4b42      	ldr	r3, [pc, #264]	@ (8001264 <ADC_Poten_PA7_Init+0x140>)
 800115c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001160:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set TIM3 to generate TRGO on update event
    TIM3->CR2 |= (0b010 << 4);
 8001162:	4b40      	ldr	r3, [pc, #256]	@ (8001264 <ADC_Poten_PA7_Init+0x140>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a3f      	ldr	r2, [pc, #252]	@ (8001264 <ADC_Poten_PA7_Init+0x140>)
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	6053      	str	r3, [r2, #4]

    // Enable timer
    TIM3->CR1 |= TIM_CR1_CEN;
 800116e:	4b3d      	ldr	r3, [pc, #244]	@ (8001264 <ADC_Poten_PA7_Init+0x140>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a3c      	ldr	r2, [pc, #240]	@ (8001264 <ADC_Poten_PA7_Init+0x140>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6013      	str	r3, [r2, #0]


    // Step 3: Init Interrupt (ADC2_IN4) -> IN4 = CH4
	// enable ADC2 Clk and ADC Clk source
	RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 800117a:	4b39      	ldr	r3, [pc, #228]	@ (8001260 <ADC_Poten_PA7_Init+0x13c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a38      	ldr	r2, [pc, #224]	@ (8001260 <ADC_Poten_PA7_Init+0x13c>)
 8001180:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->CCIPR |= (0b10 << 28);
 8001186:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <ADC_Poten_PA7_Init+0x13c>)
 8001188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118c:	4a34      	ldr	r2, [pc, #208]	@ (8001260 <ADC_Poten_PA7_Init+0x13c>)
 800118e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001192:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	// ADC startup sequence
	// Enable ADC voltage regulator (RM0440: 21.4.6)
	ADC2->CR &= ~(ADC_CR_ADEN|ADC_CR_DEEPPWD);     // Disable ADC and DEEPPWD
 8001196:	4b34      	ldr	r3, [pc, #208]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4a33      	ldr	r2, [pc, #204]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 800119c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADVREGEN;                   // Enable voltage regulator
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	6093      	str	r3, [r2, #8]
	for (volatile uint32_t i = 0; i < 1000; i++);  // Wait ~20 µs for regulator
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	e002      	b.n	80011be <ADC_Poten_PA7_Init+0x9a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011c4:	d3f8      	bcc.n	80011b8 <ADC_Poten_PA7_Init+0x94>

	// Calibrate ADC
	ADC2->CR |= ADC_CR_ADCAL;         // Start calibration
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4a27      	ldr	r2, [pc, #156]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011d0:	6093      	str	r3, [r2, #8]
	while (ADC2->CR & ADC_CR_ADCAL);  // Wait for calibration to complete
 80011d2:	bf00      	nop
 80011d4:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dbfb      	blt.n	80011d4 <ADC_Poten_PA7_Init+0xb0>

	// Enable ADC
	ADC2->CR |= ADC_CR_ADEN;
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6093      	str	r3, [r2, #8]
	while (!(ADC2->ISR & ADC_ISR_ADRDY));  // Wait for ADC to be ready
 80011e8:	bf00      	nop
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <ADC_Poten_PA7_Init+0xc6>

    // Trigger from TIM3 TRGO
    ADC2->CFGR |= (0b00100 << 5);  // TIM3_TRGO = 4 (RM0440: Table 67. Interconnect 19)
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001200:	60d3      	str	r3, [r2, #12]
    ADC2->CFGR |= (0b01 << 10);    // Trigger on rising edge
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001208:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800120c:	60d3      	str	r3, [r2, #12]

    // Convert CH4 first -> SQ1
	ADC2->SQR1 |= (4 << 6);
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a15      	ldr	r2, [pc, #84]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set sample time for SMP4 (CH4) -> 47.5 ADC Clk cycles
	ADC2->SMPR1 &= ~(0b111 << 12);
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001224:	6153      	str	r3, [r2, #20]
	ADC2->SMPR1 |= (0b100 << 12);
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a0f      	ldr	r2, [pc, #60]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	6153      	str	r3, [r2, #20]

    // Enable end of conv interrupt EOCIE
    ADC2->IER |= ADC_IER_EOCIE;
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6053      	str	r3, [r2, #4]

    // Enable ADC interrupt in NVIC
    NVIC_SetPriority(ADC1_2_IRQn, 2);  // Optional: Set priority
 800123e:	2102      	movs	r1, #2
 8001240:	2012      	movs	r0, #18
 8001242:	f7ff ff45 	bl	80010d0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(ADC1_2_IRQn);
 8001246:	2012      	movs	r0, #18
 8001248:	f7ff ff24 	bl	8001094 <__NVIC_EnableIRQ>

    // Start ADC conversion (triggered by TIM3_TRGO)
    ADC2->CR |= ADC_CR_ADSTART;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <ADC_Poten_PA7_Init+0x144>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6093      	str	r3, [r2, #8]
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	40000400 	.word	0x40000400
 8001268:	50000100 	.word	0x50000100

0800126c <ADC1_2_IRQHandler>:

// ADC Interrupt thingy
void ADC1_2_IRQHandler(void) {
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
    if (ADC2->ISR & ADC_ISR_EOC) {
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <ADC1_2_IRQHandler+0x24>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <ADC1_2_IRQHandler+0x1a>
    	// 12-bit result (0–4095)
    	ADC_Value_PA7 = ADC2->DR;
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <ADC1_2_IRQHandler+0x24>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <ADC1_2_IRQHandler+0x28>)
 8001284:	801a      	strh	r2, [r3, #0]
    }
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	50000100 	.word	0x50000100
 8001294:	2000008c 	.word	0x2000008c

08001298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001298:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800129a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800129c:	f7ff fee8 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	@ (80012d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <LoopForever+0xe>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	@ (80012e4 <LoopForever+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f000 fb69 	bl	800199c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ca:	f000 f89f 	bl	800140c <main>

080012ce <LoopForever>:

LoopForever:
    b LoopForever
 80012ce:	e7fe      	b.n	80012ce <LoopForever>
  ldr   r0, =_estack
 80012d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012dc:	0800249c 	.word	0x0800249c
  ldr r2, =_sbss
 80012e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012e4:	200001e0 	.word	0x200001e0

080012e8 <CORDIC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <CORDIC_IRQHandler>
	...

080012ec <Delay_TIM17_Init>:

#include "Delay_Timer.h"
#include "stm32g431xx.h"
#include <stdio.h>

void Delay_TIM17_Init(void){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	// Init Clk for TIM3
	RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <Delay_TIM17_Init+0x60>)
 80012f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f4:	4a15      	ldr	r2, [pc, #84]	@ (800134c <Delay_TIM17_Init+0x60>)
 80012f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fa:	6613      	str	r3, [r2, #96]	@ 0x60

	 // Wait for clock stabilization (optional, for robustness)
	 while (!(RCC->APB2ENR & RCC_APB2ENR_TIM17EN)) {}
 80012fc:	bf00      	nop
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <Delay_TIM17_Init+0x60>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f9      	beq.n	80012fe <Delay_TIM17_Init+0x12>
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 1MHz = 16 Mhz / (16 + 1)(userInput + 1)
	     // 1MHz == 1 uS
	     // therefore, set PSC = 16 and ARR = userInput

	TIM17->PSC = (SystemCoreClock / 1000000) - 1;        // Clk pre-scaler -> 16MHz / 16 = 1MHz
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <Delay_TIM17_Init+0x64>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a11      	ldr	r2, [pc, #68]	@ (8001354 <Delay_TIM17_Init+0x68>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	0c9b      	lsrs	r3, r3, #18
 8001316:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <Delay_TIM17_Init+0x6c>)
 8001318:	3b01      	subs	r3, #1
 800131a:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM17->ARR = 0xFFFF;        // Set maximum duty cycle == 1uS
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <Delay_TIM17_Init+0x6c>)
 800131e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Generate an update event to apply PSC and ARR
	TIM17->EGR |= TIM_EGR_UG;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <Delay_TIM17_Init+0x6c>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <Delay_TIM17_Init+0x6c>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6153      	str	r3, [r2, #20]

    // Clear the counter
	TIM17->CNT = 0;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <Delay_TIM17_Init+0x6c>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the timer
	TIM17->CR1 |= TIM_CR1_CEN;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <Delay_TIM17_Init+0x6c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a07      	ldr	r2, [pc, #28]	@ (8001358 <Delay_TIM17_Init+0x6c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6013      	str	r3, [r2, #0]
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	20000004 	.word	0x20000004
 8001354:	431bde83 	.word	0x431bde83
 8001358:	40014800 	.word	0x40014800

0800135c <Delay_uS>:

// 1,000,000 uS == 1 sec
void Delay_uS(uint16_t time_uS){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
	// Reset the counter
	TIM17->CNT = 0;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <Delay_uS+0x2c>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24

	//while ((volatile uint16_t)TIM3->CNT < time_uS);
	while (TIM17->CNT < time_uS);
 800136c:	bf00      	nop
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <Delay_uS+0x2c>)
 8001370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	429a      	cmp	r2, r3
 8001376:	d3fa      	bcc.n	800136e <Delay_uS+0x12>
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40014800 	.word	0x40014800

0800138c <Delay_mS>:

// 1,000 uS == 1 mS --> 1000 mS == 1 sec
void Delay_mS(uint16_t time_mS){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]

	for (uint16_t counter = 0; counter < time_mS; counter++){
 8001396:	2300      	movs	r3, #0
 8001398:	81fb      	strh	r3, [r7, #14]
 800139a:	e006      	b.n	80013aa <Delay_mS+0x1e>
		Delay_uS(1000);
 800139c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a0:	f7ff ffdc 	bl	800135c <Delay_uS>
	for (uint16_t counter = 0; counter < time_mS; counter++){
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	3301      	adds	r3, #1
 80013a8:	81fb      	strh	r3, [r7, #14]
 80013aa:	89fa      	ldrh	r2, [r7, #14]
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3f4      	bcc.n	800139c <Delay_mS+0x10>
	}
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <LED_PA10_Init>:

#define LED_PA10         (1 << 10)
#define DELAY_BRUTE_CNT  250000

// Turn on LED on breadboard
void LED_PA10_Init(void){
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	// init Clk to GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <LED_PA10_Init+0x4c>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c4:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <LED_PA10_Init+0x4c>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Clear PA10
	GPIOA->MODER &= ~(0b11 << 20);
 80013cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013d6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80013da:	6013      	str	r3, [r2, #0]

	// Set PA10 as output
	GPIOA->MODER |= (0b01 << 20);
 80013dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013ea:	6013      	str	r3, [r2, #0]

	// Set to LOW default
	GPIOA->ODR &= ~LED_PA10;
 80013ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013fa:	6153      	str	r3, [r2, #20]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <main>:

/*
 *       Master
 */

int main(void){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	LED_PA10_Init();
 8001412:	f7ff ffd3 	bl	80013bc <LED_PA10_Init>
	USART2_PA2_Init();        // PA2 == COMP2_INM
 8001416:	f7ff f9cf 	bl	80007b8 <USART2_PA2_Init>
	ADC_Poten_PA7_Init();     // TIMER3
 800141a:	f7ff fe83 	bl	8001124 <ADC_Poten_PA7_Init>
	Delay_TIM17_Init();       // Delay_mS()
 800141e:	f7ff ff65 	bl	80012ec <Delay_TIM17_Init>

	COMP1_Init();             // PA1+ | PA4-  -> P1
 8001422:	f7fe ff71 	bl	8000308 <COMP1_Init>
	COMP3_Init_v2();          // PC1+ | PC0-  -> P2
 8001426:	f7fe ffcb 	bl	80003c0 <COMP3_Init_v2>
	COMP4_Init_v2();          // PB0+ | PB2-  -> P3
 800142a:	f7ff f81b 	bl	8000464 <COMP4_Init_v2>

	PWM_PB6_TIM4_CH1_Init();  // M1H
 800142e:	f7ff faab 	bl	8000988 <PWM_PB6_TIM4_CH1_Init>
	PWM_PB3_TIM2_CH2_Init();  // M1L
 8001432:	f7ff fb25 	bl	8000a80 <PWM_PB3_TIM2_CH2_Init>
	PWM_PA15_TIM2_CH1_Init(); // M2H
 8001436:	f7ff fbb1 	bl	8000b9c <PWM_PA15_TIM2_CH1_Init>
	PWM_PB7_TIM4_CH2_Init();  // M2L
 800143a:	f7ff fa29 	bl	8000890 <PWM_PB7_TIM4_CH2_Init>
	PWM_PC2_TIM1_CH3_Init();  // M3H
 800143e:	f7ff fc47 	bl	8000cd0 <PWM_PC2_TIM1_CH3_Init>
	PWM_PC3_TIM1_CH4_Init();  // M3L
 8001442:	f7ff fcc7 	bl	8000dd4 <PWM_PC3_TIM1_CH4_Init>

	SPI2_Master_Init();
 8001446:	f7ff f8d7 	bl	80005f8 <SPI2_Master_Init>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144a:	f3ef 8310 	mrs	r3, PRIMASK
 800144e:	607b      	str	r3, [r7, #4]
  return(result);
 8001450:	687b      	ldr	r3, [r7, #4]

	// Ensure global interrupts are enabled
	if (__get_PRIMASK() & 1){
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <main+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 800145a:	b662      	cpsie	i
}
 800145c:	bf00      	nop
		__enable_irq();
	}

	while (1){
		// Active LED
		GPIOA->ODR ^= LED_PA10;
 800145e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001468:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 800146c:	6153      	str	r3, [r2, #20]

		// Send SPI data
		GPIOB->ODR &= ~SPI2_PB12_MASTER_CS; // Enable CS for slave1
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <main+0xa4>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <main+0xa4>)
 8001474:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001478:	6153      	str	r3, [r2, #20]
		Delay_mS(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff ff86 	bl	800138c <Delay_mS>

		Read_Slave_Value = SPI2_TX_RX(99); // Send (Max is 8 bits right now), store read value
 8001480:	2063      	movs	r0, #99	@ 0x63
 8001482:	f7ff f93b 	bl	80006fc <SPI2_TX_RX>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <main+0xa8>)
 800148c:	701a      	strb	r2, [r3, #0]
		//Delay_mS(1); // Hold time

		GPIOB->ODR |= SPI2_PB12_MASTER_CS;  // Disable  CS
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <main+0xa4>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <main+0xa4>)
 8001494:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001498:	6153      	str	r3, [r2, #20]
		printf("Read from Slave: %u \r\n", Read_Slave_Value);
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <main+0xa8>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <main+0xac>)
 80014a2:	f000 f8df 	bl	8001664 <iprintf>
		Delay_mS(100);
 80014a6:	2064      	movs	r0, #100	@ 0x64
 80014a8:	f7ff ff70 	bl	800138c <Delay_mS>
		GPIOA->ODR ^= LED_PA10;
 80014ac:	bf00      	nop
 80014ae:	e7d6      	b.n	800145e <main+0x52>
 80014b0:	48000400 	.word	0x48000400
 80014b4:	20000084 	.word	0x20000084
 80014b8:	08002440 	.word	0x08002440

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_IncTick+0x20>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a03      	ldr	r2, [pc, #12]	@ (80014d8 <HAL_IncTick+0x1c>)
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000090 	.word	0x20000090
 80014dc:	20000008 	.word	0x20000008

080014e0 <std>:
 80014e0:	2300      	movs	r3, #0
 80014e2:	b510      	push	{r4, lr}
 80014e4:	4604      	mov	r4, r0
 80014e6:	e9c0 3300 	strd	r3, r3, [r0]
 80014ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014ee:	6083      	str	r3, [r0, #8]
 80014f0:	8181      	strh	r1, [r0, #12]
 80014f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80014f4:	81c2      	strh	r2, [r0, #14]
 80014f6:	6183      	str	r3, [r0, #24]
 80014f8:	4619      	mov	r1, r3
 80014fa:	2208      	movs	r2, #8
 80014fc:	305c      	adds	r0, #92	@ 0x5c
 80014fe:	f000 f9f9 	bl	80018f4 <memset>
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <std+0x58>)
 8001504:	6263      	str	r3, [r4, #36]	@ 0x24
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <std+0x5c>)
 8001508:	62a3      	str	r3, [r4, #40]	@ 0x28
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <std+0x60>)
 800150c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <std+0x64>)
 8001510:	6323      	str	r3, [r4, #48]	@ 0x30
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <std+0x68>)
 8001514:	6224      	str	r4, [r4, #32]
 8001516:	429c      	cmp	r4, r3
 8001518:	d006      	beq.n	8001528 <std+0x48>
 800151a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800151e:	4294      	cmp	r4, r2
 8001520:	d002      	beq.n	8001528 <std+0x48>
 8001522:	33d0      	adds	r3, #208	@ 0xd0
 8001524:	429c      	cmp	r4, r3
 8001526:	d105      	bne.n	8001534 <std+0x54>
 8001528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800152c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001530:	f000 ba58 	b.w	80019e4 <__retarget_lock_init_recursive>
 8001534:	bd10      	pop	{r4, pc}
 8001536:	bf00      	nop
 8001538:	08001745 	.word	0x08001745
 800153c:	08001767 	.word	0x08001767
 8001540:	0800179f 	.word	0x0800179f
 8001544:	080017c3 	.word	0x080017c3
 8001548:	20000094 	.word	0x20000094

0800154c <stdio_exit_handler>:
 800154c:	4a02      	ldr	r2, [pc, #8]	@ (8001558 <stdio_exit_handler+0xc>)
 800154e:	4903      	ldr	r1, [pc, #12]	@ (800155c <stdio_exit_handler+0x10>)
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <stdio_exit_handler+0x14>)
 8001552:	f000 b869 	b.w	8001628 <_fwalk_sglue>
 8001556:	bf00      	nop
 8001558:	2000000c 	.word	0x2000000c
 800155c:	08002281 	.word	0x08002281
 8001560:	2000001c 	.word	0x2000001c

08001564 <cleanup_stdio>:
 8001564:	6841      	ldr	r1, [r0, #4]
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <cleanup_stdio+0x34>)
 8001568:	4299      	cmp	r1, r3
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	d001      	beq.n	8001574 <cleanup_stdio+0x10>
 8001570:	f000 fe86 	bl	8002280 <_fflush_r>
 8001574:	68a1      	ldr	r1, [r4, #8]
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <cleanup_stdio+0x38>)
 8001578:	4299      	cmp	r1, r3
 800157a:	d002      	beq.n	8001582 <cleanup_stdio+0x1e>
 800157c:	4620      	mov	r0, r4
 800157e:	f000 fe7f 	bl	8002280 <_fflush_r>
 8001582:	68e1      	ldr	r1, [r4, #12]
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <cleanup_stdio+0x3c>)
 8001586:	4299      	cmp	r1, r3
 8001588:	d004      	beq.n	8001594 <cleanup_stdio+0x30>
 800158a:	4620      	mov	r0, r4
 800158c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001590:	f000 be76 	b.w	8002280 <_fflush_r>
 8001594:	bd10      	pop	{r4, pc}
 8001596:	bf00      	nop
 8001598:	20000094 	.word	0x20000094
 800159c:	200000fc 	.word	0x200000fc
 80015a0:	20000164 	.word	0x20000164

080015a4 <global_stdio_init.part.0>:
 80015a4:	b510      	push	{r4, lr}
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <global_stdio_init.part.0+0x30>)
 80015a8:	4c0b      	ldr	r4, [pc, #44]	@ (80015d8 <global_stdio_init.part.0+0x34>)
 80015aa:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <global_stdio_init.part.0+0x38>)
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	4620      	mov	r0, r4
 80015b0:	2200      	movs	r2, #0
 80015b2:	2104      	movs	r1, #4
 80015b4:	f7ff ff94 	bl	80014e0 <std>
 80015b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80015bc:	2201      	movs	r2, #1
 80015be:	2109      	movs	r1, #9
 80015c0:	f7ff ff8e 	bl	80014e0 <std>
 80015c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80015c8:	2202      	movs	r2, #2
 80015ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015ce:	2112      	movs	r1, #18
 80015d0:	f7ff bf86 	b.w	80014e0 <std>
 80015d4:	200001cc 	.word	0x200001cc
 80015d8:	20000094 	.word	0x20000094
 80015dc:	0800154d 	.word	0x0800154d

080015e0 <__sfp_lock_acquire>:
 80015e0:	4801      	ldr	r0, [pc, #4]	@ (80015e8 <__sfp_lock_acquire+0x8>)
 80015e2:	f000 ba00 	b.w	80019e6 <__retarget_lock_acquire_recursive>
 80015e6:	bf00      	nop
 80015e8:	200001d5 	.word	0x200001d5

080015ec <__sfp_lock_release>:
 80015ec:	4801      	ldr	r0, [pc, #4]	@ (80015f4 <__sfp_lock_release+0x8>)
 80015ee:	f000 b9fb 	b.w	80019e8 <__retarget_lock_release_recursive>
 80015f2:	bf00      	nop
 80015f4:	200001d5 	.word	0x200001d5

080015f8 <__sinit>:
 80015f8:	b510      	push	{r4, lr}
 80015fa:	4604      	mov	r4, r0
 80015fc:	f7ff fff0 	bl	80015e0 <__sfp_lock_acquire>
 8001600:	6a23      	ldr	r3, [r4, #32]
 8001602:	b11b      	cbz	r3, 800160c <__sinit+0x14>
 8001604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001608:	f7ff bff0 	b.w	80015ec <__sfp_lock_release>
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <__sinit+0x28>)
 800160e:	6223      	str	r3, [r4, #32]
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <__sinit+0x2c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f5      	bne.n	8001604 <__sinit+0xc>
 8001618:	f7ff ffc4 	bl	80015a4 <global_stdio_init.part.0>
 800161c:	e7f2      	b.n	8001604 <__sinit+0xc>
 800161e:	bf00      	nop
 8001620:	08001565 	.word	0x08001565
 8001624:	200001cc 	.word	0x200001cc

08001628 <_fwalk_sglue>:
 8001628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800162c:	4607      	mov	r7, r0
 800162e:	4688      	mov	r8, r1
 8001630:	4614      	mov	r4, r2
 8001632:	2600      	movs	r6, #0
 8001634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001638:	f1b9 0901 	subs.w	r9, r9, #1
 800163c:	d505      	bpl.n	800164a <_fwalk_sglue+0x22>
 800163e:	6824      	ldr	r4, [r4, #0]
 8001640:	2c00      	cmp	r4, #0
 8001642:	d1f7      	bne.n	8001634 <_fwalk_sglue+0xc>
 8001644:	4630      	mov	r0, r6
 8001646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800164a:	89ab      	ldrh	r3, [r5, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d907      	bls.n	8001660 <_fwalk_sglue+0x38>
 8001650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001654:	3301      	adds	r3, #1
 8001656:	d003      	beq.n	8001660 <_fwalk_sglue+0x38>
 8001658:	4629      	mov	r1, r5
 800165a:	4638      	mov	r0, r7
 800165c:	47c0      	blx	r8
 800165e:	4306      	orrs	r6, r0
 8001660:	3568      	adds	r5, #104	@ 0x68
 8001662:	e7e9      	b.n	8001638 <_fwalk_sglue+0x10>

08001664 <iprintf>:
 8001664:	b40f      	push	{r0, r1, r2, r3}
 8001666:	b507      	push	{r0, r1, r2, lr}
 8001668:	4906      	ldr	r1, [pc, #24]	@ (8001684 <iprintf+0x20>)
 800166a:	ab04      	add	r3, sp, #16
 800166c:	6808      	ldr	r0, [r1, #0]
 800166e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001672:	6881      	ldr	r1, [r0, #8]
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	f000 fadb 	bl	8001c30 <_vfiprintf_r>
 800167a:	b003      	add	sp, #12
 800167c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001680:	b004      	add	sp, #16
 8001682:	4770      	bx	lr
 8001684:	20000018 	.word	0x20000018

08001688 <_puts_r>:
 8001688:	6a03      	ldr	r3, [r0, #32]
 800168a:	b570      	push	{r4, r5, r6, lr}
 800168c:	6884      	ldr	r4, [r0, #8]
 800168e:	4605      	mov	r5, r0
 8001690:	460e      	mov	r6, r1
 8001692:	b90b      	cbnz	r3, 8001698 <_puts_r+0x10>
 8001694:	f7ff ffb0 	bl	80015f8 <__sinit>
 8001698:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800169a:	07db      	lsls	r3, r3, #31
 800169c:	d405      	bmi.n	80016aa <_puts_r+0x22>
 800169e:	89a3      	ldrh	r3, [r4, #12]
 80016a0:	0598      	lsls	r0, r3, #22
 80016a2:	d402      	bmi.n	80016aa <_puts_r+0x22>
 80016a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016a6:	f000 f99e 	bl	80019e6 <__retarget_lock_acquire_recursive>
 80016aa:	89a3      	ldrh	r3, [r4, #12]
 80016ac:	0719      	lsls	r1, r3, #28
 80016ae:	d502      	bpl.n	80016b6 <_puts_r+0x2e>
 80016b0:	6923      	ldr	r3, [r4, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d135      	bne.n	8001722 <_puts_r+0x9a>
 80016b6:	4621      	mov	r1, r4
 80016b8:	4628      	mov	r0, r5
 80016ba:	f000 f8c5 	bl	8001848 <__swsetup_r>
 80016be:	b380      	cbz	r0, 8001722 <_puts_r+0x9a>
 80016c0:	f04f 35ff 	mov.w	r5, #4294967295
 80016c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016c6:	07da      	lsls	r2, r3, #31
 80016c8:	d405      	bmi.n	80016d6 <_puts_r+0x4e>
 80016ca:	89a3      	ldrh	r3, [r4, #12]
 80016cc:	059b      	lsls	r3, r3, #22
 80016ce:	d402      	bmi.n	80016d6 <_puts_r+0x4e>
 80016d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016d2:	f000 f989 	bl	80019e8 <__retarget_lock_release_recursive>
 80016d6:	4628      	mov	r0, r5
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da04      	bge.n	80016e8 <_puts_r+0x60>
 80016de:	69a2      	ldr	r2, [r4, #24]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dc17      	bgt.n	8001714 <_puts_r+0x8c>
 80016e4:	290a      	cmp	r1, #10
 80016e6:	d015      	beq.n	8001714 <_puts_r+0x8c>
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	6022      	str	r2, [r4, #0]
 80016ee:	7019      	strb	r1, [r3, #0]
 80016f0:	68a3      	ldr	r3, [r4, #8]
 80016f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60a3      	str	r3, [r4, #8]
 80016fa:	2900      	cmp	r1, #0
 80016fc:	d1ed      	bne.n	80016da <_puts_r+0x52>
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da11      	bge.n	8001726 <_puts_r+0x9e>
 8001702:	4622      	mov	r2, r4
 8001704:	210a      	movs	r1, #10
 8001706:	4628      	mov	r0, r5
 8001708:	f000 f85f 	bl	80017ca <__swbuf_r>
 800170c:	3001      	adds	r0, #1
 800170e:	d0d7      	beq.n	80016c0 <_puts_r+0x38>
 8001710:	250a      	movs	r5, #10
 8001712:	e7d7      	b.n	80016c4 <_puts_r+0x3c>
 8001714:	4622      	mov	r2, r4
 8001716:	4628      	mov	r0, r5
 8001718:	f000 f857 	bl	80017ca <__swbuf_r>
 800171c:	3001      	adds	r0, #1
 800171e:	d1e7      	bne.n	80016f0 <_puts_r+0x68>
 8001720:	e7ce      	b.n	80016c0 <_puts_r+0x38>
 8001722:	3e01      	subs	r6, #1
 8001724:	e7e4      	b.n	80016f0 <_puts_r+0x68>
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	6022      	str	r2, [r4, #0]
 800172c:	220a      	movs	r2, #10
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e7ee      	b.n	8001710 <_puts_r+0x88>
	...

08001734 <puts>:
 8001734:	4b02      	ldr	r3, [pc, #8]	@ (8001740 <puts+0xc>)
 8001736:	4601      	mov	r1, r0
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	f7ff bfa5 	b.w	8001688 <_puts_r>
 800173e:	bf00      	nop
 8001740:	20000018 	.word	0x20000018

08001744 <__sread>:
 8001744:	b510      	push	{r4, lr}
 8001746:	460c      	mov	r4, r1
 8001748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800174c:	f000 f8fc 	bl	8001948 <_read_r>
 8001750:	2800      	cmp	r0, #0
 8001752:	bfab      	itete	ge
 8001754:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001756:	89a3      	ldrhlt	r3, [r4, #12]
 8001758:	181b      	addge	r3, r3, r0
 800175a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800175e:	bfac      	ite	ge
 8001760:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001762:	81a3      	strhlt	r3, [r4, #12]
 8001764:	bd10      	pop	{r4, pc}

08001766 <__swrite>:
 8001766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800176a:	461f      	mov	r7, r3
 800176c:	898b      	ldrh	r3, [r1, #12]
 800176e:	05db      	lsls	r3, r3, #23
 8001770:	4605      	mov	r5, r0
 8001772:	460c      	mov	r4, r1
 8001774:	4616      	mov	r6, r2
 8001776:	d505      	bpl.n	8001784 <__swrite+0x1e>
 8001778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800177c:	2302      	movs	r3, #2
 800177e:	2200      	movs	r2, #0
 8001780:	f000 f8d0 	bl	8001924 <_lseek_r>
 8001784:	89a3      	ldrh	r3, [r4, #12]
 8001786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800178a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800178e:	81a3      	strh	r3, [r4, #12]
 8001790:	4632      	mov	r2, r6
 8001792:	463b      	mov	r3, r7
 8001794:	4628      	mov	r0, r5
 8001796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800179a:	f000 b8e7 	b.w	800196c <_write_r>

0800179e <__sseek>:
 800179e:	b510      	push	{r4, lr}
 80017a0:	460c      	mov	r4, r1
 80017a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a6:	f000 f8bd 	bl	8001924 <_lseek_r>
 80017aa:	1c43      	adds	r3, r0, #1
 80017ac:	89a3      	ldrh	r3, [r4, #12]
 80017ae:	bf15      	itete	ne
 80017b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80017b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80017b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80017ba:	81a3      	strheq	r3, [r4, #12]
 80017bc:	bf18      	it	ne
 80017be:	81a3      	strhne	r3, [r4, #12]
 80017c0:	bd10      	pop	{r4, pc}

080017c2 <__sclose>:
 80017c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017c6:	f000 b89d 	b.w	8001904 <_close_r>

080017ca <__swbuf_r>:
 80017ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017cc:	460e      	mov	r6, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	4605      	mov	r5, r0
 80017d2:	b118      	cbz	r0, 80017dc <__swbuf_r+0x12>
 80017d4:	6a03      	ldr	r3, [r0, #32]
 80017d6:	b90b      	cbnz	r3, 80017dc <__swbuf_r+0x12>
 80017d8:	f7ff ff0e 	bl	80015f8 <__sinit>
 80017dc:	69a3      	ldr	r3, [r4, #24]
 80017de:	60a3      	str	r3, [r4, #8]
 80017e0:	89a3      	ldrh	r3, [r4, #12]
 80017e2:	071a      	lsls	r2, r3, #28
 80017e4:	d501      	bpl.n	80017ea <__swbuf_r+0x20>
 80017e6:	6923      	ldr	r3, [r4, #16]
 80017e8:	b943      	cbnz	r3, 80017fc <__swbuf_r+0x32>
 80017ea:	4621      	mov	r1, r4
 80017ec:	4628      	mov	r0, r5
 80017ee:	f000 f82b 	bl	8001848 <__swsetup_r>
 80017f2:	b118      	cbz	r0, 80017fc <__swbuf_r+0x32>
 80017f4:	f04f 37ff 	mov.w	r7, #4294967295
 80017f8:	4638      	mov	r0, r7
 80017fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	6922      	ldr	r2, [r4, #16]
 8001800:	1a98      	subs	r0, r3, r2
 8001802:	6963      	ldr	r3, [r4, #20]
 8001804:	b2f6      	uxtb	r6, r6
 8001806:	4283      	cmp	r3, r0
 8001808:	4637      	mov	r7, r6
 800180a:	dc05      	bgt.n	8001818 <__swbuf_r+0x4e>
 800180c:	4621      	mov	r1, r4
 800180e:	4628      	mov	r0, r5
 8001810:	f000 fd36 	bl	8002280 <_fflush_r>
 8001814:	2800      	cmp	r0, #0
 8001816:	d1ed      	bne.n	80017f4 <__swbuf_r+0x2a>
 8001818:	68a3      	ldr	r3, [r4, #8]
 800181a:	3b01      	subs	r3, #1
 800181c:	60a3      	str	r3, [r4, #8]
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	6022      	str	r2, [r4, #0]
 8001824:	701e      	strb	r6, [r3, #0]
 8001826:	6962      	ldr	r2, [r4, #20]
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	429a      	cmp	r2, r3
 800182c:	d004      	beq.n	8001838 <__swbuf_r+0x6e>
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	07db      	lsls	r3, r3, #31
 8001832:	d5e1      	bpl.n	80017f8 <__swbuf_r+0x2e>
 8001834:	2e0a      	cmp	r6, #10
 8001836:	d1df      	bne.n	80017f8 <__swbuf_r+0x2e>
 8001838:	4621      	mov	r1, r4
 800183a:	4628      	mov	r0, r5
 800183c:	f000 fd20 	bl	8002280 <_fflush_r>
 8001840:	2800      	cmp	r0, #0
 8001842:	d0d9      	beq.n	80017f8 <__swbuf_r+0x2e>
 8001844:	e7d6      	b.n	80017f4 <__swbuf_r+0x2a>
	...

08001848 <__swsetup_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <__swsetup_r+0xa8>)
 800184c:	4605      	mov	r5, r0
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	460c      	mov	r4, r1
 8001852:	b118      	cbz	r0, 800185c <__swsetup_r+0x14>
 8001854:	6a03      	ldr	r3, [r0, #32]
 8001856:	b90b      	cbnz	r3, 800185c <__swsetup_r+0x14>
 8001858:	f7ff fece 	bl	80015f8 <__sinit>
 800185c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001860:	0719      	lsls	r1, r3, #28
 8001862:	d422      	bmi.n	80018aa <__swsetup_r+0x62>
 8001864:	06da      	lsls	r2, r3, #27
 8001866:	d407      	bmi.n	8001878 <__swsetup_r+0x30>
 8001868:	2209      	movs	r2, #9
 800186a:	602a      	str	r2, [r5, #0]
 800186c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001870:	81a3      	strh	r3, [r4, #12]
 8001872:	f04f 30ff 	mov.w	r0, #4294967295
 8001876:	e033      	b.n	80018e0 <__swsetup_r+0x98>
 8001878:	0758      	lsls	r0, r3, #29
 800187a:	d512      	bpl.n	80018a2 <__swsetup_r+0x5a>
 800187c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800187e:	b141      	cbz	r1, 8001892 <__swsetup_r+0x4a>
 8001880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001884:	4299      	cmp	r1, r3
 8001886:	d002      	beq.n	800188e <__swsetup_r+0x46>
 8001888:	4628      	mov	r0, r5
 800188a:	f000 f8af 	bl	80019ec <_free_r>
 800188e:	2300      	movs	r3, #0
 8001890:	6363      	str	r3, [r4, #52]	@ 0x34
 8001892:	89a3      	ldrh	r3, [r4, #12]
 8001894:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001898:	81a3      	strh	r3, [r4, #12]
 800189a:	2300      	movs	r3, #0
 800189c:	6063      	str	r3, [r4, #4]
 800189e:	6923      	ldr	r3, [r4, #16]
 80018a0:	6023      	str	r3, [r4, #0]
 80018a2:	89a3      	ldrh	r3, [r4, #12]
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	81a3      	strh	r3, [r4, #12]
 80018aa:	6923      	ldr	r3, [r4, #16]
 80018ac:	b94b      	cbnz	r3, 80018c2 <__swsetup_r+0x7a>
 80018ae:	89a3      	ldrh	r3, [r4, #12]
 80018b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80018b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018b8:	d003      	beq.n	80018c2 <__swsetup_r+0x7a>
 80018ba:	4621      	mov	r1, r4
 80018bc:	4628      	mov	r0, r5
 80018be:	f000 fd2d 	bl	800231c <__smakebuf_r>
 80018c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018c6:	f013 0201 	ands.w	r2, r3, #1
 80018ca:	d00a      	beq.n	80018e2 <__swsetup_r+0x9a>
 80018cc:	2200      	movs	r2, #0
 80018ce:	60a2      	str	r2, [r4, #8]
 80018d0:	6962      	ldr	r2, [r4, #20]
 80018d2:	4252      	negs	r2, r2
 80018d4:	61a2      	str	r2, [r4, #24]
 80018d6:	6922      	ldr	r2, [r4, #16]
 80018d8:	b942      	cbnz	r2, 80018ec <__swsetup_r+0xa4>
 80018da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80018de:	d1c5      	bne.n	800186c <__swsetup_r+0x24>
 80018e0:	bd38      	pop	{r3, r4, r5, pc}
 80018e2:	0799      	lsls	r1, r3, #30
 80018e4:	bf58      	it	pl
 80018e6:	6962      	ldrpl	r2, [r4, #20]
 80018e8:	60a2      	str	r2, [r4, #8]
 80018ea:	e7f4      	b.n	80018d6 <__swsetup_r+0x8e>
 80018ec:	2000      	movs	r0, #0
 80018ee:	e7f7      	b.n	80018e0 <__swsetup_r+0x98>
 80018f0:	20000018 	.word	0x20000018

080018f4 <memset>:
 80018f4:	4402      	add	r2, r0
 80018f6:	4603      	mov	r3, r0
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d100      	bne.n	80018fe <memset+0xa>
 80018fc:	4770      	bx	lr
 80018fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001902:	e7f9      	b.n	80018f8 <memset+0x4>

08001904 <_close_r>:
 8001904:	b538      	push	{r3, r4, r5, lr}
 8001906:	4d06      	ldr	r5, [pc, #24]	@ (8001920 <_close_r+0x1c>)
 8001908:	2300      	movs	r3, #0
 800190a:	4604      	mov	r4, r0
 800190c:	4608      	mov	r0, r1
 800190e:	602b      	str	r3, [r5, #0]
 8001910:	f7ff fb44 	bl	8000f9c <_close>
 8001914:	1c43      	adds	r3, r0, #1
 8001916:	d102      	bne.n	800191e <_close_r+0x1a>
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	b103      	cbz	r3, 800191e <_close_r+0x1a>
 800191c:	6023      	str	r3, [r4, #0]
 800191e:	bd38      	pop	{r3, r4, r5, pc}
 8001920:	200001d0 	.word	0x200001d0

08001924 <_lseek_r>:
 8001924:	b538      	push	{r3, r4, r5, lr}
 8001926:	4d07      	ldr	r5, [pc, #28]	@ (8001944 <_lseek_r+0x20>)
 8001928:	4604      	mov	r4, r0
 800192a:	4608      	mov	r0, r1
 800192c:	4611      	mov	r1, r2
 800192e:	2200      	movs	r2, #0
 8001930:	602a      	str	r2, [r5, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	f7ff fb59 	bl	8000fea <_lseek>
 8001938:	1c43      	adds	r3, r0, #1
 800193a:	d102      	bne.n	8001942 <_lseek_r+0x1e>
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	b103      	cbz	r3, 8001942 <_lseek_r+0x1e>
 8001940:	6023      	str	r3, [r4, #0]
 8001942:	bd38      	pop	{r3, r4, r5, pc}
 8001944:	200001d0 	.word	0x200001d0

08001948 <_read_r>:
 8001948:	b538      	push	{r3, r4, r5, lr}
 800194a:	4d07      	ldr	r5, [pc, #28]	@ (8001968 <_read_r+0x20>)
 800194c:	4604      	mov	r4, r0
 800194e:	4608      	mov	r0, r1
 8001950:	4611      	mov	r1, r2
 8001952:	2200      	movs	r2, #0
 8001954:	602a      	str	r2, [r5, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	f7ff fae7 	bl	8000f2a <_read>
 800195c:	1c43      	adds	r3, r0, #1
 800195e:	d102      	bne.n	8001966 <_read_r+0x1e>
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	b103      	cbz	r3, 8001966 <_read_r+0x1e>
 8001964:	6023      	str	r3, [r4, #0]
 8001966:	bd38      	pop	{r3, r4, r5, pc}
 8001968:	200001d0 	.word	0x200001d0

0800196c <_write_r>:
 800196c:	b538      	push	{r3, r4, r5, lr}
 800196e:	4d07      	ldr	r5, [pc, #28]	@ (800198c <_write_r+0x20>)
 8001970:	4604      	mov	r4, r0
 8001972:	4608      	mov	r0, r1
 8001974:	4611      	mov	r1, r2
 8001976:	2200      	movs	r2, #0
 8001978:	602a      	str	r2, [r5, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	f7ff faf2 	bl	8000f64 <_write>
 8001980:	1c43      	adds	r3, r0, #1
 8001982:	d102      	bne.n	800198a <_write_r+0x1e>
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	b103      	cbz	r3, 800198a <_write_r+0x1e>
 8001988:	6023      	str	r3, [r4, #0]
 800198a:	bd38      	pop	{r3, r4, r5, pc}
 800198c:	200001d0 	.word	0x200001d0

08001990 <__errno>:
 8001990:	4b01      	ldr	r3, [pc, #4]	@ (8001998 <__errno+0x8>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000018 	.word	0x20000018

0800199c <__libc_init_array>:
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	4d0d      	ldr	r5, [pc, #52]	@ (80019d4 <__libc_init_array+0x38>)
 80019a0:	4c0d      	ldr	r4, [pc, #52]	@ (80019d8 <__libc_init_array+0x3c>)
 80019a2:	1b64      	subs	r4, r4, r5
 80019a4:	10a4      	asrs	r4, r4, #2
 80019a6:	2600      	movs	r6, #0
 80019a8:	42a6      	cmp	r6, r4
 80019aa:	d109      	bne.n	80019c0 <__libc_init_array+0x24>
 80019ac:	4d0b      	ldr	r5, [pc, #44]	@ (80019dc <__libc_init_array+0x40>)
 80019ae:	4c0c      	ldr	r4, [pc, #48]	@ (80019e0 <__libc_init_array+0x44>)
 80019b0:	f000 fd22 	bl	80023f8 <_init>
 80019b4:	1b64      	subs	r4, r4, r5
 80019b6:	10a4      	asrs	r4, r4, #2
 80019b8:	2600      	movs	r6, #0
 80019ba:	42a6      	cmp	r6, r4
 80019bc:	d105      	bne.n	80019ca <__libc_init_array+0x2e>
 80019be:	bd70      	pop	{r4, r5, r6, pc}
 80019c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c4:	4798      	blx	r3
 80019c6:	3601      	adds	r6, #1
 80019c8:	e7ee      	b.n	80019a8 <__libc_init_array+0xc>
 80019ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ce:	4798      	blx	r3
 80019d0:	3601      	adds	r6, #1
 80019d2:	e7f2      	b.n	80019ba <__libc_init_array+0x1e>
 80019d4:	08002494 	.word	0x08002494
 80019d8:	08002494 	.word	0x08002494
 80019dc:	08002494 	.word	0x08002494
 80019e0:	08002498 	.word	0x08002498

080019e4 <__retarget_lock_init_recursive>:
 80019e4:	4770      	bx	lr

080019e6 <__retarget_lock_acquire_recursive>:
 80019e6:	4770      	bx	lr

080019e8 <__retarget_lock_release_recursive>:
 80019e8:	4770      	bx	lr
	...

080019ec <_free_r>:
 80019ec:	b538      	push	{r3, r4, r5, lr}
 80019ee:	4605      	mov	r5, r0
 80019f0:	2900      	cmp	r1, #0
 80019f2:	d041      	beq.n	8001a78 <_free_r+0x8c>
 80019f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019f8:	1f0c      	subs	r4, r1, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bfb8      	it	lt
 80019fe:	18e4      	addlt	r4, r4, r3
 8001a00:	f000 f8e0 	bl	8001bc4 <__malloc_lock>
 8001a04:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <_free_r+0x90>)
 8001a06:	6813      	ldr	r3, [r2, #0]
 8001a08:	b933      	cbnz	r3, 8001a18 <_free_r+0x2c>
 8001a0a:	6063      	str	r3, [r4, #4]
 8001a0c:	6014      	str	r4, [r2, #0]
 8001a0e:	4628      	mov	r0, r5
 8001a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a14:	f000 b8dc 	b.w	8001bd0 <__malloc_unlock>
 8001a18:	42a3      	cmp	r3, r4
 8001a1a:	d908      	bls.n	8001a2e <_free_r+0x42>
 8001a1c:	6820      	ldr	r0, [r4, #0]
 8001a1e:	1821      	adds	r1, r4, r0
 8001a20:	428b      	cmp	r3, r1
 8001a22:	bf01      	itttt	eq
 8001a24:	6819      	ldreq	r1, [r3, #0]
 8001a26:	685b      	ldreq	r3, [r3, #4]
 8001a28:	1809      	addeq	r1, r1, r0
 8001a2a:	6021      	streq	r1, [r4, #0]
 8001a2c:	e7ed      	b.n	8001a0a <_free_r+0x1e>
 8001a2e:	461a      	mov	r2, r3
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	b10b      	cbz	r3, 8001a38 <_free_r+0x4c>
 8001a34:	42a3      	cmp	r3, r4
 8001a36:	d9fa      	bls.n	8001a2e <_free_r+0x42>
 8001a38:	6811      	ldr	r1, [r2, #0]
 8001a3a:	1850      	adds	r0, r2, r1
 8001a3c:	42a0      	cmp	r0, r4
 8001a3e:	d10b      	bne.n	8001a58 <_free_r+0x6c>
 8001a40:	6820      	ldr	r0, [r4, #0]
 8001a42:	4401      	add	r1, r0
 8001a44:	1850      	adds	r0, r2, r1
 8001a46:	4283      	cmp	r3, r0
 8001a48:	6011      	str	r1, [r2, #0]
 8001a4a:	d1e0      	bne.n	8001a0e <_free_r+0x22>
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	6053      	str	r3, [r2, #4]
 8001a52:	4408      	add	r0, r1
 8001a54:	6010      	str	r0, [r2, #0]
 8001a56:	e7da      	b.n	8001a0e <_free_r+0x22>
 8001a58:	d902      	bls.n	8001a60 <_free_r+0x74>
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	602b      	str	r3, [r5, #0]
 8001a5e:	e7d6      	b.n	8001a0e <_free_r+0x22>
 8001a60:	6820      	ldr	r0, [r4, #0]
 8001a62:	1821      	adds	r1, r4, r0
 8001a64:	428b      	cmp	r3, r1
 8001a66:	bf04      	itt	eq
 8001a68:	6819      	ldreq	r1, [r3, #0]
 8001a6a:	685b      	ldreq	r3, [r3, #4]
 8001a6c:	6063      	str	r3, [r4, #4]
 8001a6e:	bf04      	itt	eq
 8001a70:	1809      	addeq	r1, r1, r0
 8001a72:	6021      	streq	r1, [r4, #0]
 8001a74:	6054      	str	r4, [r2, #4]
 8001a76:	e7ca      	b.n	8001a0e <_free_r+0x22>
 8001a78:	bd38      	pop	{r3, r4, r5, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200001dc 	.word	0x200001dc

08001a80 <sbrk_aligned>:
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	4e0f      	ldr	r6, [pc, #60]	@ (8001ac0 <sbrk_aligned+0x40>)
 8001a84:	460c      	mov	r4, r1
 8001a86:	6831      	ldr	r1, [r6, #0]
 8001a88:	4605      	mov	r5, r0
 8001a8a:	b911      	cbnz	r1, 8001a92 <sbrk_aligned+0x12>
 8001a8c:	f000 fca4 	bl	80023d8 <_sbrk_r>
 8001a90:	6030      	str	r0, [r6, #0]
 8001a92:	4621      	mov	r1, r4
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 fc9f 	bl	80023d8 <_sbrk_r>
 8001a9a:	1c43      	adds	r3, r0, #1
 8001a9c:	d103      	bne.n	8001aa6 <sbrk_aligned+0x26>
 8001a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
 8001aa6:	1cc4      	adds	r4, r0, #3
 8001aa8:	f024 0403 	bic.w	r4, r4, #3
 8001aac:	42a0      	cmp	r0, r4
 8001aae:	d0f8      	beq.n	8001aa2 <sbrk_aligned+0x22>
 8001ab0:	1a21      	subs	r1, r4, r0
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f000 fc90 	bl	80023d8 <_sbrk_r>
 8001ab8:	3001      	adds	r0, #1
 8001aba:	d1f2      	bne.n	8001aa2 <sbrk_aligned+0x22>
 8001abc:	e7ef      	b.n	8001a9e <sbrk_aligned+0x1e>
 8001abe:	bf00      	nop
 8001ac0:	200001d8 	.word	0x200001d8

08001ac4 <_malloc_r>:
 8001ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ac8:	1ccd      	adds	r5, r1, #3
 8001aca:	f025 0503 	bic.w	r5, r5, #3
 8001ace:	3508      	adds	r5, #8
 8001ad0:	2d0c      	cmp	r5, #12
 8001ad2:	bf38      	it	cc
 8001ad4:	250c      	movcc	r5, #12
 8001ad6:	2d00      	cmp	r5, #0
 8001ad8:	4606      	mov	r6, r0
 8001ada:	db01      	blt.n	8001ae0 <_malloc_r+0x1c>
 8001adc:	42a9      	cmp	r1, r5
 8001ade:	d904      	bls.n	8001aea <_malloc_r+0x26>
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	6033      	str	r3, [r6, #0]
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001bc0 <_malloc_r+0xfc>
 8001aee:	f000 f869 	bl	8001bc4 <__malloc_lock>
 8001af2:	f8d8 3000 	ldr.w	r3, [r8]
 8001af6:	461c      	mov	r4, r3
 8001af8:	bb44      	cbnz	r4, 8001b4c <_malloc_r+0x88>
 8001afa:	4629      	mov	r1, r5
 8001afc:	4630      	mov	r0, r6
 8001afe:	f7ff ffbf 	bl	8001a80 <sbrk_aligned>
 8001b02:	1c43      	adds	r3, r0, #1
 8001b04:	4604      	mov	r4, r0
 8001b06:	d158      	bne.n	8001bba <_malloc_r+0xf6>
 8001b08:	f8d8 4000 	ldr.w	r4, [r8]
 8001b0c:	4627      	mov	r7, r4
 8001b0e:	2f00      	cmp	r7, #0
 8001b10:	d143      	bne.n	8001b9a <_malloc_r+0xd6>
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d04b      	beq.n	8001bae <_malloc_r+0xea>
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	4639      	mov	r1, r7
 8001b1a:	4630      	mov	r0, r6
 8001b1c:	eb04 0903 	add.w	r9, r4, r3
 8001b20:	f000 fc5a 	bl	80023d8 <_sbrk_r>
 8001b24:	4581      	cmp	r9, r0
 8001b26:	d142      	bne.n	8001bae <_malloc_r+0xea>
 8001b28:	6821      	ldr	r1, [r4, #0]
 8001b2a:	1a6d      	subs	r5, r5, r1
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f7ff ffa6 	bl	8001a80 <sbrk_aligned>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d03a      	beq.n	8001bae <_malloc_r+0xea>
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	442b      	add	r3, r5
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	bb62      	cbnz	r2, 8001ba0 <_malloc_r+0xdc>
 8001b46:	f8c8 7000 	str.w	r7, [r8]
 8001b4a:	e00f      	b.n	8001b6c <_malloc_r+0xa8>
 8001b4c:	6822      	ldr	r2, [r4, #0]
 8001b4e:	1b52      	subs	r2, r2, r5
 8001b50:	d420      	bmi.n	8001b94 <_malloc_r+0xd0>
 8001b52:	2a0b      	cmp	r2, #11
 8001b54:	d917      	bls.n	8001b86 <_malloc_r+0xc2>
 8001b56:	1961      	adds	r1, r4, r5
 8001b58:	42a3      	cmp	r3, r4
 8001b5a:	6025      	str	r5, [r4, #0]
 8001b5c:	bf18      	it	ne
 8001b5e:	6059      	strne	r1, [r3, #4]
 8001b60:	6863      	ldr	r3, [r4, #4]
 8001b62:	bf08      	it	eq
 8001b64:	f8c8 1000 	streq.w	r1, [r8]
 8001b68:	5162      	str	r2, [r4, r5]
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	f000 f82f 	bl	8001bd0 <__malloc_unlock>
 8001b72:	f104 000b 	add.w	r0, r4, #11
 8001b76:	1d23      	adds	r3, r4, #4
 8001b78:	f020 0007 	bic.w	r0, r0, #7
 8001b7c:	1ac2      	subs	r2, r0, r3
 8001b7e:	bf1c      	itt	ne
 8001b80:	1a1b      	subne	r3, r3, r0
 8001b82:	50a3      	strne	r3, [r4, r2]
 8001b84:	e7af      	b.n	8001ae6 <_malloc_r+0x22>
 8001b86:	6862      	ldr	r2, [r4, #4]
 8001b88:	42a3      	cmp	r3, r4
 8001b8a:	bf0c      	ite	eq
 8001b8c:	f8c8 2000 	streq.w	r2, [r8]
 8001b90:	605a      	strne	r2, [r3, #4]
 8001b92:	e7eb      	b.n	8001b6c <_malloc_r+0xa8>
 8001b94:	4623      	mov	r3, r4
 8001b96:	6864      	ldr	r4, [r4, #4]
 8001b98:	e7ae      	b.n	8001af8 <_malloc_r+0x34>
 8001b9a:	463c      	mov	r4, r7
 8001b9c:	687f      	ldr	r7, [r7, #4]
 8001b9e:	e7b6      	b.n	8001b0e <_malloc_r+0x4a>
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	42a3      	cmp	r3, r4
 8001ba6:	d1fb      	bne.n	8001ba0 <_malloc_r+0xdc>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6053      	str	r3, [r2, #4]
 8001bac:	e7de      	b.n	8001b6c <_malloc_r+0xa8>
 8001bae:	230c      	movs	r3, #12
 8001bb0:	6033      	str	r3, [r6, #0]
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f000 f80c 	bl	8001bd0 <__malloc_unlock>
 8001bb8:	e794      	b.n	8001ae4 <_malloc_r+0x20>
 8001bba:	6005      	str	r5, [r0, #0]
 8001bbc:	e7d6      	b.n	8001b6c <_malloc_r+0xa8>
 8001bbe:	bf00      	nop
 8001bc0:	200001dc 	.word	0x200001dc

08001bc4 <__malloc_lock>:
 8001bc4:	4801      	ldr	r0, [pc, #4]	@ (8001bcc <__malloc_lock+0x8>)
 8001bc6:	f7ff bf0e 	b.w	80019e6 <__retarget_lock_acquire_recursive>
 8001bca:	bf00      	nop
 8001bcc:	200001d4 	.word	0x200001d4

08001bd0 <__malloc_unlock>:
 8001bd0:	4801      	ldr	r0, [pc, #4]	@ (8001bd8 <__malloc_unlock+0x8>)
 8001bd2:	f7ff bf09 	b.w	80019e8 <__retarget_lock_release_recursive>
 8001bd6:	bf00      	nop
 8001bd8:	200001d4 	.word	0x200001d4

08001bdc <__sfputc_r>:
 8001bdc:	6893      	ldr	r3, [r2, #8]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	b410      	push	{r4}
 8001be4:	6093      	str	r3, [r2, #8]
 8001be6:	da08      	bge.n	8001bfa <__sfputc_r+0x1e>
 8001be8:	6994      	ldr	r4, [r2, #24]
 8001bea:	42a3      	cmp	r3, r4
 8001bec:	db01      	blt.n	8001bf2 <__sfputc_r+0x16>
 8001bee:	290a      	cmp	r1, #10
 8001bf0:	d103      	bne.n	8001bfa <__sfputc_r+0x1e>
 8001bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bf6:	f7ff bde8 	b.w	80017ca <__swbuf_r>
 8001bfa:	6813      	ldr	r3, [r2, #0]
 8001bfc:	1c58      	adds	r0, r3, #1
 8001bfe:	6010      	str	r0, [r2, #0]
 8001c00:	7019      	strb	r1, [r3, #0]
 8001c02:	4608      	mov	r0, r1
 8001c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <__sfputs_r>:
 8001c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0c:	4606      	mov	r6, r0
 8001c0e:	460f      	mov	r7, r1
 8001c10:	4614      	mov	r4, r2
 8001c12:	18d5      	adds	r5, r2, r3
 8001c14:	42ac      	cmp	r4, r5
 8001c16:	d101      	bne.n	8001c1c <__sfputs_r+0x12>
 8001c18:	2000      	movs	r0, #0
 8001c1a:	e007      	b.n	8001c2c <__sfputs_r+0x22>
 8001c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c20:	463a      	mov	r2, r7
 8001c22:	4630      	mov	r0, r6
 8001c24:	f7ff ffda 	bl	8001bdc <__sfputc_r>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d1f3      	bne.n	8001c14 <__sfputs_r+0xa>
 8001c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c30 <_vfiprintf_r>:
 8001c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c34:	460d      	mov	r5, r1
 8001c36:	b09d      	sub	sp, #116	@ 0x74
 8001c38:	4614      	mov	r4, r2
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	4606      	mov	r6, r0
 8001c3e:	b118      	cbz	r0, 8001c48 <_vfiprintf_r+0x18>
 8001c40:	6a03      	ldr	r3, [r0, #32]
 8001c42:	b90b      	cbnz	r3, 8001c48 <_vfiprintf_r+0x18>
 8001c44:	f7ff fcd8 	bl	80015f8 <__sinit>
 8001c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c4a:	07d9      	lsls	r1, r3, #31
 8001c4c:	d405      	bmi.n	8001c5a <_vfiprintf_r+0x2a>
 8001c4e:	89ab      	ldrh	r3, [r5, #12]
 8001c50:	059a      	lsls	r2, r3, #22
 8001c52:	d402      	bmi.n	8001c5a <_vfiprintf_r+0x2a>
 8001c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c56:	f7ff fec6 	bl	80019e6 <__retarget_lock_acquire_recursive>
 8001c5a:	89ab      	ldrh	r3, [r5, #12]
 8001c5c:	071b      	lsls	r3, r3, #28
 8001c5e:	d501      	bpl.n	8001c64 <_vfiprintf_r+0x34>
 8001c60:	692b      	ldr	r3, [r5, #16]
 8001c62:	b99b      	cbnz	r3, 8001c8c <_vfiprintf_r+0x5c>
 8001c64:	4629      	mov	r1, r5
 8001c66:	4630      	mov	r0, r6
 8001c68:	f7ff fdee 	bl	8001848 <__swsetup_r>
 8001c6c:	b170      	cbz	r0, 8001c8c <_vfiprintf_r+0x5c>
 8001c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c70:	07dc      	lsls	r4, r3, #31
 8001c72:	d504      	bpl.n	8001c7e <_vfiprintf_r+0x4e>
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	b01d      	add	sp, #116	@ 0x74
 8001c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c7e:	89ab      	ldrh	r3, [r5, #12]
 8001c80:	0598      	lsls	r0, r3, #22
 8001c82:	d4f7      	bmi.n	8001c74 <_vfiprintf_r+0x44>
 8001c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c86:	f7ff feaf 	bl	80019e8 <__retarget_lock_release_recursive>
 8001c8a:	e7f3      	b.n	8001c74 <_vfiprintf_r+0x44>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c90:	2320      	movs	r3, #32
 8001c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c9a:	2330      	movs	r3, #48	@ 0x30
 8001c9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001e4c <_vfiprintf_r+0x21c>
 8001ca0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ca4:	f04f 0901 	mov.w	r9, #1
 8001ca8:	4623      	mov	r3, r4
 8001caa:	469a      	mov	sl, r3
 8001cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cb0:	b10a      	cbz	r2, 8001cb6 <_vfiprintf_r+0x86>
 8001cb2:	2a25      	cmp	r2, #37	@ 0x25
 8001cb4:	d1f9      	bne.n	8001caa <_vfiprintf_r+0x7a>
 8001cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8001cba:	d00b      	beq.n	8001cd4 <_vfiprintf_r+0xa4>
 8001cbc:	465b      	mov	r3, fp
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	f7ff ffa1 	bl	8001c0a <__sfputs_r>
 8001cc8:	3001      	adds	r0, #1
 8001cca:	f000 80a7 	beq.w	8001e1c <_vfiprintf_r+0x1ec>
 8001cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001cd0:	445a      	add	r2, fp
 8001cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8001cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 809f 	beq.w	8001e1c <_vfiprintf_r+0x1ec>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ce8:	f10a 0a01 	add.w	sl, sl, #1
 8001cec:	9304      	str	r3, [sp, #16]
 8001cee:	9307      	str	r3, [sp, #28]
 8001cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	2205      	movs	r2, #5
 8001cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cfe:	4853      	ldr	r0, [pc, #332]	@ (8001e4c <_vfiprintf_r+0x21c>)
 8001d00:	f7fe fa8e 	bl	8000220 <memchr>
 8001d04:	9a04      	ldr	r2, [sp, #16]
 8001d06:	b9d8      	cbnz	r0, 8001d40 <_vfiprintf_r+0x110>
 8001d08:	06d1      	lsls	r1, r2, #27
 8001d0a:	bf44      	itt	mi
 8001d0c:	2320      	movmi	r3, #32
 8001d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d12:	0713      	lsls	r3, r2, #28
 8001d14:	bf44      	itt	mi
 8001d16:	232b      	movmi	r3, #43	@ 0x2b
 8001d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8001d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d22:	d015      	beq.n	8001d50 <_vfiprintf_r+0x120>
 8001d24:	9a07      	ldr	r2, [sp, #28]
 8001d26:	4654      	mov	r4, sl
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f04f 0c0a 	mov.w	ip, #10
 8001d2e:	4621      	mov	r1, r4
 8001d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d34:	3b30      	subs	r3, #48	@ 0x30
 8001d36:	2b09      	cmp	r3, #9
 8001d38:	d94b      	bls.n	8001dd2 <_vfiprintf_r+0x1a2>
 8001d3a:	b1b0      	cbz	r0, 8001d6a <_vfiprintf_r+0x13a>
 8001d3c:	9207      	str	r2, [sp, #28]
 8001d3e:	e014      	b.n	8001d6a <_vfiprintf_r+0x13a>
 8001d40:	eba0 0308 	sub.w	r3, r0, r8
 8001d44:	fa09 f303 	lsl.w	r3, r9, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	9304      	str	r3, [sp, #16]
 8001d4c:	46a2      	mov	sl, r4
 8001d4e:	e7d2      	b.n	8001cf6 <_vfiprintf_r+0xc6>
 8001d50:	9b03      	ldr	r3, [sp, #12]
 8001d52:	1d19      	adds	r1, r3, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	9103      	str	r1, [sp, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bfbb      	ittet	lt
 8001d5c:	425b      	neglt	r3, r3
 8001d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8001d62:	9307      	strge	r3, [sp, #28]
 8001d64:	9307      	strlt	r3, [sp, #28]
 8001d66:	bfb8      	it	lt
 8001d68:	9204      	strlt	r2, [sp, #16]
 8001d6a:	7823      	ldrb	r3, [r4, #0]
 8001d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d6e:	d10a      	bne.n	8001d86 <_vfiprintf_r+0x156>
 8001d70:	7863      	ldrb	r3, [r4, #1]
 8001d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d74:	d132      	bne.n	8001ddc <_vfiprintf_r+0x1ac>
 8001d76:	9b03      	ldr	r3, [sp, #12]
 8001d78:	1d1a      	adds	r2, r3, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	9203      	str	r2, [sp, #12]
 8001d7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d82:	3402      	adds	r4, #2
 8001d84:	9305      	str	r3, [sp, #20]
 8001d86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001e5c <_vfiprintf_r+0x22c>
 8001d8a:	7821      	ldrb	r1, [r4, #0]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	4650      	mov	r0, sl
 8001d90:	f7fe fa46 	bl	8000220 <memchr>
 8001d94:	b138      	cbz	r0, 8001da6 <_vfiprintf_r+0x176>
 8001d96:	9b04      	ldr	r3, [sp, #16]
 8001d98:	eba0 000a 	sub.w	r0, r0, sl
 8001d9c:	2240      	movs	r2, #64	@ 0x40
 8001d9e:	4082      	lsls	r2, r0
 8001da0:	4313      	orrs	r3, r2
 8001da2:	3401      	adds	r4, #1
 8001da4:	9304      	str	r3, [sp, #16]
 8001da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001daa:	4829      	ldr	r0, [pc, #164]	@ (8001e50 <_vfiprintf_r+0x220>)
 8001dac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001db0:	2206      	movs	r2, #6
 8001db2:	f7fe fa35 	bl	8000220 <memchr>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d03f      	beq.n	8001e3a <_vfiprintf_r+0x20a>
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <_vfiprintf_r+0x224>)
 8001dbc:	bb1b      	cbnz	r3, 8001e06 <_vfiprintf_r+0x1d6>
 8001dbe:	9b03      	ldr	r3, [sp, #12]
 8001dc0:	3307      	adds	r3, #7
 8001dc2:	f023 0307 	bic.w	r3, r3, #7
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	9303      	str	r3, [sp, #12]
 8001dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001dcc:	443b      	add	r3, r7
 8001dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8001dd0:	e76a      	b.n	8001ca8 <_vfiprintf_r+0x78>
 8001dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	2001      	movs	r0, #1
 8001dda:	e7a8      	b.n	8001d2e <_vfiprintf_r+0xfe>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	3401      	adds	r4, #1
 8001de0:	9305      	str	r3, [sp, #20]
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 0c0a 	mov.w	ip, #10
 8001de8:	4620      	mov	r0, r4
 8001dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dee:	3a30      	subs	r2, #48	@ 0x30
 8001df0:	2a09      	cmp	r2, #9
 8001df2:	d903      	bls.n	8001dfc <_vfiprintf_r+0x1cc>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0c6      	beq.n	8001d86 <_vfiprintf_r+0x156>
 8001df8:	9105      	str	r1, [sp, #20]
 8001dfa:	e7c4      	b.n	8001d86 <_vfiprintf_r+0x156>
 8001dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e00:	4604      	mov	r4, r0
 8001e02:	2301      	movs	r3, #1
 8001e04:	e7f0      	b.n	8001de8 <_vfiprintf_r+0x1b8>
 8001e06:	ab03      	add	r3, sp, #12
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	462a      	mov	r2, r5
 8001e0c:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <_vfiprintf_r+0x228>)
 8001e0e:	a904      	add	r1, sp, #16
 8001e10:	4630      	mov	r0, r6
 8001e12:	f3af 8000 	nop.w
 8001e16:	4607      	mov	r7, r0
 8001e18:	1c78      	adds	r0, r7, #1
 8001e1a:	d1d6      	bne.n	8001dca <_vfiprintf_r+0x19a>
 8001e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e1e:	07d9      	lsls	r1, r3, #31
 8001e20:	d405      	bmi.n	8001e2e <_vfiprintf_r+0x1fe>
 8001e22:	89ab      	ldrh	r3, [r5, #12]
 8001e24:	059a      	lsls	r2, r3, #22
 8001e26:	d402      	bmi.n	8001e2e <_vfiprintf_r+0x1fe>
 8001e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e2a:	f7ff fddd 	bl	80019e8 <__retarget_lock_release_recursive>
 8001e2e:	89ab      	ldrh	r3, [r5, #12]
 8001e30:	065b      	lsls	r3, r3, #25
 8001e32:	f53f af1f 	bmi.w	8001c74 <_vfiprintf_r+0x44>
 8001e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001e38:	e71e      	b.n	8001c78 <_vfiprintf_r+0x48>
 8001e3a:	ab03      	add	r3, sp, #12
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	462a      	mov	r2, r5
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <_vfiprintf_r+0x228>)
 8001e42:	a904      	add	r1, sp, #16
 8001e44:	4630      	mov	r0, r6
 8001e46:	f000 f879 	bl	8001f3c <_printf_i>
 8001e4a:	e7e4      	b.n	8001e16 <_vfiprintf_r+0x1e6>
 8001e4c:	08002457 	.word	0x08002457
 8001e50:	08002461 	.word	0x08002461
 8001e54:	00000000 	.word	0x00000000
 8001e58:	08001c0b 	.word	0x08001c0b
 8001e5c:	0800245d 	.word	0x0800245d

08001e60 <_printf_common>:
 8001e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e64:	4616      	mov	r6, r2
 8001e66:	4698      	mov	r8, r3
 8001e68:	688a      	ldr	r2, [r1, #8]
 8001e6a:	690b      	ldr	r3, [r1, #16]
 8001e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bfb8      	it	lt
 8001e74:	4613      	movlt	r3, r2
 8001e76:	6033      	str	r3, [r6, #0]
 8001e78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e7c:	4607      	mov	r7, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	b10a      	cbz	r2, 8001e86 <_printf_common+0x26>
 8001e82:	3301      	adds	r3, #1
 8001e84:	6033      	str	r3, [r6, #0]
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	0699      	lsls	r1, r3, #26
 8001e8a:	bf42      	ittt	mi
 8001e8c:	6833      	ldrmi	r3, [r6, #0]
 8001e8e:	3302      	addmi	r3, #2
 8001e90:	6033      	strmi	r3, [r6, #0]
 8001e92:	6825      	ldr	r5, [r4, #0]
 8001e94:	f015 0506 	ands.w	r5, r5, #6
 8001e98:	d106      	bne.n	8001ea8 <_printf_common+0x48>
 8001e9a:	f104 0a19 	add.w	sl, r4, #25
 8001e9e:	68e3      	ldr	r3, [r4, #12]
 8001ea0:	6832      	ldr	r2, [r6, #0]
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	42ab      	cmp	r3, r5
 8001ea6:	dc26      	bgt.n	8001ef6 <_printf_common+0x96>
 8001ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001eac:	6822      	ldr	r2, [r4, #0]
 8001eae:	3b00      	subs	r3, #0
 8001eb0:	bf18      	it	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	0692      	lsls	r2, r2, #26
 8001eb6:	d42b      	bmi.n	8001f10 <_printf_common+0xb0>
 8001eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ebc:	4641      	mov	r1, r8
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	47c8      	blx	r9
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	d01e      	beq.n	8001f04 <_printf_common+0xa4>
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	6922      	ldr	r2, [r4, #16]
 8001eca:	f003 0306 	and.w	r3, r3, #6
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf02      	ittt	eq
 8001ed2:	68e5      	ldreq	r5, [r4, #12]
 8001ed4:	6833      	ldreq	r3, [r6, #0]
 8001ed6:	1aed      	subeq	r5, r5, r3
 8001ed8:	68a3      	ldr	r3, [r4, #8]
 8001eda:	bf0c      	ite	eq
 8001edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ee0:	2500      	movne	r5, #0
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	bfc4      	itt	gt
 8001ee6:	1a9b      	subgt	r3, r3, r2
 8001ee8:	18ed      	addgt	r5, r5, r3
 8001eea:	2600      	movs	r6, #0
 8001eec:	341a      	adds	r4, #26
 8001eee:	42b5      	cmp	r5, r6
 8001ef0:	d11a      	bne.n	8001f28 <_printf_common+0xc8>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	e008      	b.n	8001f08 <_printf_common+0xa8>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4652      	mov	r2, sl
 8001efa:	4641      	mov	r1, r8
 8001efc:	4638      	mov	r0, r7
 8001efe:	47c8      	blx	r9
 8001f00:	3001      	adds	r0, #1
 8001f02:	d103      	bne.n	8001f0c <_printf_common+0xac>
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f0c:	3501      	adds	r5, #1
 8001f0e:	e7c6      	b.n	8001e9e <_printf_common+0x3e>
 8001f10:	18e1      	adds	r1, r4, r3
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	2030      	movs	r0, #48	@ 0x30
 8001f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f1a:	4422      	add	r2, r4
 8001f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f24:	3302      	adds	r3, #2
 8001f26:	e7c7      	b.n	8001eb8 <_printf_common+0x58>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	4638      	mov	r0, r7
 8001f30:	47c8      	blx	r9
 8001f32:	3001      	adds	r0, #1
 8001f34:	d0e6      	beq.n	8001f04 <_printf_common+0xa4>
 8001f36:	3601      	adds	r6, #1
 8001f38:	e7d9      	b.n	8001eee <_printf_common+0x8e>
	...

08001f3c <_printf_i>:
 8001f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f40:	7e0f      	ldrb	r7, [r1, #24]
 8001f42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f44:	2f78      	cmp	r7, #120	@ 0x78
 8001f46:	4691      	mov	r9, r2
 8001f48:	4680      	mov	r8, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	469a      	mov	sl, r3
 8001f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f52:	d807      	bhi.n	8001f64 <_printf_i+0x28>
 8001f54:	2f62      	cmp	r7, #98	@ 0x62
 8001f56:	d80a      	bhi.n	8001f6e <_printf_i+0x32>
 8001f58:	2f00      	cmp	r7, #0
 8001f5a:	f000 80d1 	beq.w	8002100 <_printf_i+0x1c4>
 8001f5e:	2f58      	cmp	r7, #88	@ 0x58
 8001f60:	f000 80b8 	beq.w	80020d4 <_printf_i+0x198>
 8001f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f6c:	e03a      	b.n	8001fe4 <_printf_i+0xa8>
 8001f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f72:	2b15      	cmp	r3, #21
 8001f74:	d8f6      	bhi.n	8001f64 <_printf_i+0x28>
 8001f76:	a101      	add	r1, pc, #4	@ (adr r1, 8001f7c <_printf_i+0x40>)
 8001f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f7c:	08001fd5 	.word	0x08001fd5
 8001f80:	08001fe9 	.word	0x08001fe9
 8001f84:	08001f65 	.word	0x08001f65
 8001f88:	08001f65 	.word	0x08001f65
 8001f8c:	08001f65 	.word	0x08001f65
 8001f90:	08001f65 	.word	0x08001f65
 8001f94:	08001fe9 	.word	0x08001fe9
 8001f98:	08001f65 	.word	0x08001f65
 8001f9c:	08001f65 	.word	0x08001f65
 8001fa0:	08001f65 	.word	0x08001f65
 8001fa4:	08001f65 	.word	0x08001f65
 8001fa8:	080020e7 	.word	0x080020e7
 8001fac:	08002013 	.word	0x08002013
 8001fb0:	080020a1 	.word	0x080020a1
 8001fb4:	08001f65 	.word	0x08001f65
 8001fb8:	08001f65 	.word	0x08001f65
 8001fbc:	08002109 	.word	0x08002109
 8001fc0:	08001f65 	.word	0x08001f65
 8001fc4:	08002013 	.word	0x08002013
 8001fc8:	08001f65 	.word	0x08001f65
 8001fcc:	08001f65 	.word	0x08001f65
 8001fd0:	080020a9 	.word	0x080020a9
 8001fd4:	6833      	ldr	r3, [r6, #0]
 8001fd6:	1d1a      	adds	r2, r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6032      	str	r2, [r6, #0]
 8001fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e09c      	b.n	8002122 <_printf_i+0x1e6>
 8001fe8:	6833      	ldr	r3, [r6, #0]
 8001fea:	6820      	ldr	r0, [r4, #0]
 8001fec:	1d19      	adds	r1, r3, #4
 8001fee:	6031      	str	r1, [r6, #0]
 8001ff0:	0606      	lsls	r6, r0, #24
 8001ff2:	d501      	bpl.n	8001ff8 <_printf_i+0xbc>
 8001ff4:	681d      	ldr	r5, [r3, #0]
 8001ff6:	e003      	b.n	8002000 <_printf_i+0xc4>
 8001ff8:	0645      	lsls	r5, r0, #25
 8001ffa:	d5fb      	bpl.n	8001ff4 <_printf_i+0xb8>
 8001ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002000:	2d00      	cmp	r5, #0
 8002002:	da03      	bge.n	800200c <_printf_i+0xd0>
 8002004:	232d      	movs	r3, #45	@ 0x2d
 8002006:	426d      	negs	r5, r5
 8002008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800200c:	4858      	ldr	r0, [pc, #352]	@ (8002170 <_printf_i+0x234>)
 800200e:	230a      	movs	r3, #10
 8002010:	e011      	b.n	8002036 <_printf_i+0xfa>
 8002012:	6821      	ldr	r1, [r4, #0]
 8002014:	6833      	ldr	r3, [r6, #0]
 8002016:	0608      	lsls	r0, r1, #24
 8002018:	f853 5b04 	ldr.w	r5, [r3], #4
 800201c:	d402      	bmi.n	8002024 <_printf_i+0xe8>
 800201e:	0649      	lsls	r1, r1, #25
 8002020:	bf48      	it	mi
 8002022:	b2ad      	uxthmi	r5, r5
 8002024:	2f6f      	cmp	r7, #111	@ 0x6f
 8002026:	4852      	ldr	r0, [pc, #328]	@ (8002170 <_printf_i+0x234>)
 8002028:	6033      	str	r3, [r6, #0]
 800202a:	bf14      	ite	ne
 800202c:	230a      	movne	r3, #10
 800202e:	2308      	moveq	r3, #8
 8002030:	2100      	movs	r1, #0
 8002032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002036:	6866      	ldr	r6, [r4, #4]
 8002038:	60a6      	str	r6, [r4, #8]
 800203a:	2e00      	cmp	r6, #0
 800203c:	db05      	blt.n	800204a <_printf_i+0x10e>
 800203e:	6821      	ldr	r1, [r4, #0]
 8002040:	432e      	orrs	r6, r5
 8002042:	f021 0104 	bic.w	r1, r1, #4
 8002046:	6021      	str	r1, [r4, #0]
 8002048:	d04b      	beq.n	80020e2 <_printf_i+0x1a6>
 800204a:	4616      	mov	r6, r2
 800204c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002050:	fb03 5711 	mls	r7, r3, r1, r5
 8002054:	5dc7      	ldrb	r7, [r0, r7]
 8002056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800205a:	462f      	mov	r7, r5
 800205c:	42bb      	cmp	r3, r7
 800205e:	460d      	mov	r5, r1
 8002060:	d9f4      	bls.n	800204c <_printf_i+0x110>
 8002062:	2b08      	cmp	r3, #8
 8002064:	d10b      	bne.n	800207e <_printf_i+0x142>
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	07df      	lsls	r7, r3, #31
 800206a:	d508      	bpl.n	800207e <_printf_i+0x142>
 800206c:	6923      	ldr	r3, [r4, #16]
 800206e:	6861      	ldr	r1, [r4, #4]
 8002070:	4299      	cmp	r1, r3
 8002072:	bfde      	ittt	le
 8002074:	2330      	movle	r3, #48	@ 0x30
 8002076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800207a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800207e:	1b92      	subs	r2, r2, r6
 8002080:	6122      	str	r2, [r4, #16]
 8002082:	f8cd a000 	str.w	sl, [sp]
 8002086:	464b      	mov	r3, r9
 8002088:	aa03      	add	r2, sp, #12
 800208a:	4621      	mov	r1, r4
 800208c:	4640      	mov	r0, r8
 800208e:	f7ff fee7 	bl	8001e60 <_printf_common>
 8002092:	3001      	adds	r0, #1
 8002094:	d14a      	bne.n	800212c <_printf_i+0x1f0>
 8002096:	f04f 30ff 	mov.w	r0, #4294967295
 800209a:	b004      	add	sp, #16
 800209c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	f043 0320 	orr.w	r3, r3, #32
 80020a6:	6023      	str	r3, [r4, #0]
 80020a8:	4832      	ldr	r0, [pc, #200]	@ (8002174 <_printf_i+0x238>)
 80020aa:	2778      	movs	r7, #120	@ 0x78
 80020ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	6831      	ldr	r1, [r6, #0]
 80020b4:	061f      	lsls	r7, r3, #24
 80020b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80020ba:	d402      	bmi.n	80020c2 <_printf_i+0x186>
 80020bc:	065f      	lsls	r7, r3, #25
 80020be:	bf48      	it	mi
 80020c0:	b2ad      	uxthmi	r5, r5
 80020c2:	6031      	str	r1, [r6, #0]
 80020c4:	07d9      	lsls	r1, r3, #31
 80020c6:	bf44      	itt	mi
 80020c8:	f043 0320 	orrmi.w	r3, r3, #32
 80020cc:	6023      	strmi	r3, [r4, #0]
 80020ce:	b11d      	cbz	r5, 80020d8 <_printf_i+0x19c>
 80020d0:	2310      	movs	r3, #16
 80020d2:	e7ad      	b.n	8002030 <_printf_i+0xf4>
 80020d4:	4826      	ldr	r0, [pc, #152]	@ (8002170 <_printf_i+0x234>)
 80020d6:	e7e9      	b.n	80020ac <_printf_i+0x170>
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	f023 0320 	bic.w	r3, r3, #32
 80020de:	6023      	str	r3, [r4, #0]
 80020e0:	e7f6      	b.n	80020d0 <_printf_i+0x194>
 80020e2:	4616      	mov	r6, r2
 80020e4:	e7bd      	b.n	8002062 <_printf_i+0x126>
 80020e6:	6833      	ldr	r3, [r6, #0]
 80020e8:	6825      	ldr	r5, [r4, #0]
 80020ea:	6961      	ldr	r1, [r4, #20]
 80020ec:	1d18      	adds	r0, r3, #4
 80020ee:	6030      	str	r0, [r6, #0]
 80020f0:	062e      	lsls	r6, r5, #24
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	d501      	bpl.n	80020fa <_printf_i+0x1be>
 80020f6:	6019      	str	r1, [r3, #0]
 80020f8:	e002      	b.n	8002100 <_printf_i+0x1c4>
 80020fa:	0668      	lsls	r0, r5, #25
 80020fc:	d5fb      	bpl.n	80020f6 <_printf_i+0x1ba>
 80020fe:	8019      	strh	r1, [r3, #0]
 8002100:	2300      	movs	r3, #0
 8002102:	6123      	str	r3, [r4, #16]
 8002104:	4616      	mov	r6, r2
 8002106:	e7bc      	b.n	8002082 <_printf_i+0x146>
 8002108:	6833      	ldr	r3, [r6, #0]
 800210a:	1d1a      	adds	r2, r3, #4
 800210c:	6032      	str	r2, [r6, #0]
 800210e:	681e      	ldr	r6, [r3, #0]
 8002110:	6862      	ldr	r2, [r4, #4]
 8002112:	2100      	movs	r1, #0
 8002114:	4630      	mov	r0, r6
 8002116:	f7fe f883 	bl	8000220 <memchr>
 800211a:	b108      	cbz	r0, 8002120 <_printf_i+0x1e4>
 800211c:	1b80      	subs	r0, r0, r6
 800211e:	6060      	str	r0, [r4, #4]
 8002120:	6863      	ldr	r3, [r4, #4]
 8002122:	6123      	str	r3, [r4, #16]
 8002124:	2300      	movs	r3, #0
 8002126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800212a:	e7aa      	b.n	8002082 <_printf_i+0x146>
 800212c:	6923      	ldr	r3, [r4, #16]
 800212e:	4632      	mov	r2, r6
 8002130:	4649      	mov	r1, r9
 8002132:	4640      	mov	r0, r8
 8002134:	47d0      	blx	sl
 8002136:	3001      	adds	r0, #1
 8002138:	d0ad      	beq.n	8002096 <_printf_i+0x15a>
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	079b      	lsls	r3, r3, #30
 800213e:	d413      	bmi.n	8002168 <_printf_i+0x22c>
 8002140:	68e0      	ldr	r0, [r4, #12]
 8002142:	9b03      	ldr	r3, [sp, #12]
 8002144:	4298      	cmp	r0, r3
 8002146:	bfb8      	it	lt
 8002148:	4618      	movlt	r0, r3
 800214a:	e7a6      	b.n	800209a <_printf_i+0x15e>
 800214c:	2301      	movs	r3, #1
 800214e:	4632      	mov	r2, r6
 8002150:	4649      	mov	r1, r9
 8002152:	4640      	mov	r0, r8
 8002154:	47d0      	blx	sl
 8002156:	3001      	adds	r0, #1
 8002158:	d09d      	beq.n	8002096 <_printf_i+0x15a>
 800215a:	3501      	adds	r5, #1
 800215c:	68e3      	ldr	r3, [r4, #12]
 800215e:	9903      	ldr	r1, [sp, #12]
 8002160:	1a5b      	subs	r3, r3, r1
 8002162:	42ab      	cmp	r3, r5
 8002164:	dcf2      	bgt.n	800214c <_printf_i+0x210>
 8002166:	e7eb      	b.n	8002140 <_printf_i+0x204>
 8002168:	2500      	movs	r5, #0
 800216a:	f104 0619 	add.w	r6, r4, #25
 800216e:	e7f5      	b.n	800215c <_printf_i+0x220>
 8002170:	08002468 	.word	0x08002468
 8002174:	08002479 	.word	0x08002479

08002178 <__sflush_r>:
 8002178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002180:	0716      	lsls	r6, r2, #28
 8002182:	4605      	mov	r5, r0
 8002184:	460c      	mov	r4, r1
 8002186:	d454      	bmi.n	8002232 <__sflush_r+0xba>
 8002188:	684b      	ldr	r3, [r1, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	dc02      	bgt.n	8002194 <__sflush_r+0x1c>
 800218e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	dd48      	ble.n	8002226 <__sflush_r+0xae>
 8002194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002196:	2e00      	cmp	r6, #0
 8002198:	d045      	beq.n	8002226 <__sflush_r+0xae>
 800219a:	2300      	movs	r3, #0
 800219c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80021a0:	682f      	ldr	r7, [r5, #0]
 80021a2:	6a21      	ldr	r1, [r4, #32]
 80021a4:	602b      	str	r3, [r5, #0]
 80021a6:	d030      	beq.n	800220a <__sflush_r+0x92>
 80021a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80021aa:	89a3      	ldrh	r3, [r4, #12]
 80021ac:	0759      	lsls	r1, r3, #29
 80021ae:	d505      	bpl.n	80021bc <__sflush_r+0x44>
 80021b0:	6863      	ldr	r3, [r4, #4]
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80021b6:	b10b      	cbz	r3, 80021bc <__sflush_r+0x44>
 80021b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021c0:	6a21      	ldr	r1, [r4, #32]
 80021c2:	4628      	mov	r0, r5
 80021c4:	47b0      	blx	r6
 80021c6:	1c43      	adds	r3, r0, #1
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	d106      	bne.n	80021da <__sflush_r+0x62>
 80021cc:	6829      	ldr	r1, [r5, #0]
 80021ce:	291d      	cmp	r1, #29
 80021d0:	d82b      	bhi.n	800222a <__sflush_r+0xb2>
 80021d2:	4a2a      	ldr	r2, [pc, #168]	@ (800227c <__sflush_r+0x104>)
 80021d4:	40ca      	lsrs	r2, r1
 80021d6:	07d6      	lsls	r6, r2, #31
 80021d8:	d527      	bpl.n	800222a <__sflush_r+0xb2>
 80021da:	2200      	movs	r2, #0
 80021dc:	6062      	str	r2, [r4, #4]
 80021de:	04d9      	lsls	r1, r3, #19
 80021e0:	6922      	ldr	r2, [r4, #16]
 80021e2:	6022      	str	r2, [r4, #0]
 80021e4:	d504      	bpl.n	80021f0 <__sflush_r+0x78>
 80021e6:	1c42      	adds	r2, r0, #1
 80021e8:	d101      	bne.n	80021ee <__sflush_r+0x76>
 80021ea:	682b      	ldr	r3, [r5, #0]
 80021ec:	b903      	cbnz	r3, 80021f0 <__sflush_r+0x78>
 80021ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80021f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021f2:	602f      	str	r7, [r5, #0]
 80021f4:	b1b9      	cbz	r1, 8002226 <__sflush_r+0xae>
 80021f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021fa:	4299      	cmp	r1, r3
 80021fc:	d002      	beq.n	8002204 <__sflush_r+0x8c>
 80021fe:	4628      	mov	r0, r5
 8002200:	f7ff fbf4 	bl	80019ec <_free_r>
 8002204:	2300      	movs	r3, #0
 8002206:	6363      	str	r3, [r4, #52]	@ 0x34
 8002208:	e00d      	b.n	8002226 <__sflush_r+0xae>
 800220a:	2301      	movs	r3, #1
 800220c:	4628      	mov	r0, r5
 800220e:	47b0      	blx	r6
 8002210:	4602      	mov	r2, r0
 8002212:	1c50      	adds	r0, r2, #1
 8002214:	d1c9      	bne.n	80021aa <__sflush_r+0x32>
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0c6      	beq.n	80021aa <__sflush_r+0x32>
 800221c:	2b1d      	cmp	r3, #29
 800221e:	d001      	beq.n	8002224 <__sflush_r+0xac>
 8002220:	2b16      	cmp	r3, #22
 8002222:	d11e      	bne.n	8002262 <__sflush_r+0xea>
 8002224:	602f      	str	r7, [r5, #0]
 8002226:	2000      	movs	r0, #0
 8002228:	e022      	b.n	8002270 <__sflush_r+0xf8>
 800222a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800222e:	b21b      	sxth	r3, r3
 8002230:	e01b      	b.n	800226a <__sflush_r+0xf2>
 8002232:	690f      	ldr	r7, [r1, #16]
 8002234:	2f00      	cmp	r7, #0
 8002236:	d0f6      	beq.n	8002226 <__sflush_r+0xae>
 8002238:	0793      	lsls	r3, r2, #30
 800223a:	680e      	ldr	r6, [r1, #0]
 800223c:	bf08      	it	eq
 800223e:	694b      	ldreq	r3, [r1, #20]
 8002240:	600f      	str	r7, [r1, #0]
 8002242:	bf18      	it	ne
 8002244:	2300      	movne	r3, #0
 8002246:	eba6 0807 	sub.w	r8, r6, r7
 800224a:	608b      	str	r3, [r1, #8]
 800224c:	f1b8 0f00 	cmp.w	r8, #0
 8002250:	dde9      	ble.n	8002226 <__sflush_r+0xae>
 8002252:	6a21      	ldr	r1, [r4, #32]
 8002254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002256:	4643      	mov	r3, r8
 8002258:	463a      	mov	r2, r7
 800225a:	4628      	mov	r0, r5
 800225c:	47b0      	blx	r6
 800225e:	2800      	cmp	r0, #0
 8002260:	dc08      	bgt.n	8002274 <__sflush_r+0xfc>
 8002262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800226a:	81a3      	strh	r3, [r4, #12]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002274:	4407      	add	r7, r0
 8002276:	eba8 0800 	sub.w	r8, r8, r0
 800227a:	e7e7      	b.n	800224c <__sflush_r+0xd4>
 800227c:	20400001 	.word	0x20400001

08002280 <_fflush_r>:
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	690b      	ldr	r3, [r1, #16]
 8002284:	4605      	mov	r5, r0
 8002286:	460c      	mov	r4, r1
 8002288:	b913      	cbnz	r3, 8002290 <_fflush_r+0x10>
 800228a:	2500      	movs	r5, #0
 800228c:	4628      	mov	r0, r5
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	b118      	cbz	r0, 800229a <_fflush_r+0x1a>
 8002292:	6a03      	ldr	r3, [r0, #32]
 8002294:	b90b      	cbnz	r3, 800229a <_fflush_r+0x1a>
 8002296:	f7ff f9af 	bl	80015f8 <__sinit>
 800229a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f3      	beq.n	800228a <_fflush_r+0xa>
 80022a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80022a4:	07d0      	lsls	r0, r2, #31
 80022a6:	d404      	bmi.n	80022b2 <_fflush_r+0x32>
 80022a8:	0599      	lsls	r1, r3, #22
 80022aa:	d402      	bmi.n	80022b2 <_fflush_r+0x32>
 80022ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022ae:	f7ff fb9a 	bl	80019e6 <__retarget_lock_acquire_recursive>
 80022b2:	4628      	mov	r0, r5
 80022b4:	4621      	mov	r1, r4
 80022b6:	f7ff ff5f 	bl	8002178 <__sflush_r>
 80022ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80022bc:	07da      	lsls	r2, r3, #31
 80022be:	4605      	mov	r5, r0
 80022c0:	d4e4      	bmi.n	800228c <_fflush_r+0xc>
 80022c2:	89a3      	ldrh	r3, [r4, #12]
 80022c4:	059b      	lsls	r3, r3, #22
 80022c6:	d4e1      	bmi.n	800228c <_fflush_r+0xc>
 80022c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022ca:	f7ff fb8d 	bl	80019e8 <__retarget_lock_release_recursive>
 80022ce:	e7dd      	b.n	800228c <_fflush_r+0xc>

080022d0 <__swhatbuf_r>:
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	460c      	mov	r4, r1
 80022d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d8:	2900      	cmp	r1, #0
 80022da:	b096      	sub	sp, #88	@ 0x58
 80022dc:	4615      	mov	r5, r2
 80022de:	461e      	mov	r6, r3
 80022e0:	da0d      	bge.n	80022fe <__swhatbuf_r+0x2e>
 80022e2:	89a3      	ldrh	r3, [r4, #12]
 80022e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2340      	movne	r3, #64	@ 0x40
 80022f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80022f4:	2000      	movs	r0, #0
 80022f6:	6031      	str	r1, [r6, #0]
 80022f8:	602b      	str	r3, [r5, #0]
 80022fa:	b016      	add	sp, #88	@ 0x58
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
 80022fe:	466a      	mov	r2, sp
 8002300:	f000 f848 	bl	8002394 <_fstat_r>
 8002304:	2800      	cmp	r0, #0
 8002306:	dbec      	blt.n	80022e2 <__swhatbuf_r+0x12>
 8002308:	9901      	ldr	r1, [sp, #4]
 800230a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800230e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002312:	4259      	negs	r1, r3
 8002314:	4159      	adcs	r1, r3
 8002316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800231a:	e7eb      	b.n	80022f4 <__swhatbuf_r+0x24>

0800231c <__smakebuf_r>:
 800231c:	898b      	ldrh	r3, [r1, #12]
 800231e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002320:	079d      	lsls	r5, r3, #30
 8002322:	4606      	mov	r6, r0
 8002324:	460c      	mov	r4, r1
 8002326:	d507      	bpl.n	8002338 <__smakebuf_r+0x1c>
 8002328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	6123      	str	r3, [r4, #16]
 8002330:	2301      	movs	r3, #1
 8002332:	6163      	str	r3, [r4, #20]
 8002334:	b003      	add	sp, #12
 8002336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002338:	ab01      	add	r3, sp, #4
 800233a:	466a      	mov	r2, sp
 800233c:	f7ff ffc8 	bl	80022d0 <__swhatbuf_r>
 8002340:	9f00      	ldr	r7, [sp, #0]
 8002342:	4605      	mov	r5, r0
 8002344:	4639      	mov	r1, r7
 8002346:	4630      	mov	r0, r6
 8002348:	f7ff fbbc 	bl	8001ac4 <_malloc_r>
 800234c:	b948      	cbnz	r0, 8002362 <__smakebuf_r+0x46>
 800234e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002352:	059a      	lsls	r2, r3, #22
 8002354:	d4ee      	bmi.n	8002334 <__smakebuf_r+0x18>
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	81a3      	strh	r3, [r4, #12]
 8002360:	e7e2      	b.n	8002328 <__smakebuf_r+0xc>
 8002362:	89a3      	ldrh	r3, [r4, #12]
 8002364:	6020      	str	r0, [r4, #0]
 8002366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800236a:	81a3      	strh	r3, [r4, #12]
 800236c:	9b01      	ldr	r3, [sp, #4]
 800236e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002372:	b15b      	cbz	r3, 800238c <__smakebuf_r+0x70>
 8002374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002378:	4630      	mov	r0, r6
 800237a:	f000 f81d 	bl	80023b8 <_isatty_r>
 800237e:	b128      	cbz	r0, 800238c <__smakebuf_r+0x70>
 8002380:	89a3      	ldrh	r3, [r4, #12]
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	81a3      	strh	r3, [r4, #12]
 800238c:	89a3      	ldrh	r3, [r4, #12]
 800238e:	431d      	orrs	r5, r3
 8002390:	81a5      	strh	r5, [r4, #12]
 8002392:	e7cf      	b.n	8002334 <__smakebuf_r+0x18>

08002394 <_fstat_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d07      	ldr	r5, [pc, #28]	@ (80023b4 <_fstat_r+0x20>)
 8002398:	2300      	movs	r3, #0
 800239a:	4604      	mov	r4, r0
 800239c:	4608      	mov	r0, r1
 800239e:	4611      	mov	r1, r2
 80023a0:	602b      	str	r3, [r5, #0]
 80023a2:	f7fe fe07 	bl	8000fb4 <_fstat>
 80023a6:	1c43      	adds	r3, r0, #1
 80023a8:	d102      	bne.n	80023b0 <_fstat_r+0x1c>
 80023aa:	682b      	ldr	r3, [r5, #0]
 80023ac:	b103      	cbz	r3, 80023b0 <_fstat_r+0x1c>
 80023ae:	6023      	str	r3, [r4, #0]
 80023b0:	bd38      	pop	{r3, r4, r5, pc}
 80023b2:	bf00      	nop
 80023b4:	200001d0 	.word	0x200001d0

080023b8 <_isatty_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	4d06      	ldr	r5, [pc, #24]	@ (80023d4 <_isatty_r+0x1c>)
 80023bc:	2300      	movs	r3, #0
 80023be:	4604      	mov	r4, r0
 80023c0:	4608      	mov	r0, r1
 80023c2:	602b      	str	r3, [r5, #0]
 80023c4:	f7fe fe06 	bl	8000fd4 <_isatty>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	d102      	bne.n	80023d2 <_isatty_r+0x1a>
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	b103      	cbz	r3, 80023d2 <_isatty_r+0x1a>
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	200001d0 	.word	0x200001d0

080023d8 <_sbrk_r>:
 80023d8:	b538      	push	{r3, r4, r5, lr}
 80023da:	4d06      	ldr	r5, [pc, #24]	@ (80023f4 <_sbrk_r+0x1c>)
 80023dc:	2300      	movs	r3, #0
 80023de:	4604      	mov	r4, r0
 80023e0:	4608      	mov	r0, r1
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	f7fe fe0e 	bl	8001004 <_sbrk>
 80023e8:	1c43      	adds	r3, r0, #1
 80023ea:	d102      	bne.n	80023f2 <_sbrk_r+0x1a>
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	b103      	cbz	r3, 80023f2 <_sbrk_r+0x1a>
 80023f0:	6023      	str	r3, [r4, #0]
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	200001d0 	.word	0x200001d0

080023f8 <_init>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	bf00      	nop
 80023fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023fe:	bc08      	pop	{r3}
 8002400:	469e      	mov	lr, r3
 8002402:	4770      	bx	lr

08002404 <_fini>:
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002406:	bf00      	nop
 8002408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240a:	bc08      	pop	{r3}
 800240c:	469e      	mov	lr, r3
 800240e:	4770      	bx	lr
