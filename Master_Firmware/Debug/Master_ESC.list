
Master_ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b08  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002ce8  08002ce8  00003ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d64  08002d64  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002d64  08002d64  00003d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d6c  08002d6c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d6c  08002d6c  00003d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d70  08002d70  00003d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002d74  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000068  08002ddc  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002ddc  000041e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005298  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e9  00000000  00000000  00009330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  0000a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a9  00000000  00000000  0000ac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d97a  00000000  00000000  0000aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007db9  00000000  00000000  00028973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1b34  00000000  00000000  0003072c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a0  00000000  00000000  000e22a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e3c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002cd0 	.word	0x08002cd0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08002cd0 	.word	0x08002cd0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db12      	blt.n	8000ad4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	490a      	ldr	r1, [pc, #40]	@ (8000ae0 <__NVIC_DisableIRQ+0x44>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	2001      	movs	r0, #1
 8000abe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac2:	3320      	adds	r3, #32
 8000ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ace:	f3bf 8f6f 	isb	sy
}
 8000ad2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <COMP1_Init>:

volatile uint16_t case_interrupt_counter = 0;

// COMP1_INP -> PA1+
// COMP1_INM -> PA4-
void COMP1_Init(void){
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	// Enable GPIOA Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <COMP1_Init+0xb0>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aec:	4a29      	ldr	r2, [pc, #164]	@ (8000b94 <COMP1_Init+0xb0>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000af4:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <COMP1_Init+0xb0>)
 8000af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af8:	4a26      	ldr	r2, [pc, #152]	@ (8000b94 <COMP1_Init+0xb0>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PA1+ to Analog Mode
	GPIOA->MODER &= ~(0b11 << 2);
 8000b00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b0a:	f023 030c 	bic.w	r3, r3, #12
 8000b0e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << 2);
 8000b10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b1a:	f043 030c 	orr.w	r3, r3, #12
 8000b1e:	6013      	str	r3, [r2, #0]
	// Set PA4- to Analog Mode
	GPIOA->MODER &= ~(0b11 << 8);
 8000b20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000b2e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << 8);
 8000b30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b3a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000b3e:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOA->PUPDR &= ~(0b11 << 2);
 8000b40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b4a:	f023 030c 	bic.w	r3, r3, #12
 8000b4e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(0b11 << 8);
 8000b50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000b5e:	60d3      	str	r3, [r2, #12]

	// Init COMP1
	// Clear CSR
	COMP1->CSR = 0;
 8000b60:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <COMP1_Init+0xb4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
	// Set COMP1_INP input to PA1
	COMP1->CSR &= ~(1 << 8);
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <COMP1_Init+0xb4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <COMP1_Init+0xb4>)
 8000b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b70:	6013      	str	r3, [r2, #0]
	// Set COMP1_INM input to PA4
	COMP1->CSR |= (0b110 << 4);
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <COMP1_Init+0xb4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <COMP1_Init+0xb4>)
 8000b78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000b7c:	6013      	str	r3, [r2, #0]
	// Enable COMP1
	COMP1->CSR |= COMP_CSR_EN;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <COMP1_Init+0xb4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <COMP1_Init+0xb4>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6013      	str	r3, [r2, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010200 	.word	0x40010200

08000b9c <COMP3_Init_v2>:

// COMP3_INP -> PC1+
// COMP3_INM -> PC0-
void COMP3_Init_v2(void){
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	// Enable GPIOC Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <COMP3_Init_v2+0x98>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	4a23      	ldr	r2, [pc, #140]	@ (8000c34 <COMP3_Init_v2+0x98>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000bac:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <COMP3_Init_v2+0x98>)
 8000bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb0:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <COMP3_Init_v2+0x98>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PC1+ to Analog Mode
	GPIOC->MODER &= ~(0b11 << 2); // <-THIS
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bbe:	f023 030c 	bic.w	r3, r3, #12
 8000bc2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b11 << 2);
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bca:	f043 030c 	orr.w	r3, r3, #12
 8000bce:	6013      	str	r3, [r2, #0]
	// Set PC0- to Analog Mode
	GPIOC->MODER &= ~(0b11 << 0);
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a18      	ldr	r2, [pc, #96]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bd6:	f023 0303 	bic.w	r3, r3, #3
 8000bda:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b11 << 0);
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a15      	ldr	r2, [pc, #84]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000be2:	f043 0303 	orr.w	r3, r3, #3
 8000be6:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOC->PUPDR &= ~(0b11 << 0);
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bee:	f023 0303 	bic.w	r3, r3, #3
 8000bf2:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR &= ~(0b11 << 2);
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <COMP3_Init_v2+0x9c>)
 8000bfa:	f023 030c 	bic.w	r3, r3, #12
 8000bfe:	60d3      	str	r3, [r2, #12]

	// Init COMP3
	// Clear CSR
	COMP3->CSR = 0;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <COMP3_Init_v2+0xa0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
	// Set COMP3_INP input to PC1+
	COMP3->CSR |= (1 << 8);
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <COMP3_Init_v2+0xa0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <COMP3_Init_v2+0xa0>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c10:	6013      	str	r3, [r2, #0]
	// Set COMP3_INM input to PC0-
	COMP3->CSR |= (0b111 << 4);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <COMP3_Init_v2+0xa0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a09      	ldr	r2, [pc, #36]	@ (8000c3c <COMP3_Init_v2+0xa0>)
 8000c18:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000c1c:	6013      	str	r3, [r2, #0]
	// Enable COMP3
	COMP3->CSR |= COMP_CSR_EN;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <COMP3_Init_v2+0xa0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <COMP3_Init_v2+0xa0>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6013      	str	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000800 	.word	0x48000800
 8000c3c:	40010208 	.word	0x40010208

08000c40 <COMP4_Init_v2>:

// COMP4_INP -> PB0+
// COMP4_INM -> PB2-
void COMP4_Init_v2(void){
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	// Enable GPIOB Clk
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c44:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <COMP4_Init_v2+0x98>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c48:	4a23      	ldr	r2, [pc, #140]	@ (8000cd8 <COMP4_Init_v2+0x98>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable COMPx Clk access
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <COMP4_Init_v2+0x98>)
 8000c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c54:	4a20      	ldr	r2, [pc, #128]	@ (8000cd8 <COMP4_Init_v2+0x98>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6613      	str	r3, [r2, #96]	@ 0x60

	// Set PB0+ to Analog Mode
	GPIOB->MODER &= ~(0b11 << 0);
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c62:	f023 0303 	bic.w	r3, r3, #3
 8000c66:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b11 << 0);
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c6e:	f043 0303 	orr.w	r3, r3, #3
 8000c72:	6013      	str	r3, [r2, #0]
	// Set PB2- to Analog Mode
	GPIOB->MODER &= ~(0b11 << 4);
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a18      	ldr	r2, [pc, #96]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c7a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c7e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b11 << 4);
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a15      	ldr	r2, [pc, #84]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c86:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000c8a:	6013      	str	r3, [r2, #0]

	// Disable pull-up/pull-down
	GPIOB->PUPDR &= ~(0b11 << 0);
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4a12      	ldr	r2, [pc, #72]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(0b11 << 4);
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cdc <COMP4_Init_v2+0x9c>)
 8000c9e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ca2:	60d3      	str	r3, [r2, #12]

	// Init COMP4
	// Clear CSR
	COMP4->CSR = 0;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <COMP4_Init_v2+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
	// Set COMP4_INP input to PB0+
	COMP4->CSR &= ~COMP_CSR_INPSEL;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <COMP4_Init_v2+0xa0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce0 <COMP4_Init_v2+0xa0>)
 8000cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cb4:	6013      	str	r3, [r2, #0]
	// Set COMP4_INM input to PB2-
	COMP4->CSR |= (0b111 << 4);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <COMP4_Init_v2+0xa0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <COMP4_Init_v2+0xa0>)
 8000cbc:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000cc0:	6013      	str	r3, [r2, #0]
	// Enable COMP4
	COMP4->CSR |= COMP_CSR_EN;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <COMP4_Init_v2+0xa0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a06      	ldr	r2, [pc, #24]	@ (8000ce0 <COMP4_Init_v2+0xa0>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6013      	str	r3, [r2, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	4001020c 	.word	0x4001020c

08000ce4 <Disable_All_COMP_Interrupts>:

	NVIC_EnableIRQ(COMP4_IRQn);
	NVIC_SetPriority(COMP4_IRQn, 1);
}

void Disable_All_COMP_Interrupts(void){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(COMP1_2_3_IRQn);
 8000ce8:	2040      	movs	r0, #64	@ 0x40
 8000cea:	f7ff fed7 	bl	8000a9c <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(COMP4_IRQn);
 8000cee:	2041      	movs	r0, #65	@ 0x41
 8000cf0:	f7ff fed4 	bl	8000a9c <__NVIC_DisableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <COMP1_2_3_IRQHandler>:

// This is what's called when COMP1,2,3 (Phase 1 & 2) interrupts are triggered
void COMP1_2_3_IRQHandler(void){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	// Phase 2: COMP3
	if (EXTI->PR1 & EXTI_PR1_PIF29){
 8000cfc:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <COMP1_2_3_IRQHandler+0x88>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d019      	beq.n	8000d3c <COMP1_2_3_IRQHandler+0x44>
		EXTI->PR1 |= EXTI_PR1_PIF29;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <COMP1_2_3_IRQHandler+0x88>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <COMP1_2_3_IRQHandler+0x88>)
 8000d0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d12:	6153      	str	r3, [r2, #20]

		switch(COMP_Phase_State){
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <COMP1_2_3_IRQHandler+0x8c>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d002      	beq.n	8000d24 <COMP1_2_3_IRQHandler+0x2c>
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d006      	beq.n	8000d30 <COMP1_2_3_IRQHandler+0x38>
 8000d22:	e00b      	b.n	8000d3c <COMP1_2_3_IRQHandler+0x44>
			case 2:
				// Disable interrupts. Prevent double fire
				Disable_All_COMP_Interrupts();
 8000d24:	f7ff ffde 	bl	8000ce4 <Disable_All_COMP_Interrupts>

				COMP_Phase_State = 3;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <COMP1_2_3_IRQHandler+0x8c>)
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	801a      	strh	r2, [r3, #0]
				break;
 8000d2e:	e005      	b.n	8000d3c <COMP1_2_3_IRQHandler+0x44>

			case 5:
				// Disable interrupts. Prevent double fire
				Disable_All_COMP_Interrupts();
 8000d30:	f7ff ffd8 	bl	8000ce4 <Disable_All_COMP_Interrupts>

				// Go to next state
				COMP_Phase_State = 6;
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <COMP1_2_3_IRQHandler+0x8c>)
 8000d36:	2206      	movs	r2, #6
 8000d38:	801a      	strh	r2, [r3, #0]
				break;
 8000d3a:	bf00      	nop
		}
	}
	// Phase 1: COMP1
	if (EXTI->PR1 & EXTI_PR1_PIF21){
 8000d3c:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <COMP1_2_3_IRQHandler+0x88>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d019      	beq.n	8000d7c <COMP1_2_3_IRQHandler+0x84>
		EXTI->PR1 |= EXTI_PR1_PIF21;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <COMP1_2_3_IRQHandler+0x88>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <COMP1_2_3_IRQHandler+0x88>)
 8000d4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d52:	6153      	str	r3, [r2, #20]

		switch(COMP_Phase_State){
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <COMP1_2_3_IRQHandler+0x8c>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d002      	beq.n	8000d64 <COMP1_2_3_IRQHandler+0x6c>
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d006      	beq.n	8000d70 <COMP1_2_3_IRQHandler+0x78>
				// Go to next state
				COMP_Phase_State = 1;
				break;
		}
	}
}
 8000d62:	e00b      	b.n	8000d7c <COMP1_2_3_IRQHandler+0x84>
				Disable_All_COMP_Interrupts();
 8000d64:	f7ff ffbe 	bl	8000ce4 <Disable_All_COMP_Interrupts>
				COMP_Phase_State = 4;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <COMP1_2_3_IRQHandler+0x8c>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	801a      	strh	r2, [r3, #0]
				break;
 8000d6e:	e005      	b.n	8000d7c <COMP1_2_3_IRQHandler+0x84>
				Disable_All_COMP_Interrupts();
 8000d70:	f7ff ffb8 	bl	8000ce4 <Disable_All_COMP_Interrupts>
				COMP_Phase_State = 1;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <COMP1_2_3_IRQHandler+0x8c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	801a      	strh	r2, [r3, #0]
				break;
 8000d7a:	bf00      	nop
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40010400 	.word	0x40010400
 8000d84:	20000000 	.word	0x20000000

08000d88 <COMP4_IRQHandler>:

// This is what's called when COMP4 (Phase 3) interrupt is triggered
void COMP4_IRQHandler(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	// Phase 3
	if (EXTI->PR1 & EXTI_PR1_PIF30) {
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <COMP4_IRQHandler+0x44>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d017      	beq.n	8000dc8 <COMP4_IRQHandler+0x40>
		// Clear pending flag (write 1 to clear)
		EXTI->PR1 |= EXTI_PR1_PIF30;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <COMP4_IRQHandler+0x44>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <COMP4_IRQHandler+0x44>)
 8000d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000da2:	6153      	str	r3, [r2, #20]

		// Disable interrupts. Prevent double fire
		Disable_All_COMP_Interrupts();
 8000da4:	f7ff ff9e 	bl	8000ce4 <Disable_All_COMP_Interrupts>

		switch(COMP_Phase_State){
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <COMP4_IRQHandler+0x48>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d002      	beq.n	8000db8 <COMP4_IRQHandler+0x30>
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d004      	beq.n	8000dc0 <COMP4_IRQHandler+0x38>
			case 4:
				COMP_Phase_State = 5;
				break;
		}
	}
}
 8000db6:	e007      	b.n	8000dc8 <COMP4_IRQHandler+0x40>
				COMP_Phase_State = 2;
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <COMP4_IRQHandler+0x48>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	801a      	strh	r2, [r3, #0]
				break;
 8000dbe:	e003      	b.n	8000dc8 <COMP4_IRQHandler+0x40>
				COMP_Phase_State = 5;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <COMP4_IRQHandler+0x48>)
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	801a      	strh	r2, [r3, #0]
				break;
 8000dc6:	bf00      	nop
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010400 	.word	0x40010400
 8000dd0:	20000000 	.word	0x20000000

08000dd4 <SPI2_Master_Init>:
*	PB12 -> GPIOx (General output)    ->        SPI2_NSS (Chip select)
*   PB13 -> SPI2_SCLK (Clock)         ->        SPI2_SCLK (Clock)
*	PB15 -> SPI2_MOSI (Tx)            ->        PB14 -> SPI2_MISO (Rx)
*	PB14 -> SPI2_MISO (Rx)            <-        PB15 -> SPI2_MOSI (Tx)
*/
void SPI2_Master_Init(void){
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	// Init Clk access to GPIOB and SPI2
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ecc <SPI2_Master_Init+0xf8>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ddc:	4a3b      	ldr	r2, [pc, #236]	@ (8000ecc <SPI2_Master_Init+0xf8>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_SPI2EN;
 8000de4:	4b39      	ldr	r3, [pc, #228]	@ (8000ecc <SPI2_Master_Init+0xf8>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de8:	4a38      	ldr	r2, [pc, #224]	@ (8000ecc <SPI2_Master_Init+0xf8>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dee:	6593      	str	r3, [r2, #88]	@ 0x58

	// Config pins to Alt Funct Mode
	GPIOB->MODER &= ~((0b11 << 24) | (0b11 << 26) | (0b11 << 28) | (0b11 << 30));
 8000df0:	4b37      	ldr	r3, [pc, #220]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a36      	ldr	r2, [pc, #216]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000df6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000dfa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << 24);  // PB12 == Gen Purpose Output
 8000dfc:	4b34      	ldr	r3, [pc, #208]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a33      	ldr	r2, [pc, #204]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e06:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 26);  // PB13
 8000e08:	4b31      	ldr	r3, [pc, #196]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a30      	ldr	r2, [pc, #192]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e12:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 28);  // PB14
 8000e14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e1e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 30);  // PB15
 8000e20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e2a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] &= ~(0b1111 << 20 | 0b1111 << 24 | 0b1111 << 28);
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e30:	4a27      	ldr	r2, [pc, #156]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e36:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 20); // PB13
 8000e38:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3c:	4a24      	ldr	r2, [pc, #144]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e3e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000e42:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 24); // PB14
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e48:	4a21      	ldr	r2, [pc, #132]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e4a:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8000e4e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0b0101 << 28); // PB15
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e54:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000e56:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000e5a:	6253      	str	r3, [r2, #36]	@ 0x24

	// Config SPI2_CR1 register
	SPI2->CR1 |= SPI_CR1_MSTR;     // Set to master
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= (0b011 << 3);     // Baud rate == F_PCLK/16
 8000e68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e6e:	f043 0318 	orr.w	r3, r3, #24
 8000e72:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSM;      // Software slave management enabled
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a16      	ldr	r2, [pc, #88]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSI;      // Internal slave select
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a13      	ldr	r2, [pc, #76]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~(SPI_CR1_CPOL | SPI_CR1_CPHA); // Mode 0
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a10      	ldr	r2, [pc, #64]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	6013      	str	r3, [r2, #0]

	// Config SPI2_CR2 register
	SPI2->CR2 = 0;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
	SPI2->CR2 |= (0b0111 << 8);
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000ea4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000ea8:	6053      	str	r3, [r2, #4]

	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <SPI2_Master_Init+0x100>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb4:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= SPI2_PB12_MASTER_CS; // Set NSS high (slave) inactive
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <SPI2_Master_Init+0xfc>)
 8000ebc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ec0:	6153      	str	r3, [r2, #20]
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	40003800 	.word	0x40003800

08000ed8 <SPI2_TX_RX>:

// Sends and receives data
uint8_t SPI2_TX_RX(uint8_t data){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	uint32_t Timeout_Tx = 100000;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <SPI2_TX_RX+0x70>)
 8000ee4:	60fb      	str	r3, [r7, #12]
	uint32_t Timeout_Rx = 100000;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <SPI2_TX_RX+0x70>)
 8000ee8:	60bb      	str	r3, [r7, #8]

	// Wait for TX buffer empty
    while(!(SPI2->SR & SPI_SR_TXE)){
 8000eea:	e00a      	b.n	8000f02 <SPI2_TX_RX+0x2a>
        if (--Timeout_Tx == 0) {
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d104      	bne.n	8000f02 <SPI2_TX_RX+0x2a>
            printf("Master TXE Timeout \r\n");
 8000ef8:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <SPI2_TX_RX+0x74>)
 8000efa:	f001 f841 	bl	8001f80 <puts>
            return 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e01d      	b.n	8000f3e <SPI2_TX_RX+0x66>
    while(!(SPI2->SR & SPI_SR_TXE)){
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <SPI2_TX_RX+0x78>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0ee      	beq.n	8000eec <SPI2_TX_RX+0x14>
        }
    }
    // Write data
    *((__IO uint8_t*)&SPI2->DR) = data;
 8000f0e:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <SPI2_TX_RX+0x7c>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	7013      	strb	r3, [r2, #0]

    // Wait for RX buffer not empty
    while(!(SPI2->SR & SPI_SR_RXNE)){
 8000f14:	e00a      	b.n	8000f2c <SPI2_TX_RX+0x54>
        if (--Timeout_Rx == 0) {
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d104      	bne.n	8000f2c <SPI2_TX_RX+0x54>
            printf("Master RXNE Timeout\r\n");
 8000f22:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <SPI2_TX_RX+0x80>)
 8000f24:	f001 f82c 	bl	8001f80 <puts>
            return 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e008      	b.n	8000f3e <SPI2_TX_RX+0x66>
    while(!(SPI2->SR & SPI_SR_RXNE)){
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <SPI2_TX_RX+0x78>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0ee      	beq.n	8000f16 <SPI2_TX_RX+0x3e>
        }
    }
    // Read received
    return *((__IO uint8_t*)&SPI2->DR);
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SPI2_TX_RX+0x7c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	000186a0 	.word	0x000186a0
 8000f4c:	08002ce8 	.word	0x08002ce8
 8000f50:	40003800 	.word	0x40003800
 8000f54:	4000380c 	.word	0x4000380c
 8000f58:	08002d00 	.word	0x08002d00

08000f5c <USART1_ReadChar>:
    USART1->BRR = SystemCoreClock / BAUD_RATE;  // Set Baud rate (9600), assuming 16MHz Clk
    USART1->CR1 = USART_CR1_RE | USART_CR1_UE;  // Enable transmitter and USART
}

// Function for receiving data (characters)
char USART1_ReadChar(void) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
    while (!(USART1->ISR & USART_ISR_RXNE));  // Wait for data
 8000f60:	bf00      	nop
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <USART1_ReadChar+0x24>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0320 	and.w	r3, r3, #32
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f9      	beq.n	8000f62 <USART1_ReadChar+0x6>

    return (char)(USART1->RDR & 0xFF);        // Read char
 8000f6e:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <USART1_ReadChar+0x24>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f72:	b2db      	uxtb	r3, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40013800 	.word	0x40013800

08000f84 <__io_getchar>:

// Overrides scanf()
int __io_getchar(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    return USART1_ReadChar();
 8000f88:	f7ff ffe8 	bl	8000f5c <USART1_ReadChar>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <USART2_PA2_Init>:
#define BAUD_RATE  9600
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)


// Configure PA2 for USART2
void USART2_PA2_Init(void){
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
    // Enable GPIOA Clk and USART2 Clk
    RCC->AHB2ENR |= (1 << 0);
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <USART2_PA2_Init+0x7c>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <USART2_PA2_Init+0x7c>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= (1 << 17);
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <USART2_PA2_Init+0x7c>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa8:	4a19      	ldr	r2, [pc, #100]	@ (8001010 <USART2_PA2_Init+0x7c>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fae:	6593      	str	r3, [r2, #88]	@ 0x58
    //RCC->APB1SMENR1 |= (1 << 17);

    // Configure PA2 as AF7 (USART2_TX)
    GPIOA->MODER &= ~(0b11 << 4);
 8000fb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000fbe:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0b10 << 4);    // Set PA2 to Alt Funct Mode
 8000fc0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0b1111 << 8);
 8000fd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000fde:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0b0111 << 8);  // Sets AFM to AF7
 8000fe0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000fee:	6213      	str	r3, [r2, #32]

    // Configure USART2
    USART2->BRR = SystemCoreClock / BAUD_RATE;  // Set Baud rate (9600), assuming 16MHz Clk
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <USART2_PA2_Init+0x80>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <USART2_PA2_Init+0x84>)
 8000ff6:	4909      	ldr	r1, [pc, #36]	@ (800101c <USART2_PA2_Init+0x88>)
 8000ff8:	fba1 1303 	umull	r1, r3, r1, r3
 8000ffc:	0a9b      	lsrs	r3, r3, #10
 8000ffe:	60d3      	str	r3, [r2, #12]
    //USART2->BRR = 16000000 / BAUD_RATE;
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;  // Enable transmitter and USART
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <USART2_PA2_Init+0x84>)
 8001002:	2209      	movs	r2, #9
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000
 8001014:	20000004 	.word	0x20000004
 8001018:	40004400 	.word	0x40004400
 800101c:	1b4e81b5 	.word	0x1b4e81b5

08001020 <USART2_Write>:

// Function for sending data (characters)
void USART2_Write(char ch) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));  // Wait until transmit data register empty
 800102a:	bf00      	nop
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <USART2_Write+0x2c>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f9      	beq.n	800102c <USART2_Write+0xc>
    USART2->TDR = (ch & 0xFF);              // Send the character
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <USART2_Write+0x2c>)
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40004400 	.word	0x40004400

08001050 <__io_putchar>:

// Overrides printf function
int __io_putchar(int ch) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    USART2_Write(ch);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffdf 	bl	8001020 <USART2_Write>
    return ch;
 8001062:	687b      	ldr	r3, [r7, #4]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <PWM_PB7_TIM4_CH2_Init>:
#include "../Communication/USART_printf.h"

volatile uint16_t temp = 0;

// PWM for PB7 (TIM4_CH2 -> AF2)
void PWM_PB7_TIM4_CH2_Init(void){
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001070:	4b39      	ldr	r3, [pc, #228]	@ (8001158 <PWM_PB7_TIM4_CH2_Init+0xec>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	4a38      	ldr	r2, [pc, #224]	@ (8001158 <PWM_PB7_TIM4_CH2_Init+0xec>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB7 output to Alt Funct Mode
	GPIOB->MODER &= ~(0b11 << 14);
 800107c:	4b37      	ldr	r3, [pc, #220]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a36      	ldr	r2, [pc, #216]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001082:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001086:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 14);      // MODE7 = Alt Funct Mode
 8001088:	4b34      	ldr	r3, [pc, #208]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a33      	ldr	r2, [pc, #204]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800108e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001092:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 28);
 8001094:	4b31      	ldr	r3, [pc, #196]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a30      	ldr	r2, [pc, #192]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 800109a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800109e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 28);   // AFSEL7 set to AF2
 80010a0:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4a2d      	ldr	r2, [pc, #180]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80010a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80010aa:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 14);    // High speed pin
 80010ac:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a2a      	ldr	r2, [pc, #168]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80010b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010b6:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT7; // No Push-pull
 80010b8:	4b28      	ldr	r3, [pc, #160]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a27      	ldr	r2, [pc, #156]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80010be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010c2:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 14);    // No pull-up/pull-down
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	4a24      	ldr	r2, [pc, #144]	@ (800115c <PWM_PB7_TIM4_CH2_Init+0xf0>)
 80010ca:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010ce:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM4
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 80010d0:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <PWM_PB7_TIM4_CH2_Init+0xec>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <PWM_PB7_TIM4_CH2_Init+0xec>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM4->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 160 - 1;             // Period     (cycle length)
 80010e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010e4:	229f      	movs	r2, #159	@ 0x9f
 80010e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR2 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	639a      	str	r2, [r3, #56]	@ 0x38

	// Other timer settings
	TIM4->CCMR1 &= ~(0b111 << 12);
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80010f8:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=  (0b110 << 12);   // CH2 set to PWM mode 1
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a18      	ldr	r2, [pc, #96]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001100:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001104:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC2PE;  // Enable pre-load register
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a15      	ldr	r2, [pc, #84]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 800110c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001110:	6193      	str	r3, [r2, #24]

	TIM4->CCER &= ~TIM_CCER_CC2P;    // set output polarity to active HIGH in CH2
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001118:	f023 0320 	bic.w	r3, r3, #32
 800111c:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= TIM_CCER_CC2E;     // Capture/Compare enabled for CH2
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a0f      	ldr	r2, [pc, #60]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	6213      	str	r3, [r2, #32]

	TIM4->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4a0c      	ldr	r2, [pc, #48]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001140:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM4
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <PWM_PB7_TIM4_CH2_Init+0xf4>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6013      	str	r3, [r2, #0]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400
 8001160:	40000800 	.word	0x40000800

08001164 <PWM_PB6_TIM4_CH1_Init>:

// PWM for PB6 (TIM4_CH1 -> AF2)
void PWM_PB6_TIM4_CH1_Init(void){
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001168:	4b39      	ldr	r3, [pc, #228]	@ (8001250 <PWM_PB6_TIM4_CH1_Init+0xec>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	4a38      	ldr	r2, [pc, #224]	@ (8001250 <PWM_PB6_TIM4_CH1_Init+0xec>)
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB6 output to Alt Funct Mode
	GPIOB->MODER  &= ~(0b11 << 12);
 8001174:	4b37      	ldr	r3, [pc, #220]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a36      	ldr	r2, [pc, #216]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800117a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800117e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |= (0b10 << 12);    // MODE6 = Alt Funct Mode
 8001180:	4b34      	ldr	r3, [pc, #208]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a33      	ldr	r2, [pc, #204]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001186:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800118a:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 24);
 800118c:	4b31      	ldr	r3, [pc, #196]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4a30      	ldr	r2, [pc, #192]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 8001192:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001196:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 24);  // AFSEL6 set to AF2
 8001198:	4b2e      	ldr	r3, [pc, #184]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4a2d      	ldr	r2, [pc, #180]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 800119e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011a2:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 12);    // High speed pin
 80011a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80011aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ae:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT6; // No Push-pull
 80011b0:	4b28      	ldr	r3, [pc, #160]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a27      	ldr	r2, [pc, #156]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80011b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011ba:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 12);    // No pull-up/pull-down
 80011bc:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4a24      	ldr	r2, [pc, #144]	@ (8001254 <PWM_PB6_TIM4_CH1_Init+0xf0>)
 80011c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011c6:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM4
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <PWM_PB6_TIM4_CH1_Init+0xec>)
 80011ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011cc:	4a20      	ldr	r2, [pc, #128]	@ (8001250 <PWM_PB6_TIM4_CH1_Init+0xec>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM4->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 160 - 1;             // Period     (cycle length)
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011dc:	229f      	movs	r2, #159	@ 0x9f
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CCR1 = 0;                 // Sets Duty Cycle (ON state) , CCR1 for CH1
 80011e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	635a      	str	r2, [r3, #52]	@ 0x34

	// Other timer settings
	TIM4->CCMR1 &= ~(0b111 << 4);    // Alternate register
 80011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011f0:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=  (0b110 << 4);    // CH1 set to PWM mode 1
 80011f2:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 80011f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80011fc:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC1PE;  // Enable pre-load register
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a15      	ldr	r2, [pc, #84]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	6193      	str	r3, [r2, #24]

	TIM4->CCER &= ~TIM_CCER_CC1P;    // set output polarity to active HIGH in CH1
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001210:	f023 0302 	bic.w	r3, r3, #2
 8001214:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= TIM_CCER_CC1E;     // Capture/Compare enabled for CH1
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6213      	str	r3, [r2, #32]

	TIM4->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001238:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM4
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a06      	ldr	r2, [pc, #24]	@ (8001258 <PWM_PB6_TIM4_CH1_Init+0xf4>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6013      	str	r3, [r2, #0]
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	48000400 	.word	0x48000400
 8001258:	40000800 	.word	0x40000800

0800125c <PWM_PB3_TIM2_CH2_Init>:

// PWM for PB3 (TIM2_CH2 -> AF1)
void PWM_PB3_TIM2_CH2_Init(void){
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001260:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <PWM_PB3_TIM2_CH2_Init+0x114>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	4a42      	ldr	r2, [pc, #264]	@ (8001370 <PWM_PB3_TIM2_CH2_Init+0x114>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PB3 output to Alt Funct Mode
	GPIOB->MODER  &= ~(0b11 << 6);
 800126c:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a40      	ldr	r2, [pc, #256]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001272:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001276:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |= (0b10 << 6);    // MODE6 = Alt Funct Mode
 8001278:	4b3e      	ldr	r3, [pc, #248]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a3d      	ldr	r2, [pc, #244]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800127e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001282:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0b1111 << 12);
 8001284:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4a3a      	ldr	r2, [pc, #232]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800128a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800128e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0001 << 12);  // AFSEL3 set to AF1
 8001290:	4b38      	ldr	r3, [pc, #224]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a37      	ldr	r2, [pc, #220]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 8001296:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800129a:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOB->OSPEEDR |= (0b10 << 6);    // High speed pin
 800129c:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a34      	ldr	r2, [pc, #208]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 80012a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a6:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT3; // No Push-pull
 80012a8:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a31      	ldr	r2, [pc, #196]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 80012ae:	f023 0308 	bic.w	r3, r3, #8
 80012b2:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR  &= ~(0b11 << 6);    // No pull-up/pull-down
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001374 <PWM_PB3_TIM2_CH2_Init+0x118>)
 80012ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80012be:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80012c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <PWM_PB3_TIM2_CH2_Init+0x114>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001370 <PWM_PB3_TIM2_CH2_Init+0x114>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM2->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 80012cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 160 - 1;             // Period     (cycle length)
 80012d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d8:	229f      	movs	r2, #159	@ 0x9f
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR2 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 80012dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e0:	2200      	movs	r2, #0
 80012e2:	639a      	str	r2, [r3, #56]	@ 0x38

	// Other timer settings
	TIM2->CCMR1 &= ~(0b111 << 12);   // Alternate register
 80012e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80012f2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b110 << 12);   // CH2 set to PWM mode 1
 80012f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012fe:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001302:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE;  // Enable pre-load register CH2
 8001304:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800130e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001312:	6193      	str	r3, [r2, #24]

	TIM2->CCER &= ~TIM_CCER_CC2P;    // set output polarity to active HIGH in CH2
 8001314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800131e:	f023 0320 	bic.w	r3, r3, #32
 8001322:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC2E;     // Capture/Compare enabled for CH2
 8001324:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6213      	str	r3, [r2, #32]

	TIM2->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 8001334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8001344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800134e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001352:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8001354:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400

08001378 <PWM_PA15_TIM2_CH1_Init>:

// PWM for PA15 (TIM2_CH1 -> AF1)
void PWM_PA15_TIM2_CH1_Init(void){
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800137c:	4b4a      	ldr	r3, [pc, #296]	@ (80014a8 <PWM_PA15_TIM2_CH1_Init+0x130>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	4a49      	ldr	r2, [pc, #292]	@ (80014a8 <PWM_PA15_TIM2_CH1_Init+0x130>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PA15 output to Alt Funct Mode
	GPIOA->MODER  &= ~(0b11 << 30);
 8001388:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001392:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001396:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |= (0b10 << 30);     // MODE15 = Alt Funct Mode
 8001398:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013a6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~(0b1111 << 28);
 80013a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80013b6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (0b0001 << 28);  // AFSEL15 set to AF1
 80013b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	6253      	str	r3, [r2, #36]	@ 0x24

	// GPIO settings
	GPIOA->OSPEEDR |= (0b10 << 30);     // High speed pin
 80013c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013d6:	6093      	str	r3, [r2, #8]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT15; // No Push-pull
 80013d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80013e6:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR  &= ~(0b11 << 30);     // No pull-up/pull-down
 80013e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013f2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80013f6:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80013f8:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <PWM_PA15_TIM2_CH1_Init+0x130>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fc:	4a2a      	ldr	r2, [pc, #168]	@ (80014a8 <PWM_PA15_TIM2_CH1_Init+0x130>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6593      	str	r3, [r2, #88]	@ 0x58
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM2->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 8001404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 160 - 1;             // Period     (cycle length)
 800140c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001410:	229f      	movs	r2, #159	@ 0x9f
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 8001414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001418:	2200      	movs	r2, #0
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34

	// Other timer settings
	TIM2->CCMR1 &= ~(0b111 << 4);    // Alternate register
 800141c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800142a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b110 << 4);    // CH1 set to PWM mode 1
 800142c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001436:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800143a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;  // Enable pre-load register CH1
 800143c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6193      	str	r3, [r2, #24]

	TIM2->CCER &= ~TIM_CCER_CC1P;    // set output polarity to active HIGH in CH1
 800144c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001456:	f023 0302 	bic.w	r3, r3, #2
 800145a:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC1E;     // Capture/Compare enabled for CH1
 800145c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]

	TIM2->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 800146c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 800147c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800148a:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 800148c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <PWM_PC2_TIM1_CH3_Init>:

// PWM for PC2 (TIM1_CH3 -> AF2)
void PWM_PC2_TIM1_CH3_Init(void){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80014b0:	4b3c      	ldr	r3, [pc, #240]	@ (80015a4 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	4a3b      	ldr	r2, [pc, #236]	@ (80015a4 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PC2 output to Alt Funct Mode
	GPIOC->MODER  &= ~(0b11 << 4);
 80014bc:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a39      	ldr	r2, [pc, #228]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80014c6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |= (0b10 << 4);    // MODE2 = Alt Funct Mode
 80014c8:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a36      	ldr	r2, [pc, #216]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0b1111 << 8);
 80014d4:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a33      	ldr	r2, [pc, #204]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014de:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 8);  // AFSEL2 set to AF2
 80014e0:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a30      	ldr	r2, [pc, #192]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ea:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOC->OSPEEDR |= (0b10 << 4);     // High speed pin
 80014ec:	4b2e      	ldr	r3, [pc, #184]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a2d      	ldr	r2, [pc, #180]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014f2:	f043 0320 	orr.w	r3, r3, #32
 80014f6:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT2; // No Push-pull
 80014f8:	4b2b      	ldr	r3, [pc, #172]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a2a      	ldr	r2, [pc, #168]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR  &= ~(0b11 << 4);     // No pull-up/pull-down
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a27      	ldr	r2, [pc, #156]	@ (80015a8 <PWM_PC2_TIM1_CH3_Init+0xfc>)
 800150a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800150e:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <PWM_PC2_TIM1_CH3_Init+0xf8>)
 8001516:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800151a:	6613      	str	r3, [r2, #96]	@ 0x60
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM1->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 800151c:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 160 - 1;             // Period     (cycle length)
 8001522:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001524:	229f      	movs	r2, #159	@ 0x9f
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR3 = 0;                 // Sets Duty Cycle (ON state) , CCR3 for CH3
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 800152a:	2200      	movs	r2, #0
 800152c:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Other timer settings
	TIM1->CCMR2 &= ~(0b111 << 4);    // Alternate register
 800152e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a1e      	ldr	r2, [pc, #120]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001538:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |=  (0b110 << 4);    // CH3 set to PWM mode 1
 800153a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a1b      	ldr	r2, [pc, #108]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001540:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001544:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3PE;  // Enable pre-load register CH3
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a18      	ldr	r2, [pc, #96]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	61d3      	str	r3, [r2, #28]

	TIM1->CCER &= ~TIM_CCER_CC3P;    // set output polarity to active HIGH in CH3
 8001552:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a15      	ldr	r2, [pc, #84]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800155c:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3E;     // Capture/Compare enabled for CH3
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001568:	6213      	str	r3, [r2, #32]

	TIM1->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a0c      	ldr	r2, [pc, #48]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001580:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6013      	str	r3, [r2, #0]
	TIM1->BDTR |= TIM_BDTR_MOE;      // Enable since TIM1 is a "Special Timer"
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <PWM_PC2_TIM1_CH3_Init+0x100>)
 8001594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000800 	.word	0x48000800
 80015ac:	40012c00 	.word	0x40012c00

080015b0 <PWM_PC3_TIM1_CH4_Init>:

// PWM for PC3 (TIM1_CH4 -> AF2)
void PWM_PC3_TIM1_CH4_Init(void){
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	// Config GPIO
	// Init Clk access to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80015b4:	4b39      	ldr	r3, [pc, #228]	@ (800169c <PWM_PC3_TIM1_CH4_Init+0xec>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b8:	4a38      	ldr	r2, [pc, #224]	@ (800169c <PWM_PC3_TIM1_CH4_Init+0xec>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set PC2 output to Alt Funct Mode
	GPIOC->MODER  &= ~(0b11 << 6);
 80015c0:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a36      	ldr	r2, [pc, #216]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80015ca:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |= (0b10 << 6);     // MODE2 = Alt Funct Mode
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a33      	ldr	r2, [pc, #204]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d6:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0b1111 << 12);
 80015d8:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80015e2:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 12);  // AFSEL3 set to AF2
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a2d      	ldr	r2, [pc, #180]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015ee:	6213      	str	r3, [r2, #32]

	// GPIO settings
	GPIOC->OSPEEDR |= (0b10 << 6);     // High speed pin
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a2a      	ldr	r2, [pc, #168]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015fa:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT3; // No Push-pull
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a27      	ldr	r2, [pc, #156]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 8001602:	f023 0308 	bic.w	r3, r3, #8
 8001606:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR  &= ~(0b11 << 6);     // No pull-up/pull-down
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4a24      	ldr	r2, [pc, #144]	@ (80016a0 <PWM_PC3_TIM1_CH4_Init+0xf0>)
 800160e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001612:	60d3      	str	r3, [r2, #12]

	// Config Timer
	// Init Clk access to TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001614:	4b21      	ldr	r3, [pc, #132]	@ (800169c <PWM_PC3_TIM1_CH4_Init+0xec>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001618:	4a20      	ldr	r2, [pc, #128]	@ (800169c <PWM_PC3_TIM1_CH4_Init+0xec>)
 800161a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800161e:	6613      	str	r3, [r2, #96]	@ 0x60
	// Set TIM4 prescaler
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 100k Hz = 16 Mhz / (0 + 1)(160 + 1)
	     // therefore, set PSC = 0 and ARR = 159

	TIM1->PSC = 0;                   // Clk pre-scaler -> 16MHz / 160 = 100k Hz
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 160 - 1;             // Period     (cycle length)
 8001626:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001628:	229f      	movs	r2, #159	@ 0x9f
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR4 = 0;                 // Sets Duty Cycle (ON state) , CCR2 for CH2
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800162e:	2200      	movs	r2, #0
 8001630:	641a      	str	r2, [r3, #64]	@ 0x40

	// Other timer settings
	TIM1->CCMR2 &= ~(0b111 << 12);    // Alternate register
 8001632:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a1b      	ldr	r2, [pc, #108]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001638:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800163c:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |=  (0b110 << 12);    // CH4 set to PWM mode 1
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a18      	ldr	r2, [pc, #96]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001644:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001648:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4PE;  // Enable pre-load register CH4
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001650:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001654:	61d3      	str	r3, [r2, #28]

	TIM1->CCER &= ~TIM_CCER_CC4P;    // set output polarity to active HIGH in CH4
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800165c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001660:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC4E;     // Capture/Compare enabled for CH4
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a0f      	ldr	r2, [pc, #60]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800166c:	6213      	str	r3, [r2, #32]

	TIM1->EGR |= TIM_EGR_UG;         // Update generation (re-init the counter)
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a0c      	ldr	r2, [pc, #48]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= TIM_CR1_ARPE;       // Auto reload preload enable
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001684:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_CEN;        // Enable counter on TIM1
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <PWM_PC3_TIM1_CH4_Init+0xf4>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000800 	.word	0x48000800
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 fb03 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}

08001706 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e00a      	b.n	800172e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001718:	f7ff fc34 	bl	8000f84 <__io_getchar>
 800171c:	4601      	mov	r1, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	b2ca      	uxtb	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf0      	blt.n	8001718 <_read+0x12>
  }

  return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e009      	b.n	8001766 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	60ba      	str	r2, [r7, #8]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fc78 	bl	8001050 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbf1      	blt.n	8001752 <_write+0x12>
  }
  return len;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_close>:

int _close(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a0:	605a      	str	r2, [r3, #4]
  return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_isatty>:

int _isatty(int file)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f000 fce4 	bl	80021dc <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20008000 	.word	0x20008000
 8001840:	00000400 	.word	0x00000400
 8001844:	20000088 	.word	0x20000088
 8001848:	200001e0 	.word	0x200001e0

0800184c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	@ (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	@ (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <ADC_Poten_PA7_Init>:
#define ADC_Bits            4096

volatile uint16_t ADC_Value_PA7 = 0;

// Initializes GPIOA, Timer, and Interrupt peripherals for PA7
void ADC_Poten_PA7_Init(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	// Step 1: Init GPIOA
	// Enable GPIOA Clk access
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001906:	4b4d      	ldr	r3, [pc, #308]	@ (8001a3c <ADC_Poten_PA7_Init+0x13c>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a3c <ADC_Poten_PA7_Init+0x13c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Set PA7 to analog mode
	GPIOA->MODER |= (0b11 << 14);
 8001912:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800191c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001920:	6013      	str	r3, [r2, #0]


	// Step 2: Init Timer (TIM3_CH2 -> AF2)
    // Enable TIM3 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 8001922:	4b46      	ldr	r3, [pc, #280]	@ (8001a3c <ADC_Poten_PA7_Init+0x13c>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	4a45      	ldr	r2, [pc, #276]	@ (8001a3c <ADC_Poten_PA7_Init+0x13c>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6593      	str	r3, [r2, #88]	@ 0x58

    // Set prescaler and auto-reload for 10ms period (For 16 MHz Clk)
    TIM3->PSC = 16000 - 1;   // 16 MHz / 16000 = 1 kHz
 800192e:	4b44      	ldr	r3, [pc, #272]	@ (8001a40 <ADC_Poten_PA7_Init+0x140>)
 8001930:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000 - 1;    // 1 kHz / 1000 = 1 Hz (1s)
 8001936:	4b42      	ldr	r3, [pc, #264]	@ (8001a40 <ADC_Poten_PA7_Init+0x140>)
 8001938:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800193c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set TIM3 to generate TRGO on update event
    TIM3->CR2 |= (0b010 << 4);
 800193e:	4b40      	ldr	r3, [pc, #256]	@ (8001a40 <ADC_Poten_PA7_Init+0x140>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a3f      	ldr	r2, [pc, #252]	@ (8001a40 <ADC_Poten_PA7_Init+0x140>)
 8001944:	f043 0320 	orr.w	r3, r3, #32
 8001948:	6053      	str	r3, [r2, #4]

    // Enable timer
    TIM3->CR1 |= TIM_CR1_CEN;
 800194a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a40 <ADC_Poten_PA7_Init+0x140>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a3c      	ldr	r2, [pc, #240]	@ (8001a40 <ADC_Poten_PA7_Init+0x140>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6013      	str	r3, [r2, #0]


    // Step 3: Init Interrupt (ADC2_IN4) -> IN4 = CH4
	// enable ADC2 Clk and ADC Clk source
	RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8001956:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <ADC_Poten_PA7_Init+0x13c>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a38      	ldr	r2, [pc, #224]	@ (8001a3c <ADC_Poten_PA7_Init+0x13c>)
 800195c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->CCIPR |= (0b10 << 28);
 8001962:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <ADC_Poten_PA7_Init+0x13c>)
 8001964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001968:	4a34      	ldr	r2, [pc, #208]	@ (8001a3c <ADC_Poten_PA7_Init+0x13c>)
 800196a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800196e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	// ADC startup sequence
	// Enable ADC voltage regulator (RM0440: 21.4.6)
	ADC2->CR &= ~(ADC_CR_ADEN|ADC_CR_DEEPPWD);     // Disable ADC and DEEPPWD
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4a33      	ldr	r2, [pc, #204]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001978:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADVREGEN;                   // Enable voltage regulator
 8001982:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	4a2f      	ldr	r2, [pc, #188]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6093      	str	r3, [r2, #8]
	for (volatile uint32_t i = 0; i < 1000; i++);  // Wait ~20 µs for regulator
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	e002      	b.n	800199a <ADC_Poten_PA7_Init+0x9a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3301      	adds	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019a0:	d3f8      	bcc.n	8001994 <ADC_Poten_PA7_Init+0x94>

	// Calibrate ADC
	ADC2->CR |= ADC_CR_ADCAL;         // Start calibration
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4a27      	ldr	r2, [pc, #156]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80019ac:	6093      	str	r3, [r2, #8]
	while (ADC2->CR & ADC_CR_ADCAL);  // Wait for calibration to complete
 80019ae:	bf00      	nop
 80019b0:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	dbfb      	blt.n	80019b0 <ADC_Poten_PA7_Init+0xb0>

	// Enable ADC
	ADC2->CR |= ADC_CR_ADEN;
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a21      	ldr	r2, [pc, #132]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6093      	str	r3, [r2, #8]
	while (!(ADC2->ISR & ADC_ISR_ADRDY));  // Wait for ADC to be ready
 80019c4:	bf00      	nop
 80019c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f9      	beq.n	80019c6 <ADC_Poten_PA7_Init+0xc6>

    // Trigger from TIM3 TRGO
    ADC2->CFGR |= (0b00100 << 5);  // TIM3_TRGO = 4 (RM0440: Table 67. Interconnect 19)
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019dc:	60d3      	str	r3, [r2, #12]
    ADC2->CFGR |= (0b01 << 10);    // Trigger on rising edge
 80019de:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	4a18      	ldr	r2, [pc, #96]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e8:	60d3      	str	r3, [r2, #12]

    // Convert CH4 first -> SQ1
	ADC2->SQR1 |= (4 << 6);
 80019ea:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a15      	ldr	r2, [pc, #84]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set sample time for SMP4 (CH4) -> 47.5 ADC Clk cycles
	ADC2->SMPR1 &= ~(0b111 << 12);
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 80019fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a00:	6153      	str	r3, [r2, #20]
	ADC2->SMPR1 |= (0b100 << 12);
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a0f      	ldr	r2, [pc, #60]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0c:	6153      	str	r3, [r2, #20]

    // Enable end of conv interrupt EOCIE
    ADC2->IER |= ADC_IER_EOCIE;
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6053      	str	r3, [r2, #4]

    // Enable ADC interrupt in NVIC
    NVIC_SetPriority(ADC1_2_IRQn, 2);  // Optional: Set priority
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	2012      	movs	r0, #18
 8001a1e:	f7ff ff45 	bl	80018ac <__NVIC_SetPriority>
    NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a22:	2012      	movs	r0, #18
 8001a24:	f7ff ff24 	bl	8001870 <__NVIC_EnableIRQ>

    // Start ADC conversion (triggered by TIM3_TRGO)
    ADC2->CR |= ADC_CR_ADSTART;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <ADC_Poten_PA7_Init+0x144>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6093      	str	r3, [r2, #8]
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40000400 	.word	0x40000400
 8001a44:	50000100 	.word	0x50000100

08001a48 <ADC1_2_IRQHandler>:

// ADC Interrupt thingy
void ADC1_2_IRQHandler(void) {
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    if (ADC2->ISR & ADC_ISR_EOC) {
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <ADC1_2_IRQHandler+0x24>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <ADC1_2_IRQHandler+0x1a>
    	// 12-bit result (0–4095)
    	ADC_Value_PA7 = ADC2->DR;
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <ADC1_2_IRQHandler+0x24>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <ADC1_2_IRQHandler+0x28>)
 8001a60:	801a      	strh	r2, [r3, #0]
    }
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	50000100 	.word	0x50000100
 8001a70:	2000008c 	.word	0x2000008c
 8001a74:	00000000 	.word	0x00000000

08001a78 <ADC_Truncate>:
 *  This function adjusts/truncates values of the ADC input (potentiometer value)
 *  in order to fit the PWM duty cycle range
 *  ADC = 0-4095
 *  PWM duty cycle = CCRx = 0-159 <-- For a 100k Hz PWM signal
 */
uint16_t ADC_Truncate(int ADC_Val_Poten){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	// truncatedVal = (userInput/4095) * 159
	double ADC_Val_Truncated = (((double)ADC_Val_Poten/(ADC_Bits - 1)) * PWM_DutyCycle_Max);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7fe fd6f 	bl	8000564 <__aeabi_i2d>
 8001a86:	a312      	add	r3, pc, #72	@ (adr r3, 8001ad0 <ADC_Truncate+0x58>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fefe 	bl	800088c <__aeabi_ddiv>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	a30f      	add	r3, pc, #60	@ (adr r3, 8001ad8 <ADC_Truncate+0x60>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fdcb 	bl	8000638 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// round up to nearest whole number
	return (uint16_t)round(ADC_Val_Truncated);
 8001aaa:	ed97 0b02 	vldr	d0, [r7, #8]
 8001aae:	f001 f8c9 	bl	8002c44 <round>
 8001ab2:	ec53 2b10 	vmov	r2, r3, d0
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7fe ffcf 	bl	8000a5c <__aeabi_d2uiz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29b      	uxth	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	40affe00 	.word	0x40affe00
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	4063e000 	.word	0x4063e000

08001ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae0:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ae2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae4:	f7ff feb2 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopForever+0xe>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopForever+0x16>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f000 fb6b 	bl	80021e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b12:	f000 f89f 	bl	8001c54 <main>

08001b16 <LoopForever>:

LoopForever:
    b LoopForever
 8001b16:	e7fe      	b.n	8001b16 <LoopForever>
  ldr   r0, =_estack
 8001b18:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b24:	08002d74 	.word	0x08002d74
  ldr r2, =_sbss
 8001b28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b2c:	200001e0 	.word	0x200001e0

08001b30 <CORDIC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <CORDIC_IRQHandler>
	...

08001b34 <Delay_TIM17_Init>:

#include "Delay_Timer.h"
#include "stm32g431xx.h"
#include <stdio.h>

void Delay_TIM17_Init(void){
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	// Init Clk for TIM3
	RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
 8001b38:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <Delay_TIM17_Init+0x60>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3c:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <Delay_TIM17_Init+0x60>)
 8001b3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b42:	6613      	str	r3, [r2, #96]	@ 0x60

	 // Wait for clock stabilization (optional, for robustness)
	 while (!(RCC->APB2ENR & RCC_APB2ENR_TIM17EN)) {}
 8001b44:	bf00      	nop
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <Delay_TIM17_Init+0x60>)
 8001b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f9      	beq.n	8001b46 <Delay_TIM17_Init+0x12>
	     // freq = Sys_Clk / (PSC + 1)(ARR + 1)
	     // 1MHz = 16 Mhz / (16 + 1)(userInput + 1)
	     // 1MHz == 1 uS
	     // therefore, set PSC = 16 and ARR = userInput

	TIM17->PSC = (SystemCoreClock / 1000000) - 1;        // Clk pre-scaler -> 16MHz / 16 = 1MHz
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <Delay_TIM17_Init+0x64>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a11      	ldr	r2, [pc, #68]	@ (8001b9c <Delay_TIM17_Init+0x68>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	0c9b      	lsrs	r3, r3, #18
 8001b5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ba0 <Delay_TIM17_Init+0x6c>)
 8001b60:	3b01      	subs	r3, #1
 8001b62:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM17->ARR = 0xFFFF;        // Set maximum duty cycle == 1uS
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <Delay_TIM17_Init+0x6c>)
 8001b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Generate an update event to apply PSC and ARR
	TIM17->EGR |= TIM_EGR_UG;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <Delay_TIM17_Init+0x6c>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba0 <Delay_TIM17_Init+0x6c>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6153      	str	r3, [r2, #20]

    // Clear the counter
	TIM17->CNT = 0;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <Delay_TIM17_Init+0x6c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the timer
	TIM17->CR1 |= TIM_CR1_CEN;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <Delay_TIM17_Init+0x6c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <Delay_TIM17_Init+0x6c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	40014800 	.word	0x40014800

08001ba4 <Delay_uS>:

// 1,000,000 uS == 1 sec
void Delay_uS(uint16_t time_uS){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
	// Reset the counter
	TIM17->CNT = 0;
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <Delay_uS+0x2c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	@ 0x24

	//while ((volatile uint16_t)TIM3->CNT < time_uS);
	while (TIM17->CNT < time_uS);
 8001bb4:	bf00      	nop
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <Delay_uS+0x2c>)
 8001bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3fa      	bcc.n	8001bb6 <Delay_uS+0x12>
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40014800 	.word	0x40014800

08001bd4 <Delay_mS>:

// 1,000 uS == 1 mS --> 1000 mS == 1 sec
void Delay_mS(uint16_t time_mS){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]

	for (uint16_t counter = 0; counter < time_mS; counter++){
 8001bde:	2300      	movs	r3, #0
 8001be0:	81fb      	strh	r3, [r7, #14]
 8001be2:	e006      	b.n	8001bf2 <Delay_mS+0x1e>
		Delay_uS(1000);
 8001be4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be8:	f7ff ffdc 	bl	8001ba4 <Delay_uS>
	for (uint16_t counter = 0; counter < time_mS; counter++){
 8001bec:	89fb      	ldrh	r3, [r7, #14]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	81fb      	strh	r3, [r7, #14]
 8001bf2:	89fa      	ldrh	r2, [r7, #14]
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d3f4      	bcc.n	8001be4 <Delay_mS+0x10>
	}
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <LED_PA10_Init>:

#define LED_PA10         (1 << 10)
#define DELAY_BRUTE_CNT  250000

// Turn on LED on breadboard
void LED_PA10_Init(void){
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	// init Clk to GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <LED_PA10_Init+0x4c>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0c:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <LED_PA10_Init+0x4c>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Clear PA10
	GPIOA->MODER &= ~(0b11 << 20);
 8001c14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c1e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001c22:	6013      	str	r3, [r2, #0]

	// Set PA10 as output
	GPIOA->MODER |= (0b01 << 20);
 8001c24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c32:	6013      	str	r3, [r2, #0]

	// Set to LOW default
	GPIOA->ODR &= ~LED_PA10;
 8001c34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c42:	6153      	str	r3, [r2, #20]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000

08001c54 <main>:

/*
 *       Master
 */

int main(void){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
	LED_PA10_Init();
 8001c5a:	f7ff ffd3 	bl	8001c04 <LED_PA10_Init>
	USART2_PA2_Init();        // PA2 == COMP2_INM
 8001c5e:	f7ff f999 	bl	8000f94 <USART2_PA2_Init>
	ADC_Poten_PA7_Init();     // TIMER3
 8001c62:	f7ff fe4d 	bl	8001900 <ADC_Poten_PA7_Init>
	Delay_TIM17_Init();       // Delay_mS()
 8001c66:	f7ff ff65 	bl	8001b34 <Delay_TIM17_Init>

	COMP1_Init();             // PA1+ | PA4-  -> P1
 8001c6a:	f7fe ff3b 	bl	8000ae4 <COMP1_Init>
	COMP3_Init_v2();          // PC1+ | PC0-  -> P2
 8001c6e:	f7fe ff95 	bl	8000b9c <COMP3_Init_v2>
	COMP4_Init_v2();          // PB0+ | PB2-  -> P3
 8001c72:	f7fe ffe5 	bl	8000c40 <COMP4_Init_v2>

	PWM_PB6_TIM4_CH1_Init();  // M1H
 8001c76:	f7ff fa75 	bl	8001164 <PWM_PB6_TIM4_CH1_Init>
	PWM_PB3_TIM2_CH2_Init();  // M1L
 8001c7a:	f7ff faef 	bl	800125c <PWM_PB3_TIM2_CH2_Init>
	PWM_PA15_TIM2_CH1_Init(); // M2H
 8001c7e:	f7ff fb7b 	bl	8001378 <PWM_PA15_TIM2_CH1_Init>
	PWM_PB7_TIM4_CH2_Init();  // M2L
 8001c82:	f7ff f9f3 	bl	800106c <PWM_PB7_TIM4_CH2_Init>
	PWM_PC2_TIM1_CH3_Init();  // M3H
 8001c86:	f7ff fc11 	bl	80014ac <PWM_PC2_TIM1_CH3_Init>
	PWM_PC3_TIM1_CH4_Init();  // M3L
 8001c8a:	f7ff fc91 	bl	80015b0 <PWM_PC3_TIM1_CH4_Init>

	SPI2_Master_Init();
 8001c8e:	f7ff f8a1 	bl	8000dd4 <SPI2_Master_Init>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c92:	f3ef 8310 	mrs	r3, PRIMASK
 8001c96:	607b      	str	r3, [r7, #4]
  return(result);
 8001c98:	687b      	ldr	r3, [r7, #4]

	// Ensure global interrupts are enabled
	if (__get_PRIMASK() & 1){
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <main+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ca2:	b662      	cpsie	i
}
 8001ca4:	bf00      	nop
	while (1){
		// Active LED
		//GPIOA->ODR ^= LED_PA10;

		// Send SPI data
		GPIOB->ODR &= ~SPI2_PB12_MASTER_CS; // Enable CS for slave1
 8001ca6:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <main+0xa4>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a13      	ldr	r2, [pc, #76]	@ (8001cf8 <main+0xa4>)
 8001cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cb0:	6153      	str	r3, [r2, #20]
		Delay_mS(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff ff8e 	bl	8001bd4 <Delay_mS>

		Read_Slave_Value = SPI2_TX_RX(ADC_Truncate(ADC_Value_PA7)); // Send (Max is 8 bits right now), store read value
 8001cb8:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <main+0xa8>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff feda 	bl	8001a78 <ADC_Truncate>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f905 	bl	8000ed8 <SPI2_TX_RX>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <main+0xac>)
 8001cd4:	701a      	strb	r2, [r3, #0]
		//Delay_mS(1); // Hold time

		GPIOB->ODR |= SPI2_PB12_MASTER_CS;  // Disable  CS
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <main+0xa4>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <main+0xa4>)
 8001cdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ce0:	6153      	str	r3, [r2, #20]
		printf("Read from Slave: %u \r\n", Read_Slave_Value);
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <main+0xac>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <main+0xb0>)
 8001cea:	f000 f8e1 	bl	8001eb0 <iprintf>
		Delay_mS(100);
 8001cee:	2064      	movs	r0, #100	@ 0x64
 8001cf0:	f7ff ff70 	bl	8001bd4 <Delay_mS>
		GPIOB->ODR &= ~SPI2_PB12_MASTER_CS; // Enable CS for slave1
 8001cf4:	bf00      	nop
 8001cf6:	e7d6      	b.n	8001ca6 <main+0x52>
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	2000008c 	.word	0x2000008c
 8001d00:	20000084 	.word	0x20000084
 8001d04:	08002d18 	.word	0x08002d18

08001d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_IncTick+0x1c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a03      	ldr	r2, [pc, #12]	@ (8001d24 <HAL_IncTick+0x1c>)
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	20000090 	.word	0x20000090
 8001d28:	20000008 	.word	0x20000008

08001d2c <std>:
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	b510      	push	{r4, lr}
 8001d30:	4604      	mov	r4, r0
 8001d32:	e9c0 3300 	strd	r3, r3, [r0]
 8001d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d3a:	6083      	str	r3, [r0, #8]
 8001d3c:	8181      	strh	r1, [r0, #12]
 8001d3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001d40:	81c2      	strh	r2, [r0, #14]
 8001d42:	6183      	str	r3, [r0, #24]
 8001d44:	4619      	mov	r1, r3
 8001d46:	2208      	movs	r2, #8
 8001d48:	305c      	adds	r0, #92	@ 0x5c
 8001d4a:	f000 f9f9 	bl	8002140 <memset>
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <std+0x58>)
 8001d50:	6263      	str	r3, [r4, #36]	@ 0x24
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <std+0x5c>)
 8001d54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <std+0x60>)
 8001d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <std+0x64>)
 8001d5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <std+0x68>)
 8001d60:	6224      	str	r4, [r4, #32]
 8001d62:	429c      	cmp	r4, r3
 8001d64:	d006      	beq.n	8001d74 <std+0x48>
 8001d66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001d6a:	4294      	cmp	r4, r2
 8001d6c:	d002      	beq.n	8001d74 <std+0x48>
 8001d6e:	33d0      	adds	r3, #208	@ 0xd0
 8001d70:	429c      	cmp	r4, r3
 8001d72:	d105      	bne.n	8001d80 <std+0x54>
 8001d74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d7c:	f000 ba58 	b.w	8002230 <__retarget_lock_init_recursive>
 8001d80:	bd10      	pop	{r4, pc}
 8001d82:	bf00      	nop
 8001d84:	08001f91 	.word	0x08001f91
 8001d88:	08001fb3 	.word	0x08001fb3
 8001d8c:	08001feb 	.word	0x08001feb
 8001d90:	0800200f 	.word	0x0800200f
 8001d94:	20000094 	.word	0x20000094

08001d98 <stdio_exit_handler>:
 8001d98:	4a02      	ldr	r2, [pc, #8]	@ (8001da4 <stdio_exit_handler+0xc>)
 8001d9a:	4903      	ldr	r1, [pc, #12]	@ (8001da8 <stdio_exit_handler+0x10>)
 8001d9c:	4803      	ldr	r0, [pc, #12]	@ (8001dac <stdio_exit_handler+0x14>)
 8001d9e:	f000 b869 	b.w	8001e74 <_fwalk_sglue>
 8001da2:	bf00      	nop
 8001da4:	2000000c 	.word	0x2000000c
 8001da8:	08002acd 	.word	0x08002acd
 8001dac:	2000001c 	.word	0x2000001c

08001db0 <cleanup_stdio>:
 8001db0:	6841      	ldr	r1, [r0, #4]
 8001db2:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <cleanup_stdio+0x34>)
 8001db4:	4299      	cmp	r1, r3
 8001db6:	b510      	push	{r4, lr}
 8001db8:	4604      	mov	r4, r0
 8001dba:	d001      	beq.n	8001dc0 <cleanup_stdio+0x10>
 8001dbc:	f000 fe86 	bl	8002acc <_fflush_r>
 8001dc0:	68a1      	ldr	r1, [r4, #8]
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <cleanup_stdio+0x38>)
 8001dc4:	4299      	cmp	r1, r3
 8001dc6:	d002      	beq.n	8001dce <cleanup_stdio+0x1e>
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f000 fe7f 	bl	8002acc <_fflush_r>
 8001dce:	68e1      	ldr	r1, [r4, #12]
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <cleanup_stdio+0x3c>)
 8001dd2:	4299      	cmp	r1, r3
 8001dd4:	d004      	beq.n	8001de0 <cleanup_stdio+0x30>
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ddc:	f000 be76 	b.w	8002acc <_fflush_r>
 8001de0:	bd10      	pop	{r4, pc}
 8001de2:	bf00      	nop
 8001de4:	20000094 	.word	0x20000094
 8001de8:	200000fc 	.word	0x200000fc
 8001dec:	20000164 	.word	0x20000164

08001df0 <global_stdio_init.part.0>:
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <global_stdio_init.part.0+0x30>)
 8001df4:	4c0b      	ldr	r4, [pc, #44]	@ (8001e24 <global_stdio_init.part.0+0x34>)
 8001df6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <global_stdio_init.part.0+0x38>)
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2104      	movs	r1, #4
 8001e00:	f7ff ff94 	bl	8001d2c <std>
 8001e04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2109      	movs	r1, #9
 8001e0c:	f7ff ff8e 	bl	8001d2c <std>
 8001e10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001e14:	2202      	movs	r2, #2
 8001e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e1a:	2112      	movs	r1, #18
 8001e1c:	f7ff bf86 	b.w	8001d2c <std>
 8001e20:	200001cc 	.word	0x200001cc
 8001e24:	20000094 	.word	0x20000094
 8001e28:	08001d99 	.word	0x08001d99

08001e2c <__sfp_lock_acquire>:
 8001e2c:	4801      	ldr	r0, [pc, #4]	@ (8001e34 <__sfp_lock_acquire+0x8>)
 8001e2e:	f000 ba00 	b.w	8002232 <__retarget_lock_acquire_recursive>
 8001e32:	bf00      	nop
 8001e34:	200001d5 	.word	0x200001d5

08001e38 <__sfp_lock_release>:
 8001e38:	4801      	ldr	r0, [pc, #4]	@ (8001e40 <__sfp_lock_release+0x8>)
 8001e3a:	f000 b9fb 	b.w	8002234 <__retarget_lock_release_recursive>
 8001e3e:	bf00      	nop
 8001e40:	200001d5 	.word	0x200001d5

08001e44 <__sinit>:
 8001e44:	b510      	push	{r4, lr}
 8001e46:	4604      	mov	r4, r0
 8001e48:	f7ff fff0 	bl	8001e2c <__sfp_lock_acquire>
 8001e4c:	6a23      	ldr	r3, [r4, #32]
 8001e4e:	b11b      	cbz	r3, 8001e58 <__sinit+0x14>
 8001e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e54:	f7ff bff0 	b.w	8001e38 <__sfp_lock_release>
 8001e58:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <__sinit+0x28>)
 8001e5a:	6223      	str	r3, [r4, #32]
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <__sinit+0x2c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f5      	bne.n	8001e50 <__sinit+0xc>
 8001e64:	f7ff ffc4 	bl	8001df0 <global_stdio_init.part.0>
 8001e68:	e7f2      	b.n	8001e50 <__sinit+0xc>
 8001e6a:	bf00      	nop
 8001e6c:	08001db1 	.word	0x08001db1
 8001e70:	200001cc 	.word	0x200001cc

08001e74 <_fwalk_sglue>:
 8001e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e78:	4607      	mov	r7, r0
 8001e7a:	4688      	mov	r8, r1
 8001e7c:	4614      	mov	r4, r2
 8001e7e:	2600      	movs	r6, #0
 8001e80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e84:	f1b9 0901 	subs.w	r9, r9, #1
 8001e88:	d505      	bpl.n	8001e96 <_fwalk_sglue+0x22>
 8001e8a:	6824      	ldr	r4, [r4, #0]
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d1f7      	bne.n	8001e80 <_fwalk_sglue+0xc>
 8001e90:	4630      	mov	r0, r6
 8001e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e96:	89ab      	ldrh	r3, [r5, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d907      	bls.n	8001eac <_fwalk_sglue+0x38>
 8001e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	d003      	beq.n	8001eac <_fwalk_sglue+0x38>
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4638      	mov	r0, r7
 8001ea8:	47c0      	blx	r8
 8001eaa:	4306      	orrs	r6, r0
 8001eac:	3568      	adds	r5, #104	@ 0x68
 8001eae:	e7e9      	b.n	8001e84 <_fwalk_sglue+0x10>

08001eb0 <iprintf>:
 8001eb0:	b40f      	push	{r0, r1, r2, r3}
 8001eb2:	b507      	push	{r0, r1, r2, lr}
 8001eb4:	4906      	ldr	r1, [pc, #24]	@ (8001ed0 <iprintf+0x20>)
 8001eb6:	ab04      	add	r3, sp, #16
 8001eb8:	6808      	ldr	r0, [r1, #0]
 8001eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ebe:	6881      	ldr	r1, [r0, #8]
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	f000 fadb 	bl	800247c <_vfiprintf_r>
 8001ec6:	b003      	add	sp, #12
 8001ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ecc:	b004      	add	sp, #16
 8001ece:	4770      	bx	lr
 8001ed0:	20000018 	.word	0x20000018

08001ed4 <_puts_r>:
 8001ed4:	6a03      	ldr	r3, [r0, #32]
 8001ed6:	b570      	push	{r4, r5, r6, lr}
 8001ed8:	6884      	ldr	r4, [r0, #8]
 8001eda:	4605      	mov	r5, r0
 8001edc:	460e      	mov	r6, r1
 8001ede:	b90b      	cbnz	r3, 8001ee4 <_puts_r+0x10>
 8001ee0:	f7ff ffb0 	bl	8001e44 <__sinit>
 8001ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ee6:	07db      	lsls	r3, r3, #31
 8001ee8:	d405      	bmi.n	8001ef6 <_puts_r+0x22>
 8001eea:	89a3      	ldrh	r3, [r4, #12]
 8001eec:	0598      	lsls	r0, r3, #22
 8001eee:	d402      	bmi.n	8001ef6 <_puts_r+0x22>
 8001ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ef2:	f000 f99e 	bl	8002232 <__retarget_lock_acquire_recursive>
 8001ef6:	89a3      	ldrh	r3, [r4, #12]
 8001ef8:	0719      	lsls	r1, r3, #28
 8001efa:	d502      	bpl.n	8001f02 <_puts_r+0x2e>
 8001efc:	6923      	ldr	r3, [r4, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d135      	bne.n	8001f6e <_puts_r+0x9a>
 8001f02:	4621      	mov	r1, r4
 8001f04:	4628      	mov	r0, r5
 8001f06:	f000 f8c5 	bl	8002094 <__swsetup_r>
 8001f0a:	b380      	cbz	r0, 8001f6e <_puts_r+0x9a>
 8001f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8001f10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f12:	07da      	lsls	r2, r3, #31
 8001f14:	d405      	bmi.n	8001f22 <_puts_r+0x4e>
 8001f16:	89a3      	ldrh	r3, [r4, #12]
 8001f18:	059b      	lsls	r3, r3, #22
 8001f1a:	d402      	bmi.n	8001f22 <_puts_r+0x4e>
 8001f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f1e:	f000 f989 	bl	8002234 <__retarget_lock_release_recursive>
 8001f22:	4628      	mov	r0, r5
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da04      	bge.n	8001f34 <_puts_r+0x60>
 8001f2a:	69a2      	ldr	r2, [r4, #24]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dc17      	bgt.n	8001f60 <_puts_r+0x8c>
 8001f30:	290a      	cmp	r1, #10
 8001f32:	d015      	beq.n	8001f60 <_puts_r+0x8c>
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	6022      	str	r2, [r4, #0]
 8001f3a:	7019      	strb	r1, [r3, #0]
 8001f3c:	68a3      	ldr	r3, [r4, #8]
 8001f3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60a3      	str	r3, [r4, #8]
 8001f46:	2900      	cmp	r1, #0
 8001f48:	d1ed      	bne.n	8001f26 <_puts_r+0x52>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da11      	bge.n	8001f72 <_puts_r+0x9e>
 8001f4e:	4622      	mov	r2, r4
 8001f50:	210a      	movs	r1, #10
 8001f52:	4628      	mov	r0, r5
 8001f54:	f000 f85f 	bl	8002016 <__swbuf_r>
 8001f58:	3001      	adds	r0, #1
 8001f5a:	d0d7      	beq.n	8001f0c <_puts_r+0x38>
 8001f5c:	250a      	movs	r5, #10
 8001f5e:	e7d7      	b.n	8001f10 <_puts_r+0x3c>
 8001f60:	4622      	mov	r2, r4
 8001f62:	4628      	mov	r0, r5
 8001f64:	f000 f857 	bl	8002016 <__swbuf_r>
 8001f68:	3001      	adds	r0, #1
 8001f6a:	d1e7      	bne.n	8001f3c <_puts_r+0x68>
 8001f6c:	e7ce      	b.n	8001f0c <_puts_r+0x38>
 8001f6e:	3e01      	subs	r6, #1
 8001f70:	e7e4      	b.n	8001f3c <_puts_r+0x68>
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	6022      	str	r2, [r4, #0]
 8001f78:	220a      	movs	r2, #10
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e7ee      	b.n	8001f5c <_puts_r+0x88>
	...

08001f80 <puts>:
 8001f80:	4b02      	ldr	r3, [pc, #8]	@ (8001f8c <puts+0xc>)
 8001f82:	4601      	mov	r1, r0
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	f7ff bfa5 	b.w	8001ed4 <_puts_r>
 8001f8a:	bf00      	nop
 8001f8c:	20000018 	.word	0x20000018

08001f90 <__sread>:
 8001f90:	b510      	push	{r4, lr}
 8001f92:	460c      	mov	r4, r1
 8001f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f98:	f000 f8fc 	bl	8002194 <_read_r>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	bfab      	itete	ge
 8001fa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8001fa4:	181b      	addge	r3, r3, r0
 8001fa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001faa:	bfac      	ite	ge
 8001fac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001fae:	81a3      	strhlt	r3, [r4, #12]
 8001fb0:	bd10      	pop	{r4, pc}

08001fb2 <__swrite>:
 8001fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb6:	461f      	mov	r7, r3
 8001fb8:	898b      	ldrh	r3, [r1, #12]
 8001fba:	05db      	lsls	r3, r3, #23
 8001fbc:	4605      	mov	r5, r0
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	4616      	mov	r6, r2
 8001fc2:	d505      	bpl.n	8001fd0 <__swrite+0x1e>
 8001fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc8:	2302      	movs	r3, #2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f000 f8d0 	bl	8002170 <_lseek_r>
 8001fd0:	89a3      	ldrh	r3, [r4, #12]
 8001fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fda:	81a3      	strh	r3, [r4, #12]
 8001fdc:	4632      	mov	r2, r6
 8001fde:	463b      	mov	r3, r7
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe6:	f000 b8e7 	b.w	80021b8 <_write_r>

08001fea <__sseek>:
 8001fea:	b510      	push	{r4, lr}
 8001fec:	460c      	mov	r4, r1
 8001fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff2:	f000 f8bd 	bl	8002170 <_lseek_r>
 8001ff6:	1c43      	adds	r3, r0, #1
 8001ff8:	89a3      	ldrh	r3, [r4, #12]
 8001ffa:	bf15      	itete	ne
 8001ffc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001ffe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002002:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002006:	81a3      	strheq	r3, [r4, #12]
 8002008:	bf18      	it	ne
 800200a:	81a3      	strhne	r3, [r4, #12]
 800200c:	bd10      	pop	{r4, pc}

0800200e <__sclose>:
 800200e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002012:	f000 b89d 	b.w	8002150 <_close_r>

08002016 <__swbuf_r>:
 8002016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002018:	460e      	mov	r6, r1
 800201a:	4614      	mov	r4, r2
 800201c:	4605      	mov	r5, r0
 800201e:	b118      	cbz	r0, 8002028 <__swbuf_r+0x12>
 8002020:	6a03      	ldr	r3, [r0, #32]
 8002022:	b90b      	cbnz	r3, 8002028 <__swbuf_r+0x12>
 8002024:	f7ff ff0e 	bl	8001e44 <__sinit>
 8002028:	69a3      	ldr	r3, [r4, #24]
 800202a:	60a3      	str	r3, [r4, #8]
 800202c:	89a3      	ldrh	r3, [r4, #12]
 800202e:	071a      	lsls	r2, r3, #28
 8002030:	d501      	bpl.n	8002036 <__swbuf_r+0x20>
 8002032:	6923      	ldr	r3, [r4, #16]
 8002034:	b943      	cbnz	r3, 8002048 <__swbuf_r+0x32>
 8002036:	4621      	mov	r1, r4
 8002038:	4628      	mov	r0, r5
 800203a:	f000 f82b 	bl	8002094 <__swsetup_r>
 800203e:	b118      	cbz	r0, 8002048 <__swbuf_r+0x32>
 8002040:	f04f 37ff 	mov.w	r7, #4294967295
 8002044:	4638      	mov	r0, r7
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	6922      	ldr	r2, [r4, #16]
 800204c:	1a98      	subs	r0, r3, r2
 800204e:	6963      	ldr	r3, [r4, #20]
 8002050:	b2f6      	uxtb	r6, r6
 8002052:	4283      	cmp	r3, r0
 8002054:	4637      	mov	r7, r6
 8002056:	dc05      	bgt.n	8002064 <__swbuf_r+0x4e>
 8002058:	4621      	mov	r1, r4
 800205a:	4628      	mov	r0, r5
 800205c:	f000 fd36 	bl	8002acc <_fflush_r>
 8002060:	2800      	cmp	r0, #0
 8002062:	d1ed      	bne.n	8002040 <__swbuf_r+0x2a>
 8002064:	68a3      	ldr	r3, [r4, #8]
 8002066:	3b01      	subs	r3, #1
 8002068:	60a3      	str	r3, [r4, #8]
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	6022      	str	r2, [r4, #0]
 8002070:	701e      	strb	r6, [r3, #0]
 8002072:	6962      	ldr	r2, [r4, #20]
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	429a      	cmp	r2, r3
 8002078:	d004      	beq.n	8002084 <__swbuf_r+0x6e>
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	07db      	lsls	r3, r3, #31
 800207e:	d5e1      	bpl.n	8002044 <__swbuf_r+0x2e>
 8002080:	2e0a      	cmp	r6, #10
 8002082:	d1df      	bne.n	8002044 <__swbuf_r+0x2e>
 8002084:	4621      	mov	r1, r4
 8002086:	4628      	mov	r0, r5
 8002088:	f000 fd20 	bl	8002acc <_fflush_r>
 800208c:	2800      	cmp	r0, #0
 800208e:	d0d9      	beq.n	8002044 <__swbuf_r+0x2e>
 8002090:	e7d6      	b.n	8002040 <__swbuf_r+0x2a>
	...

08002094 <__swsetup_r>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	4b29      	ldr	r3, [pc, #164]	@ (800213c <__swsetup_r+0xa8>)
 8002098:	4605      	mov	r5, r0
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	460c      	mov	r4, r1
 800209e:	b118      	cbz	r0, 80020a8 <__swsetup_r+0x14>
 80020a0:	6a03      	ldr	r3, [r0, #32]
 80020a2:	b90b      	cbnz	r3, 80020a8 <__swsetup_r+0x14>
 80020a4:	f7ff fece 	bl	8001e44 <__sinit>
 80020a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ac:	0719      	lsls	r1, r3, #28
 80020ae:	d422      	bmi.n	80020f6 <__swsetup_r+0x62>
 80020b0:	06da      	lsls	r2, r3, #27
 80020b2:	d407      	bmi.n	80020c4 <__swsetup_r+0x30>
 80020b4:	2209      	movs	r2, #9
 80020b6:	602a      	str	r2, [r5, #0]
 80020b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020bc:	81a3      	strh	r3, [r4, #12]
 80020be:	f04f 30ff 	mov.w	r0, #4294967295
 80020c2:	e033      	b.n	800212c <__swsetup_r+0x98>
 80020c4:	0758      	lsls	r0, r3, #29
 80020c6:	d512      	bpl.n	80020ee <__swsetup_r+0x5a>
 80020c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80020ca:	b141      	cbz	r1, 80020de <__swsetup_r+0x4a>
 80020cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80020d0:	4299      	cmp	r1, r3
 80020d2:	d002      	beq.n	80020da <__swsetup_r+0x46>
 80020d4:	4628      	mov	r0, r5
 80020d6:	f000 f8af 	bl	8002238 <_free_r>
 80020da:	2300      	movs	r3, #0
 80020dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80020de:	89a3      	ldrh	r3, [r4, #12]
 80020e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80020e4:	81a3      	strh	r3, [r4, #12]
 80020e6:	2300      	movs	r3, #0
 80020e8:	6063      	str	r3, [r4, #4]
 80020ea:	6923      	ldr	r3, [r4, #16]
 80020ec:	6023      	str	r3, [r4, #0]
 80020ee:	89a3      	ldrh	r3, [r4, #12]
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	81a3      	strh	r3, [r4, #12]
 80020f6:	6923      	ldr	r3, [r4, #16]
 80020f8:	b94b      	cbnz	r3, 800210e <__swsetup_r+0x7a>
 80020fa:	89a3      	ldrh	r3, [r4, #12]
 80020fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002104:	d003      	beq.n	800210e <__swsetup_r+0x7a>
 8002106:	4621      	mov	r1, r4
 8002108:	4628      	mov	r0, r5
 800210a:	f000 fd2d 	bl	8002b68 <__smakebuf_r>
 800210e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002112:	f013 0201 	ands.w	r2, r3, #1
 8002116:	d00a      	beq.n	800212e <__swsetup_r+0x9a>
 8002118:	2200      	movs	r2, #0
 800211a:	60a2      	str	r2, [r4, #8]
 800211c:	6962      	ldr	r2, [r4, #20]
 800211e:	4252      	negs	r2, r2
 8002120:	61a2      	str	r2, [r4, #24]
 8002122:	6922      	ldr	r2, [r4, #16]
 8002124:	b942      	cbnz	r2, 8002138 <__swsetup_r+0xa4>
 8002126:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800212a:	d1c5      	bne.n	80020b8 <__swsetup_r+0x24>
 800212c:	bd38      	pop	{r3, r4, r5, pc}
 800212e:	0799      	lsls	r1, r3, #30
 8002130:	bf58      	it	pl
 8002132:	6962      	ldrpl	r2, [r4, #20]
 8002134:	60a2      	str	r2, [r4, #8]
 8002136:	e7f4      	b.n	8002122 <__swsetup_r+0x8e>
 8002138:	2000      	movs	r0, #0
 800213a:	e7f7      	b.n	800212c <__swsetup_r+0x98>
 800213c:	20000018 	.word	0x20000018

08002140 <memset>:
 8002140:	4402      	add	r2, r0
 8002142:	4603      	mov	r3, r0
 8002144:	4293      	cmp	r3, r2
 8002146:	d100      	bne.n	800214a <memset+0xa>
 8002148:	4770      	bx	lr
 800214a:	f803 1b01 	strb.w	r1, [r3], #1
 800214e:	e7f9      	b.n	8002144 <memset+0x4>

08002150 <_close_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4d06      	ldr	r5, [pc, #24]	@ (800216c <_close_r+0x1c>)
 8002154:	2300      	movs	r3, #0
 8002156:	4604      	mov	r4, r0
 8002158:	4608      	mov	r0, r1
 800215a:	602b      	str	r3, [r5, #0]
 800215c:	f7ff fb0c 	bl	8001778 <_close>
 8002160:	1c43      	adds	r3, r0, #1
 8002162:	d102      	bne.n	800216a <_close_r+0x1a>
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	b103      	cbz	r3, 800216a <_close_r+0x1a>
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	bd38      	pop	{r3, r4, r5, pc}
 800216c:	200001d0 	.word	0x200001d0

08002170 <_lseek_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4d07      	ldr	r5, [pc, #28]	@ (8002190 <_lseek_r+0x20>)
 8002174:	4604      	mov	r4, r0
 8002176:	4608      	mov	r0, r1
 8002178:	4611      	mov	r1, r2
 800217a:	2200      	movs	r2, #0
 800217c:	602a      	str	r2, [r5, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f7ff fb21 	bl	80017c6 <_lseek>
 8002184:	1c43      	adds	r3, r0, #1
 8002186:	d102      	bne.n	800218e <_lseek_r+0x1e>
 8002188:	682b      	ldr	r3, [r5, #0]
 800218a:	b103      	cbz	r3, 800218e <_lseek_r+0x1e>
 800218c:	6023      	str	r3, [r4, #0]
 800218e:	bd38      	pop	{r3, r4, r5, pc}
 8002190:	200001d0 	.word	0x200001d0

08002194 <_read_r>:
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	4d07      	ldr	r5, [pc, #28]	@ (80021b4 <_read_r+0x20>)
 8002198:	4604      	mov	r4, r0
 800219a:	4608      	mov	r0, r1
 800219c:	4611      	mov	r1, r2
 800219e:	2200      	movs	r2, #0
 80021a0:	602a      	str	r2, [r5, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f7ff faaf 	bl	8001706 <_read>
 80021a8:	1c43      	adds	r3, r0, #1
 80021aa:	d102      	bne.n	80021b2 <_read_r+0x1e>
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	b103      	cbz	r3, 80021b2 <_read_r+0x1e>
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	bd38      	pop	{r3, r4, r5, pc}
 80021b4:	200001d0 	.word	0x200001d0

080021b8 <_write_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4d07      	ldr	r5, [pc, #28]	@ (80021d8 <_write_r+0x20>)
 80021bc:	4604      	mov	r4, r0
 80021be:	4608      	mov	r0, r1
 80021c0:	4611      	mov	r1, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	602a      	str	r2, [r5, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f7ff faba 	bl	8001740 <_write>
 80021cc:	1c43      	adds	r3, r0, #1
 80021ce:	d102      	bne.n	80021d6 <_write_r+0x1e>
 80021d0:	682b      	ldr	r3, [r5, #0]
 80021d2:	b103      	cbz	r3, 80021d6 <_write_r+0x1e>
 80021d4:	6023      	str	r3, [r4, #0]
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	200001d0 	.word	0x200001d0

080021dc <__errno>:
 80021dc:	4b01      	ldr	r3, [pc, #4]	@ (80021e4 <__errno+0x8>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000018 	.word	0x20000018

080021e8 <__libc_init_array>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	4d0d      	ldr	r5, [pc, #52]	@ (8002220 <__libc_init_array+0x38>)
 80021ec:	4c0d      	ldr	r4, [pc, #52]	@ (8002224 <__libc_init_array+0x3c>)
 80021ee:	1b64      	subs	r4, r4, r5
 80021f0:	10a4      	asrs	r4, r4, #2
 80021f2:	2600      	movs	r6, #0
 80021f4:	42a6      	cmp	r6, r4
 80021f6:	d109      	bne.n	800220c <__libc_init_array+0x24>
 80021f8:	4d0b      	ldr	r5, [pc, #44]	@ (8002228 <__libc_init_array+0x40>)
 80021fa:	4c0c      	ldr	r4, [pc, #48]	@ (800222c <__libc_init_array+0x44>)
 80021fc:	f000 fd68 	bl	8002cd0 <_init>
 8002200:	1b64      	subs	r4, r4, r5
 8002202:	10a4      	asrs	r4, r4, #2
 8002204:	2600      	movs	r6, #0
 8002206:	42a6      	cmp	r6, r4
 8002208:	d105      	bne.n	8002216 <__libc_init_array+0x2e>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002210:	4798      	blx	r3
 8002212:	3601      	adds	r6, #1
 8002214:	e7ee      	b.n	80021f4 <__libc_init_array+0xc>
 8002216:	f855 3b04 	ldr.w	r3, [r5], #4
 800221a:	4798      	blx	r3
 800221c:	3601      	adds	r6, #1
 800221e:	e7f2      	b.n	8002206 <__libc_init_array+0x1e>
 8002220:	08002d6c 	.word	0x08002d6c
 8002224:	08002d6c 	.word	0x08002d6c
 8002228:	08002d6c 	.word	0x08002d6c
 800222c:	08002d70 	.word	0x08002d70

08002230 <__retarget_lock_init_recursive>:
 8002230:	4770      	bx	lr

08002232 <__retarget_lock_acquire_recursive>:
 8002232:	4770      	bx	lr

08002234 <__retarget_lock_release_recursive>:
 8002234:	4770      	bx	lr
	...

08002238 <_free_r>:
 8002238:	b538      	push	{r3, r4, r5, lr}
 800223a:	4605      	mov	r5, r0
 800223c:	2900      	cmp	r1, #0
 800223e:	d041      	beq.n	80022c4 <_free_r+0x8c>
 8002240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002244:	1f0c      	subs	r4, r1, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	bfb8      	it	lt
 800224a:	18e4      	addlt	r4, r4, r3
 800224c:	f000 f8e0 	bl	8002410 <__malloc_lock>
 8002250:	4a1d      	ldr	r2, [pc, #116]	@ (80022c8 <_free_r+0x90>)
 8002252:	6813      	ldr	r3, [r2, #0]
 8002254:	b933      	cbnz	r3, 8002264 <_free_r+0x2c>
 8002256:	6063      	str	r3, [r4, #4]
 8002258:	6014      	str	r4, [r2, #0]
 800225a:	4628      	mov	r0, r5
 800225c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002260:	f000 b8dc 	b.w	800241c <__malloc_unlock>
 8002264:	42a3      	cmp	r3, r4
 8002266:	d908      	bls.n	800227a <_free_r+0x42>
 8002268:	6820      	ldr	r0, [r4, #0]
 800226a:	1821      	adds	r1, r4, r0
 800226c:	428b      	cmp	r3, r1
 800226e:	bf01      	itttt	eq
 8002270:	6819      	ldreq	r1, [r3, #0]
 8002272:	685b      	ldreq	r3, [r3, #4]
 8002274:	1809      	addeq	r1, r1, r0
 8002276:	6021      	streq	r1, [r4, #0]
 8002278:	e7ed      	b.n	8002256 <_free_r+0x1e>
 800227a:	461a      	mov	r2, r3
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	b10b      	cbz	r3, 8002284 <_free_r+0x4c>
 8002280:	42a3      	cmp	r3, r4
 8002282:	d9fa      	bls.n	800227a <_free_r+0x42>
 8002284:	6811      	ldr	r1, [r2, #0]
 8002286:	1850      	adds	r0, r2, r1
 8002288:	42a0      	cmp	r0, r4
 800228a:	d10b      	bne.n	80022a4 <_free_r+0x6c>
 800228c:	6820      	ldr	r0, [r4, #0]
 800228e:	4401      	add	r1, r0
 8002290:	1850      	adds	r0, r2, r1
 8002292:	4283      	cmp	r3, r0
 8002294:	6011      	str	r1, [r2, #0]
 8002296:	d1e0      	bne.n	800225a <_free_r+0x22>
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	6053      	str	r3, [r2, #4]
 800229e:	4408      	add	r0, r1
 80022a0:	6010      	str	r0, [r2, #0]
 80022a2:	e7da      	b.n	800225a <_free_r+0x22>
 80022a4:	d902      	bls.n	80022ac <_free_r+0x74>
 80022a6:	230c      	movs	r3, #12
 80022a8:	602b      	str	r3, [r5, #0]
 80022aa:	e7d6      	b.n	800225a <_free_r+0x22>
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	1821      	adds	r1, r4, r0
 80022b0:	428b      	cmp	r3, r1
 80022b2:	bf04      	itt	eq
 80022b4:	6819      	ldreq	r1, [r3, #0]
 80022b6:	685b      	ldreq	r3, [r3, #4]
 80022b8:	6063      	str	r3, [r4, #4]
 80022ba:	bf04      	itt	eq
 80022bc:	1809      	addeq	r1, r1, r0
 80022be:	6021      	streq	r1, [r4, #0]
 80022c0:	6054      	str	r4, [r2, #4]
 80022c2:	e7ca      	b.n	800225a <_free_r+0x22>
 80022c4:	bd38      	pop	{r3, r4, r5, pc}
 80022c6:	bf00      	nop
 80022c8:	200001dc 	.word	0x200001dc

080022cc <sbrk_aligned>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	4e0f      	ldr	r6, [pc, #60]	@ (800230c <sbrk_aligned+0x40>)
 80022d0:	460c      	mov	r4, r1
 80022d2:	6831      	ldr	r1, [r6, #0]
 80022d4:	4605      	mov	r5, r0
 80022d6:	b911      	cbnz	r1, 80022de <sbrk_aligned+0x12>
 80022d8:	f000 fca4 	bl	8002c24 <_sbrk_r>
 80022dc:	6030      	str	r0, [r6, #0]
 80022de:	4621      	mov	r1, r4
 80022e0:	4628      	mov	r0, r5
 80022e2:	f000 fc9f 	bl	8002c24 <_sbrk_r>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	d103      	bne.n	80022f2 <sbrk_aligned+0x26>
 80022ea:	f04f 34ff 	mov.w	r4, #4294967295
 80022ee:	4620      	mov	r0, r4
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
 80022f2:	1cc4      	adds	r4, r0, #3
 80022f4:	f024 0403 	bic.w	r4, r4, #3
 80022f8:	42a0      	cmp	r0, r4
 80022fa:	d0f8      	beq.n	80022ee <sbrk_aligned+0x22>
 80022fc:	1a21      	subs	r1, r4, r0
 80022fe:	4628      	mov	r0, r5
 8002300:	f000 fc90 	bl	8002c24 <_sbrk_r>
 8002304:	3001      	adds	r0, #1
 8002306:	d1f2      	bne.n	80022ee <sbrk_aligned+0x22>
 8002308:	e7ef      	b.n	80022ea <sbrk_aligned+0x1e>
 800230a:	bf00      	nop
 800230c:	200001d8 	.word	0x200001d8

08002310 <_malloc_r>:
 8002310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002314:	1ccd      	adds	r5, r1, #3
 8002316:	f025 0503 	bic.w	r5, r5, #3
 800231a:	3508      	adds	r5, #8
 800231c:	2d0c      	cmp	r5, #12
 800231e:	bf38      	it	cc
 8002320:	250c      	movcc	r5, #12
 8002322:	2d00      	cmp	r5, #0
 8002324:	4606      	mov	r6, r0
 8002326:	db01      	blt.n	800232c <_malloc_r+0x1c>
 8002328:	42a9      	cmp	r1, r5
 800232a:	d904      	bls.n	8002336 <_malloc_r+0x26>
 800232c:	230c      	movs	r3, #12
 800232e:	6033      	str	r3, [r6, #0]
 8002330:	2000      	movs	r0, #0
 8002332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800240c <_malloc_r+0xfc>
 800233a:	f000 f869 	bl	8002410 <__malloc_lock>
 800233e:	f8d8 3000 	ldr.w	r3, [r8]
 8002342:	461c      	mov	r4, r3
 8002344:	bb44      	cbnz	r4, 8002398 <_malloc_r+0x88>
 8002346:	4629      	mov	r1, r5
 8002348:	4630      	mov	r0, r6
 800234a:	f7ff ffbf 	bl	80022cc <sbrk_aligned>
 800234e:	1c43      	adds	r3, r0, #1
 8002350:	4604      	mov	r4, r0
 8002352:	d158      	bne.n	8002406 <_malloc_r+0xf6>
 8002354:	f8d8 4000 	ldr.w	r4, [r8]
 8002358:	4627      	mov	r7, r4
 800235a:	2f00      	cmp	r7, #0
 800235c:	d143      	bne.n	80023e6 <_malloc_r+0xd6>
 800235e:	2c00      	cmp	r4, #0
 8002360:	d04b      	beq.n	80023fa <_malloc_r+0xea>
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	4639      	mov	r1, r7
 8002366:	4630      	mov	r0, r6
 8002368:	eb04 0903 	add.w	r9, r4, r3
 800236c:	f000 fc5a 	bl	8002c24 <_sbrk_r>
 8002370:	4581      	cmp	r9, r0
 8002372:	d142      	bne.n	80023fa <_malloc_r+0xea>
 8002374:	6821      	ldr	r1, [r4, #0]
 8002376:	1a6d      	subs	r5, r5, r1
 8002378:	4629      	mov	r1, r5
 800237a:	4630      	mov	r0, r6
 800237c:	f7ff ffa6 	bl	80022cc <sbrk_aligned>
 8002380:	3001      	adds	r0, #1
 8002382:	d03a      	beq.n	80023fa <_malloc_r+0xea>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	442b      	add	r3, r5
 8002388:	6023      	str	r3, [r4, #0]
 800238a:	f8d8 3000 	ldr.w	r3, [r8]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	bb62      	cbnz	r2, 80023ec <_malloc_r+0xdc>
 8002392:	f8c8 7000 	str.w	r7, [r8]
 8002396:	e00f      	b.n	80023b8 <_malloc_r+0xa8>
 8002398:	6822      	ldr	r2, [r4, #0]
 800239a:	1b52      	subs	r2, r2, r5
 800239c:	d420      	bmi.n	80023e0 <_malloc_r+0xd0>
 800239e:	2a0b      	cmp	r2, #11
 80023a0:	d917      	bls.n	80023d2 <_malloc_r+0xc2>
 80023a2:	1961      	adds	r1, r4, r5
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	6025      	str	r5, [r4, #0]
 80023a8:	bf18      	it	ne
 80023aa:	6059      	strne	r1, [r3, #4]
 80023ac:	6863      	ldr	r3, [r4, #4]
 80023ae:	bf08      	it	eq
 80023b0:	f8c8 1000 	streq.w	r1, [r8]
 80023b4:	5162      	str	r2, [r4, r5]
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	4630      	mov	r0, r6
 80023ba:	f000 f82f 	bl	800241c <__malloc_unlock>
 80023be:	f104 000b 	add.w	r0, r4, #11
 80023c2:	1d23      	adds	r3, r4, #4
 80023c4:	f020 0007 	bic.w	r0, r0, #7
 80023c8:	1ac2      	subs	r2, r0, r3
 80023ca:	bf1c      	itt	ne
 80023cc:	1a1b      	subne	r3, r3, r0
 80023ce:	50a3      	strne	r3, [r4, r2]
 80023d0:	e7af      	b.n	8002332 <_malloc_r+0x22>
 80023d2:	6862      	ldr	r2, [r4, #4]
 80023d4:	42a3      	cmp	r3, r4
 80023d6:	bf0c      	ite	eq
 80023d8:	f8c8 2000 	streq.w	r2, [r8]
 80023dc:	605a      	strne	r2, [r3, #4]
 80023de:	e7eb      	b.n	80023b8 <_malloc_r+0xa8>
 80023e0:	4623      	mov	r3, r4
 80023e2:	6864      	ldr	r4, [r4, #4]
 80023e4:	e7ae      	b.n	8002344 <_malloc_r+0x34>
 80023e6:	463c      	mov	r4, r7
 80023e8:	687f      	ldr	r7, [r7, #4]
 80023ea:	e7b6      	b.n	800235a <_malloc_r+0x4a>
 80023ec:	461a      	mov	r2, r3
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	42a3      	cmp	r3, r4
 80023f2:	d1fb      	bne.n	80023ec <_malloc_r+0xdc>
 80023f4:	2300      	movs	r3, #0
 80023f6:	6053      	str	r3, [r2, #4]
 80023f8:	e7de      	b.n	80023b8 <_malloc_r+0xa8>
 80023fa:	230c      	movs	r3, #12
 80023fc:	6033      	str	r3, [r6, #0]
 80023fe:	4630      	mov	r0, r6
 8002400:	f000 f80c 	bl	800241c <__malloc_unlock>
 8002404:	e794      	b.n	8002330 <_malloc_r+0x20>
 8002406:	6005      	str	r5, [r0, #0]
 8002408:	e7d6      	b.n	80023b8 <_malloc_r+0xa8>
 800240a:	bf00      	nop
 800240c:	200001dc 	.word	0x200001dc

08002410 <__malloc_lock>:
 8002410:	4801      	ldr	r0, [pc, #4]	@ (8002418 <__malloc_lock+0x8>)
 8002412:	f7ff bf0e 	b.w	8002232 <__retarget_lock_acquire_recursive>
 8002416:	bf00      	nop
 8002418:	200001d4 	.word	0x200001d4

0800241c <__malloc_unlock>:
 800241c:	4801      	ldr	r0, [pc, #4]	@ (8002424 <__malloc_unlock+0x8>)
 800241e:	f7ff bf09 	b.w	8002234 <__retarget_lock_release_recursive>
 8002422:	bf00      	nop
 8002424:	200001d4 	.word	0x200001d4

08002428 <__sfputc_r>:
 8002428:	6893      	ldr	r3, [r2, #8]
 800242a:	3b01      	subs	r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	b410      	push	{r4}
 8002430:	6093      	str	r3, [r2, #8]
 8002432:	da08      	bge.n	8002446 <__sfputc_r+0x1e>
 8002434:	6994      	ldr	r4, [r2, #24]
 8002436:	42a3      	cmp	r3, r4
 8002438:	db01      	blt.n	800243e <__sfputc_r+0x16>
 800243a:	290a      	cmp	r1, #10
 800243c:	d103      	bne.n	8002446 <__sfputc_r+0x1e>
 800243e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002442:	f7ff bde8 	b.w	8002016 <__swbuf_r>
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	1c58      	adds	r0, r3, #1
 800244a:	6010      	str	r0, [r2, #0]
 800244c:	7019      	strb	r1, [r3, #0]
 800244e:	4608      	mov	r0, r1
 8002450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002454:	4770      	bx	lr

08002456 <__sfputs_r>:
 8002456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002458:	4606      	mov	r6, r0
 800245a:	460f      	mov	r7, r1
 800245c:	4614      	mov	r4, r2
 800245e:	18d5      	adds	r5, r2, r3
 8002460:	42ac      	cmp	r4, r5
 8002462:	d101      	bne.n	8002468 <__sfputs_r+0x12>
 8002464:	2000      	movs	r0, #0
 8002466:	e007      	b.n	8002478 <__sfputs_r+0x22>
 8002468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800246c:	463a      	mov	r2, r7
 800246e:	4630      	mov	r0, r6
 8002470:	f7ff ffda 	bl	8002428 <__sfputc_r>
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	d1f3      	bne.n	8002460 <__sfputs_r+0xa>
 8002478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800247c <_vfiprintf_r>:
 800247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002480:	460d      	mov	r5, r1
 8002482:	b09d      	sub	sp, #116	@ 0x74
 8002484:	4614      	mov	r4, r2
 8002486:	4698      	mov	r8, r3
 8002488:	4606      	mov	r6, r0
 800248a:	b118      	cbz	r0, 8002494 <_vfiprintf_r+0x18>
 800248c:	6a03      	ldr	r3, [r0, #32]
 800248e:	b90b      	cbnz	r3, 8002494 <_vfiprintf_r+0x18>
 8002490:	f7ff fcd8 	bl	8001e44 <__sinit>
 8002494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002496:	07d9      	lsls	r1, r3, #31
 8002498:	d405      	bmi.n	80024a6 <_vfiprintf_r+0x2a>
 800249a:	89ab      	ldrh	r3, [r5, #12]
 800249c:	059a      	lsls	r2, r3, #22
 800249e:	d402      	bmi.n	80024a6 <_vfiprintf_r+0x2a>
 80024a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80024a2:	f7ff fec6 	bl	8002232 <__retarget_lock_acquire_recursive>
 80024a6:	89ab      	ldrh	r3, [r5, #12]
 80024a8:	071b      	lsls	r3, r3, #28
 80024aa:	d501      	bpl.n	80024b0 <_vfiprintf_r+0x34>
 80024ac:	692b      	ldr	r3, [r5, #16]
 80024ae:	b99b      	cbnz	r3, 80024d8 <_vfiprintf_r+0x5c>
 80024b0:	4629      	mov	r1, r5
 80024b2:	4630      	mov	r0, r6
 80024b4:	f7ff fdee 	bl	8002094 <__swsetup_r>
 80024b8:	b170      	cbz	r0, 80024d8 <_vfiprintf_r+0x5c>
 80024ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80024bc:	07dc      	lsls	r4, r3, #31
 80024be:	d504      	bpl.n	80024ca <_vfiprintf_r+0x4e>
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	b01d      	add	sp, #116	@ 0x74
 80024c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ca:	89ab      	ldrh	r3, [r5, #12]
 80024cc:	0598      	lsls	r0, r3, #22
 80024ce:	d4f7      	bmi.n	80024c0 <_vfiprintf_r+0x44>
 80024d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80024d2:	f7ff feaf 	bl	8002234 <__retarget_lock_release_recursive>
 80024d6:	e7f3      	b.n	80024c0 <_vfiprintf_r+0x44>
 80024d8:	2300      	movs	r3, #0
 80024da:	9309      	str	r3, [sp, #36]	@ 0x24
 80024dc:	2320      	movs	r3, #32
 80024de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80024e6:	2330      	movs	r3, #48	@ 0x30
 80024e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002698 <_vfiprintf_r+0x21c>
 80024ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80024f0:	f04f 0901 	mov.w	r9, #1
 80024f4:	4623      	mov	r3, r4
 80024f6:	469a      	mov	sl, r3
 80024f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024fc:	b10a      	cbz	r2, 8002502 <_vfiprintf_r+0x86>
 80024fe:	2a25      	cmp	r2, #37	@ 0x25
 8002500:	d1f9      	bne.n	80024f6 <_vfiprintf_r+0x7a>
 8002502:	ebba 0b04 	subs.w	fp, sl, r4
 8002506:	d00b      	beq.n	8002520 <_vfiprintf_r+0xa4>
 8002508:	465b      	mov	r3, fp
 800250a:	4622      	mov	r2, r4
 800250c:	4629      	mov	r1, r5
 800250e:	4630      	mov	r0, r6
 8002510:	f7ff ffa1 	bl	8002456 <__sfputs_r>
 8002514:	3001      	adds	r0, #1
 8002516:	f000 80a7 	beq.w	8002668 <_vfiprintf_r+0x1ec>
 800251a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800251c:	445a      	add	r2, fp
 800251e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002520:	f89a 3000 	ldrb.w	r3, [sl]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 809f 	beq.w	8002668 <_vfiprintf_r+0x1ec>
 800252a:	2300      	movs	r3, #0
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002534:	f10a 0a01 	add.w	sl, sl, #1
 8002538:	9304      	str	r3, [sp, #16]
 800253a:	9307      	str	r3, [sp, #28]
 800253c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002540:	931a      	str	r3, [sp, #104]	@ 0x68
 8002542:	4654      	mov	r4, sl
 8002544:	2205      	movs	r2, #5
 8002546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800254a:	4853      	ldr	r0, [pc, #332]	@ (8002698 <_vfiprintf_r+0x21c>)
 800254c:	f7fd fe68 	bl	8000220 <memchr>
 8002550:	9a04      	ldr	r2, [sp, #16]
 8002552:	b9d8      	cbnz	r0, 800258c <_vfiprintf_r+0x110>
 8002554:	06d1      	lsls	r1, r2, #27
 8002556:	bf44      	itt	mi
 8002558:	2320      	movmi	r3, #32
 800255a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800255e:	0713      	lsls	r3, r2, #28
 8002560:	bf44      	itt	mi
 8002562:	232b      	movmi	r3, #43	@ 0x2b
 8002564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002568:	f89a 3000 	ldrb.w	r3, [sl]
 800256c:	2b2a      	cmp	r3, #42	@ 0x2a
 800256e:	d015      	beq.n	800259c <_vfiprintf_r+0x120>
 8002570:	9a07      	ldr	r2, [sp, #28]
 8002572:	4654      	mov	r4, sl
 8002574:	2000      	movs	r0, #0
 8002576:	f04f 0c0a 	mov.w	ip, #10
 800257a:	4621      	mov	r1, r4
 800257c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002580:	3b30      	subs	r3, #48	@ 0x30
 8002582:	2b09      	cmp	r3, #9
 8002584:	d94b      	bls.n	800261e <_vfiprintf_r+0x1a2>
 8002586:	b1b0      	cbz	r0, 80025b6 <_vfiprintf_r+0x13a>
 8002588:	9207      	str	r2, [sp, #28]
 800258a:	e014      	b.n	80025b6 <_vfiprintf_r+0x13a>
 800258c:	eba0 0308 	sub.w	r3, r0, r8
 8002590:	fa09 f303 	lsl.w	r3, r9, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	9304      	str	r3, [sp, #16]
 8002598:	46a2      	mov	sl, r4
 800259a:	e7d2      	b.n	8002542 <_vfiprintf_r+0xc6>
 800259c:	9b03      	ldr	r3, [sp, #12]
 800259e:	1d19      	adds	r1, r3, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	9103      	str	r1, [sp, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bfbb      	ittet	lt
 80025a8:	425b      	neglt	r3, r3
 80025aa:	f042 0202 	orrlt.w	r2, r2, #2
 80025ae:	9307      	strge	r3, [sp, #28]
 80025b0:	9307      	strlt	r3, [sp, #28]
 80025b2:	bfb8      	it	lt
 80025b4:	9204      	strlt	r2, [sp, #16]
 80025b6:	7823      	ldrb	r3, [r4, #0]
 80025b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80025ba:	d10a      	bne.n	80025d2 <_vfiprintf_r+0x156>
 80025bc:	7863      	ldrb	r3, [r4, #1]
 80025be:	2b2a      	cmp	r3, #42	@ 0x2a
 80025c0:	d132      	bne.n	8002628 <_vfiprintf_r+0x1ac>
 80025c2:	9b03      	ldr	r3, [sp, #12]
 80025c4:	1d1a      	adds	r2, r3, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	9203      	str	r2, [sp, #12]
 80025ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80025ce:	3402      	adds	r4, #2
 80025d0:	9305      	str	r3, [sp, #20]
 80025d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80026a8 <_vfiprintf_r+0x22c>
 80025d6:	7821      	ldrb	r1, [r4, #0]
 80025d8:	2203      	movs	r2, #3
 80025da:	4650      	mov	r0, sl
 80025dc:	f7fd fe20 	bl	8000220 <memchr>
 80025e0:	b138      	cbz	r0, 80025f2 <_vfiprintf_r+0x176>
 80025e2:	9b04      	ldr	r3, [sp, #16]
 80025e4:	eba0 000a 	sub.w	r0, r0, sl
 80025e8:	2240      	movs	r2, #64	@ 0x40
 80025ea:	4082      	lsls	r2, r0
 80025ec:	4313      	orrs	r3, r2
 80025ee:	3401      	adds	r4, #1
 80025f0:	9304      	str	r3, [sp, #16]
 80025f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025f6:	4829      	ldr	r0, [pc, #164]	@ (800269c <_vfiprintf_r+0x220>)
 80025f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80025fc:	2206      	movs	r2, #6
 80025fe:	f7fd fe0f 	bl	8000220 <memchr>
 8002602:	2800      	cmp	r0, #0
 8002604:	d03f      	beq.n	8002686 <_vfiprintf_r+0x20a>
 8002606:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <_vfiprintf_r+0x224>)
 8002608:	bb1b      	cbnz	r3, 8002652 <_vfiprintf_r+0x1d6>
 800260a:	9b03      	ldr	r3, [sp, #12]
 800260c:	3307      	adds	r3, #7
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	3308      	adds	r3, #8
 8002614:	9303      	str	r3, [sp, #12]
 8002616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002618:	443b      	add	r3, r7
 800261a:	9309      	str	r3, [sp, #36]	@ 0x24
 800261c:	e76a      	b.n	80024f4 <_vfiprintf_r+0x78>
 800261e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002622:	460c      	mov	r4, r1
 8002624:	2001      	movs	r0, #1
 8002626:	e7a8      	b.n	800257a <_vfiprintf_r+0xfe>
 8002628:	2300      	movs	r3, #0
 800262a:	3401      	adds	r4, #1
 800262c:	9305      	str	r3, [sp, #20]
 800262e:	4619      	mov	r1, r3
 8002630:	f04f 0c0a 	mov.w	ip, #10
 8002634:	4620      	mov	r0, r4
 8002636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800263a:	3a30      	subs	r2, #48	@ 0x30
 800263c:	2a09      	cmp	r2, #9
 800263e:	d903      	bls.n	8002648 <_vfiprintf_r+0x1cc>
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0c6      	beq.n	80025d2 <_vfiprintf_r+0x156>
 8002644:	9105      	str	r1, [sp, #20]
 8002646:	e7c4      	b.n	80025d2 <_vfiprintf_r+0x156>
 8002648:	fb0c 2101 	mla	r1, ip, r1, r2
 800264c:	4604      	mov	r4, r0
 800264e:	2301      	movs	r3, #1
 8002650:	e7f0      	b.n	8002634 <_vfiprintf_r+0x1b8>
 8002652:	ab03      	add	r3, sp, #12
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	462a      	mov	r2, r5
 8002658:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <_vfiprintf_r+0x228>)
 800265a:	a904      	add	r1, sp, #16
 800265c:	4630      	mov	r0, r6
 800265e:	f3af 8000 	nop.w
 8002662:	4607      	mov	r7, r0
 8002664:	1c78      	adds	r0, r7, #1
 8002666:	d1d6      	bne.n	8002616 <_vfiprintf_r+0x19a>
 8002668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800266a:	07d9      	lsls	r1, r3, #31
 800266c:	d405      	bmi.n	800267a <_vfiprintf_r+0x1fe>
 800266e:	89ab      	ldrh	r3, [r5, #12]
 8002670:	059a      	lsls	r2, r3, #22
 8002672:	d402      	bmi.n	800267a <_vfiprintf_r+0x1fe>
 8002674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002676:	f7ff fddd 	bl	8002234 <__retarget_lock_release_recursive>
 800267a:	89ab      	ldrh	r3, [r5, #12]
 800267c:	065b      	lsls	r3, r3, #25
 800267e:	f53f af1f 	bmi.w	80024c0 <_vfiprintf_r+0x44>
 8002682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002684:	e71e      	b.n	80024c4 <_vfiprintf_r+0x48>
 8002686:	ab03      	add	r3, sp, #12
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	462a      	mov	r2, r5
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <_vfiprintf_r+0x228>)
 800268e:	a904      	add	r1, sp, #16
 8002690:	4630      	mov	r0, r6
 8002692:	f000 f879 	bl	8002788 <_printf_i>
 8002696:	e7e4      	b.n	8002662 <_vfiprintf_r+0x1e6>
 8002698:	08002d2f 	.word	0x08002d2f
 800269c:	08002d39 	.word	0x08002d39
 80026a0:	00000000 	.word	0x00000000
 80026a4:	08002457 	.word	0x08002457
 80026a8:	08002d35 	.word	0x08002d35

080026ac <_printf_common>:
 80026ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026b0:	4616      	mov	r6, r2
 80026b2:	4698      	mov	r8, r3
 80026b4:	688a      	ldr	r2, [r1, #8]
 80026b6:	690b      	ldr	r3, [r1, #16]
 80026b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80026bc:	4293      	cmp	r3, r2
 80026be:	bfb8      	it	lt
 80026c0:	4613      	movlt	r3, r2
 80026c2:	6033      	str	r3, [r6, #0]
 80026c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80026c8:	4607      	mov	r7, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	b10a      	cbz	r2, 80026d2 <_printf_common+0x26>
 80026ce:	3301      	adds	r3, #1
 80026d0:	6033      	str	r3, [r6, #0]
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	0699      	lsls	r1, r3, #26
 80026d6:	bf42      	ittt	mi
 80026d8:	6833      	ldrmi	r3, [r6, #0]
 80026da:	3302      	addmi	r3, #2
 80026dc:	6033      	strmi	r3, [r6, #0]
 80026de:	6825      	ldr	r5, [r4, #0]
 80026e0:	f015 0506 	ands.w	r5, r5, #6
 80026e4:	d106      	bne.n	80026f4 <_printf_common+0x48>
 80026e6:	f104 0a19 	add.w	sl, r4, #25
 80026ea:	68e3      	ldr	r3, [r4, #12]
 80026ec:	6832      	ldr	r2, [r6, #0]
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	42ab      	cmp	r3, r5
 80026f2:	dc26      	bgt.n	8002742 <_printf_common+0x96>
 80026f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	3b00      	subs	r3, #0
 80026fc:	bf18      	it	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	0692      	lsls	r2, r2, #26
 8002702:	d42b      	bmi.n	800275c <_printf_common+0xb0>
 8002704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002708:	4641      	mov	r1, r8
 800270a:	4638      	mov	r0, r7
 800270c:	47c8      	blx	r9
 800270e:	3001      	adds	r0, #1
 8002710:	d01e      	beq.n	8002750 <_printf_common+0xa4>
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	6922      	ldr	r2, [r4, #16]
 8002716:	f003 0306 	and.w	r3, r3, #6
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf02      	ittt	eq
 800271e:	68e5      	ldreq	r5, [r4, #12]
 8002720:	6833      	ldreq	r3, [r6, #0]
 8002722:	1aed      	subeq	r5, r5, r3
 8002724:	68a3      	ldr	r3, [r4, #8]
 8002726:	bf0c      	ite	eq
 8002728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800272c:	2500      	movne	r5, #0
 800272e:	4293      	cmp	r3, r2
 8002730:	bfc4      	itt	gt
 8002732:	1a9b      	subgt	r3, r3, r2
 8002734:	18ed      	addgt	r5, r5, r3
 8002736:	2600      	movs	r6, #0
 8002738:	341a      	adds	r4, #26
 800273a:	42b5      	cmp	r5, r6
 800273c:	d11a      	bne.n	8002774 <_printf_common+0xc8>
 800273e:	2000      	movs	r0, #0
 8002740:	e008      	b.n	8002754 <_printf_common+0xa8>
 8002742:	2301      	movs	r3, #1
 8002744:	4652      	mov	r2, sl
 8002746:	4641      	mov	r1, r8
 8002748:	4638      	mov	r0, r7
 800274a:	47c8      	blx	r9
 800274c:	3001      	adds	r0, #1
 800274e:	d103      	bne.n	8002758 <_printf_common+0xac>
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002758:	3501      	adds	r5, #1
 800275a:	e7c6      	b.n	80026ea <_printf_common+0x3e>
 800275c:	18e1      	adds	r1, r4, r3
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	2030      	movs	r0, #48	@ 0x30
 8002762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002766:	4422      	add	r2, r4
 8002768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800276c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002770:	3302      	adds	r3, #2
 8002772:	e7c7      	b.n	8002704 <_printf_common+0x58>
 8002774:	2301      	movs	r3, #1
 8002776:	4622      	mov	r2, r4
 8002778:	4641      	mov	r1, r8
 800277a:	4638      	mov	r0, r7
 800277c:	47c8      	blx	r9
 800277e:	3001      	adds	r0, #1
 8002780:	d0e6      	beq.n	8002750 <_printf_common+0xa4>
 8002782:	3601      	adds	r6, #1
 8002784:	e7d9      	b.n	800273a <_printf_common+0x8e>
	...

08002788 <_printf_i>:
 8002788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800278c:	7e0f      	ldrb	r7, [r1, #24]
 800278e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002790:	2f78      	cmp	r7, #120	@ 0x78
 8002792:	4691      	mov	r9, r2
 8002794:	4680      	mov	r8, r0
 8002796:	460c      	mov	r4, r1
 8002798:	469a      	mov	sl, r3
 800279a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800279e:	d807      	bhi.n	80027b0 <_printf_i+0x28>
 80027a0:	2f62      	cmp	r7, #98	@ 0x62
 80027a2:	d80a      	bhi.n	80027ba <_printf_i+0x32>
 80027a4:	2f00      	cmp	r7, #0
 80027a6:	f000 80d1 	beq.w	800294c <_printf_i+0x1c4>
 80027aa:	2f58      	cmp	r7, #88	@ 0x58
 80027ac:	f000 80b8 	beq.w	8002920 <_printf_i+0x198>
 80027b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80027b8:	e03a      	b.n	8002830 <_printf_i+0xa8>
 80027ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80027be:	2b15      	cmp	r3, #21
 80027c0:	d8f6      	bhi.n	80027b0 <_printf_i+0x28>
 80027c2:	a101      	add	r1, pc, #4	@ (adr r1, 80027c8 <_printf_i+0x40>)
 80027c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027c8:	08002821 	.word	0x08002821
 80027cc:	08002835 	.word	0x08002835
 80027d0:	080027b1 	.word	0x080027b1
 80027d4:	080027b1 	.word	0x080027b1
 80027d8:	080027b1 	.word	0x080027b1
 80027dc:	080027b1 	.word	0x080027b1
 80027e0:	08002835 	.word	0x08002835
 80027e4:	080027b1 	.word	0x080027b1
 80027e8:	080027b1 	.word	0x080027b1
 80027ec:	080027b1 	.word	0x080027b1
 80027f0:	080027b1 	.word	0x080027b1
 80027f4:	08002933 	.word	0x08002933
 80027f8:	0800285f 	.word	0x0800285f
 80027fc:	080028ed 	.word	0x080028ed
 8002800:	080027b1 	.word	0x080027b1
 8002804:	080027b1 	.word	0x080027b1
 8002808:	08002955 	.word	0x08002955
 800280c:	080027b1 	.word	0x080027b1
 8002810:	0800285f 	.word	0x0800285f
 8002814:	080027b1 	.word	0x080027b1
 8002818:	080027b1 	.word	0x080027b1
 800281c:	080028f5 	.word	0x080028f5
 8002820:	6833      	ldr	r3, [r6, #0]
 8002822:	1d1a      	adds	r2, r3, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6032      	str	r2, [r6, #0]
 8002828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800282c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002830:	2301      	movs	r3, #1
 8002832:	e09c      	b.n	800296e <_printf_i+0x1e6>
 8002834:	6833      	ldr	r3, [r6, #0]
 8002836:	6820      	ldr	r0, [r4, #0]
 8002838:	1d19      	adds	r1, r3, #4
 800283a:	6031      	str	r1, [r6, #0]
 800283c:	0606      	lsls	r6, r0, #24
 800283e:	d501      	bpl.n	8002844 <_printf_i+0xbc>
 8002840:	681d      	ldr	r5, [r3, #0]
 8002842:	e003      	b.n	800284c <_printf_i+0xc4>
 8002844:	0645      	lsls	r5, r0, #25
 8002846:	d5fb      	bpl.n	8002840 <_printf_i+0xb8>
 8002848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800284c:	2d00      	cmp	r5, #0
 800284e:	da03      	bge.n	8002858 <_printf_i+0xd0>
 8002850:	232d      	movs	r3, #45	@ 0x2d
 8002852:	426d      	negs	r5, r5
 8002854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002858:	4858      	ldr	r0, [pc, #352]	@ (80029bc <_printf_i+0x234>)
 800285a:	230a      	movs	r3, #10
 800285c:	e011      	b.n	8002882 <_printf_i+0xfa>
 800285e:	6821      	ldr	r1, [r4, #0]
 8002860:	6833      	ldr	r3, [r6, #0]
 8002862:	0608      	lsls	r0, r1, #24
 8002864:	f853 5b04 	ldr.w	r5, [r3], #4
 8002868:	d402      	bmi.n	8002870 <_printf_i+0xe8>
 800286a:	0649      	lsls	r1, r1, #25
 800286c:	bf48      	it	mi
 800286e:	b2ad      	uxthmi	r5, r5
 8002870:	2f6f      	cmp	r7, #111	@ 0x6f
 8002872:	4852      	ldr	r0, [pc, #328]	@ (80029bc <_printf_i+0x234>)
 8002874:	6033      	str	r3, [r6, #0]
 8002876:	bf14      	ite	ne
 8002878:	230a      	movne	r3, #10
 800287a:	2308      	moveq	r3, #8
 800287c:	2100      	movs	r1, #0
 800287e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002882:	6866      	ldr	r6, [r4, #4]
 8002884:	60a6      	str	r6, [r4, #8]
 8002886:	2e00      	cmp	r6, #0
 8002888:	db05      	blt.n	8002896 <_printf_i+0x10e>
 800288a:	6821      	ldr	r1, [r4, #0]
 800288c:	432e      	orrs	r6, r5
 800288e:	f021 0104 	bic.w	r1, r1, #4
 8002892:	6021      	str	r1, [r4, #0]
 8002894:	d04b      	beq.n	800292e <_printf_i+0x1a6>
 8002896:	4616      	mov	r6, r2
 8002898:	fbb5 f1f3 	udiv	r1, r5, r3
 800289c:	fb03 5711 	mls	r7, r3, r1, r5
 80028a0:	5dc7      	ldrb	r7, [r0, r7]
 80028a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028a6:	462f      	mov	r7, r5
 80028a8:	42bb      	cmp	r3, r7
 80028aa:	460d      	mov	r5, r1
 80028ac:	d9f4      	bls.n	8002898 <_printf_i+0x110>
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d10b      	bne.n	80028ca <_printf_i+0x142>
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	07df      	lsls	r7, r3, #31
 80028b6:	d508      	bpl.n	80028ca <_printf_i+0x142>
 80028b8:	6923      	ldr	r3, [r4, #16]
 80028ba:	6861      	ldr	r1, [r4, #4]
 80028bc:	4299      	cmp	r1, r3
 80028be:	bfde      	ittt	le
 80028c0:	2330      	movle	r3, #48	@ 0x30
 80028c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80028c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80028ca:	1b92      	subs	r2, r2, r6
 80028cc:	6122      	str	r2, [r4, #16]
 80028ce:	f8cd a000 	str.w	sl, [sp]
 80028d2:	464b      	mov	r3, r9
 80028d4:	aa03      	add	r2, sp, #12
 80028d6:	4621      	mov	r1, r4
 80028d8:	4640      	mov	r0, r8
 80028da:	f7ff fee7 	bl	80026ac <_printf_common>
 80028de:	3001      	adds	r0, #1
 80028e0:	d14a      	bne.n	8002978 <_printf_i+0x1f0>
 80028e2:	f04f 30ff 	mov.w	r0, #4294967295
 80028e6:	b004      	add	sp, #16
 80028e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f043 0320 	orr.w	r3, r3, #32
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	4832      	ldr	r0, [pc, #200]	@ (80029c0 <_printf_i+0x238>)
 80028f6:	2778      	movs	r7, #120	@ 0x78
 80028f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	6831      	ldr	r1, [r6, #0]
 8002900:	061f      	lsls	r7, r3, #24
 8002902:	f851 5b04 	ldr.w	r5, [r1], #4
 8002906:	d402      	bmi.n	800290e <_printf_i+0x186>
 8002908:	065f      	lsls	r7, r3, #25
 800290a:	bf48      	it	mi
 800290c:	b2ad      	uxthmi	r5, r5
 800290e:	6031      	str	r1, [r6, #0]
 8002910:	07d9      	lsls	r1, r3, #31
 8002912:	bf44      	itt	mi
 8002914:	f043 0320 	orrmi.w	r3, r3, #32
 8002918:	6023      	strmi	r3, [r4, #0]
 800291a:	b11d      	cbz	r5, 8002924 <_printf_i+0x19c>
 800291c:	2310      	movs	r3, #16
 800291e:	e7ad      	b.n	800287c <_printf_i+0xf4>
 8002920:	4826      	ldr	r0, [pc, #152]	@ (80029bc <_printf_i+0x234>)
 8002922:	e7e9      	b.n	80028f8 <_printf_i+0x170>
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f023 0320 	bic.w	r3, r3, #32
 800292a:	6023      	str	r3, [r4, #0]
 800292c:	e7f6      	b.n	800291c <_printf_i+0x194>
 800292e:	4616      	mov	r6, r2
 8002930:	e7bd      	b.n	80028ae <_printf_i+0x126>
 8002932:	6833      	ldr	r3, [r6, #0]
 8002934:	6825      	ldr	r5, [r4, #0]
 8002936:	6961      	ldr	r1, [r4, #20]
 8002938:	1d18      	adds	r0, r3, #4
 800293a:	6030      	str	r0, [r6, #0]
 800293c:	062e      	lsls	r6, r5, #24
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	d501      	bpl.n	8002946 <_printf_i+0x1be>
 8002942:	6019      	str	r1, [r3, #0]
 8002944:	e002      	b.n	800294c <_printf_i+0x1c4>
 8002946:	0668      	lsls	r0, r5, #25
 8002948:	d5fb      	bpl.n	8002942 <_printf_i+0x1ba>
 800294a:	8019      	strh	r1, [r3, #0]
 800294c:	2300      	movs	r3, #0
 800294e:	6123      	str	r3, [r4, #16]
 8002950:	4616      	mov	r6, r2
 8002952:	e7bc      	b.n	80028ce <_printf_i+0x146>
 8002954:	6833      	ldr	r3, [r6, #0]
 8002956:	1d1a      	adds	r2, r3, #4
 8002958:	6032      	str	r2, [r6, #0]
 800295a:	681e      	ldr	r6, [r3, #0]
 800295c:	6862      	ldr	r2, [r4, #4]
 800295e:	2100      	movs	r1, #0
 8002960:	4630      	mov	r0, r6
 8002962:	f7fd fc5d 	bl	8000220 <memchr>
 8002966:	b108      	cbz	r0, 800296c <_printf_i+0x1e4>
 8002968:	1b80      	subs	r0, r0, r6
 800296a:	6060      	str	r0, [r4, #4]
 800296c:	6863      	ldr	r3, [r4, #4]
 800296e:	6123      	str	r3, [r4, #16]
 8002970:	2300      	movs	r3, #0
 8002972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002976:	e7aa      	b.n	80028ce <_printf_i+0x146>
 8002978:	6923      	ldr	r3, [r4, #16]
 800297a:	4632      	mov	r2, r6
 800297c:	4649      	mov	r1, r9
 800297e:	4640      	mov	r0, r8
 8002980:	47d0      	blx	sl
 8002982:	3001      	adds	r0, #1
 8002984:	d0ad      	beq.n	80028e2 <_printf_i+0x15a>
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	079b      	lsls	r3, r3, #30
 800298a:	d413      	bmi.n	80029b4 <_printf_i+0x22c>
 800298c:	68e0      	ldr	r0, [r4, #12]
 800298e:	9b03      	ldr	r3, [sp, #12]
 8002990:	4298      	cmp	r0, r3
 8002992:	bfb8      	it	lt
 8002994:	4618      	movlt	r0, r3
 8002996:	e7a6      	b.n	80028e6 <_printf_i+0x15e>
 8002998:	2301      	movs	r3, #1
 800299a:	4632      	mov	r2, r6
 800299c:	4649      	mov	r1, r9
 800299e:	4640      	mov	r0, r8
 80029a0:	47d0      	blx	sl
 80029a2:	3001      	adds	r0, #1
 80029a4:	d09d      	beq.n	80028e2 <_printf_i+0x15a>
 80029a6:	3501      	adds	r5, #1
 80029a8:	68e3      	ldr	r3, [r4, #12]
 80029aa:	9903      	ldr	r1, [sp, #12]
 80029ac:	1a5b      	subs	r3, r3, r1
 80029ae:	42ab      	cmp	r3, r5
 80029b0:	dcf2      	bgt.n	8002998 <_printf_i+0x210>
 80029b2:	e7eb      	b.n	800298c <_printf_i+0x204>
 80029b4:	2500      	movs	r5, #0
 80029b6:	f104 0619 	add.w	r6, r4, #25
 80029ba:	e7f5      	b.n	80029a8 <_printf_i+0x220>
 80029bc:	08002d40 	.word	0x08002d40
 80029c0:	08002d51 	.word	0x08002d51

080029c4 <__sflush_r>:
 80029c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80029c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029cc:	0716      	lsls	r6, r2, #28
 80029ce:	4605      	mov	r5, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	d454      	bmi.n	8002a7e <__sflush_r+0xba>
 80029d4:	684b      	ldr	r3, [r1, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	dc02      	bgt.n	80029e0 <__sflush_r+0x1c>
 80029da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	dd48      	ble.n	8002a72 <__sflush_r+0xae>
 80029e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80029e2:	2e00      	cmp	r6, #0
 80029e4:	d045      	beq.n	8002a72 <__sflush_r+0xae>
 80029e6:	2300      	movs	r3, #0
 80029e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80029ec:	682f      	ldr	r7, [r5, #0]
 80029ee:	6a21      	ldr	r1, [r4, #32]
 80029f0:	602b      	str	r3, [r5, #0]
 80029f2:	d030      	beq.n	8002a56 <__sflush_r+0x92>
 80029f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80029f6:	89a3      	ldrh	r3, [r4, #12]
 80029f8:	0759      	lsls	r1, r3, #29
 80029fa:	d505      	bpl.n	8002a08 <__sflush_r+0x44>
 80029fc:	6863      	ldr	r3, [r4, #4]
 80029fe:	1ad2      	subs	r2, r2, r3
 8002a00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a02:	b10b      	cbz	r3, 8002a08 <__sflush_r+0x44>
 8002a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a06:	1ad2      	subs	r2, r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a0c:	6a21      	ldr	r1, [r4, #32]
 8002a0e:	4628      	mov	r0, r5
 8002a10:	47b0      	blx	r6
 8002a12:	1c43      	adds	r3, r0, #1
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	d106      	bne.n	8002a26 <__sflush_r+0x62>
 8002a18:	6829      	ldr	r1, [r5, #0]
 8002a1a:	291d      	cmp	r1, #29
 8002a1c:	d82b      	bhi.n	8002a76 <__sflush_r+0xb2>
 8002a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac8 <__sflush_r+0x104>)
 8002a20:	40ca      	lsrs	r2, r1
 8002a22:	07d6      	lsls	r6, r2, #31
 8002a24:	d527      	bpl.n	8002a76 <__sflush_r+0xb2>
 8002a26:	2200      	movs	r2, #0
 8002a28:	6062      	str	r2, [r4, #4]
 8002a2a:	04d9      	lsls	r1, r3, #19
 8002a2c:	6922      	ldr	r2, [r4, #16]
 8002a2e:	6022      	str	r2, [r4, #0]
 8002a30:	d504      	bpl.n	8002a3c <__sflush_r+0x78>
 8002a32:	1c42      	adds	r2, r0, #1
 8002a34:	d101      	bne.n	8002a3a <__sflush_r+0x76>
 8002a36:	682b      	ldr	r3, [r5, #0]
 8002a38:	b903      	cbnz	r3, 8002a3c <__sflush_r+0x78>
 8002a3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a3e:	602f      	str	r7, [r5, #0]
 8002a40:	b1b9      	cbz	r1, 8002a72 <__sflush_r+0xae>
 8002a42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a46:	4299      	cmp	r1, r3
 8002a48:	d002      	beq.n	8002a50 <__sflush_r+0x8c>
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	f7ff fbf4 	bl	8002238 <_free_r>
 8002a50:	2300      	movs	r3, #0
 8002a52:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a54:	e00d      	b.n	8002a72 <__sflush_r+0xae>
 8002a56:	2301      	movs	r3, #1
 8002a58:	4628      	mov	r0, r5
 8002a5a:	47b0      	blx	r6
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	1c50      	adds	r0, r2, #1
 8002a60:	d1c9      	bne.n	80029f6 <__sflush_r+0x32>
 8002a62:	682b      	ldr	r3, [r5, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0c6      	beq.n	80029f6 <__sflush_r+0x32>
 8002a68:	2b1d      	cmp	r3, #29
 8002a6a:	d001      	beq.n	8002a70 <__sflush_r+0xac>
 8002a6c:	2b16      	cmp	r3, #22
 8002a6e:	d11e      	bne.n	8002aae <__sflush_r+0xea>
 8002a70:	602f      	str	r7, [r5, #0]
 8002a72:	2000      	movs	r0, #0
 8002a74:	e022      	b.n	8002abc <__sflush_r+0xf8>
 8002a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	e01b      	b.n	8002ab6 <__sflush_r+0xf2>
 8002a7e:	690f      	ldr	r7, [r1, #16]
 8002a80:	2f00      	cmp	r7, #0
 8002a82:	d0f6      	beq.n	8002a72 <__sflush_r+0xae>
 8002a84:	0793      	lsls	r3, r2, #30
 8002a86:	680e      	ldr	r6, [r1, #0]
 8002a88:	bf08      	it	eq
 8002a8a:	694b      	ldreq	r3, [r1, #20]
 8002a8c:	600f      	str	r7, [r1, #0]
 8002a8e:	bf18      	it	ne
 8002a90:	2300      	movne	r3, #0
 8002a92:	eba6 0807 	sub.w	r8, r6, r7
 8002a96:	608b      	str	r3, [r1, #8]
 8002a98:	f1b8 0f00 	cmp.w	r8, #0
 8002a9c:	dde9      	ble.n	8002a72 <__sflush_r+0xae>
 8002a9e:	6a21      	ldr	r1, [r4, #32]
 8002aa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002aa2:	4643      	mov	r3, r8
 8002aa4:	463a      	mov	r2, r7
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	47b0      	blx	r6
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	dc08      	bgt.n	8002ac0 <__sflush_r+0xfc>
 8002aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ab6:	81a3      	strh	r3, [r4, #12]
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ac0:	4407      	add	r7, r0
 8002ac2:	eba8 0800 	sub.w	r8, r8, r0
 8002ac6:	e7e7      	b.n	8002a98 <__sflush_r+0xd4>
 8002ac8:	20400001 	.word	0x20400001

08002acc <_fflush_r>:
 8002acc:	b538      	push	{r3, r4, r5, lr}
 8002ace:	690b      	ldr	r3, [r1, #16]
 8002ad0:	4605      	mov	r5, r0
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	b913      	cbnz	r3, 8002adc <_fflush_r+0x10>
 8002ad6:	2500      	movs	r5, #0
 8002ad8:	4628      	mov	r0, r5
 8002ada:	bd38      	pop	{r3, r4, r5, pc}
 8002adc:	b118      	cbz	r0, 8002ae6 <_fflush_r+0x1a>
 8002ade:	6a03      	ldr	r3, [r0, #32]
 8002ae0:	b90b      	cbnz	r3, 8002ae6 <_fflush_r+0x1a>
 8002ae2:	f7ff f9af 	bl	8001e44 <__sinit>
 8002ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f3      	beq.n	8002ad6 <_fflush_r+0xa>
 8002aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002af0:	07d0      	lsls	r0, r2, #31
 8002af2:	d404      	bmi.n	8002afe <_fflush_r+0x32>
 8002af4:	0599      	lsls	r1, r3, #22
 8002af6:	d402      	bmi.n	8002afe <_fflush_r+0x32>
 8002af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002afa:	f7ff fb9a 	bl	8002232 <__retarget_lock_acquire_recursive>
 8002afe:	4628      	mov	r0, r5
 8002b00:	4621      	mov	r1, r4
 8002b02:	f7ff ff5f 	bl	80029c4 <__sflush_r>
 8002b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b08:	07da      	lsls	r2, r3, #31
 8002b0a:	4605      	mov	r5, r0
 8002b0c:	d4e4      	bmi.n	8002ad8 <_fflush_r+0xc>
 8002b0e:	89a3      	ldrh	r3, [r4, #12]
 8002b10:	059b      	lsls	r3, r3, #22
 8002b12:	d4e1      	bmi.n	8002ad8 <_fflush_r+0xc>
 8002b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b16:	f7ff fb8d 	bl	8002234 <__retarget_lock_release_recursive>
 8002b1a:	e7dd      	b.n	8002ad8 <_fflush_r+0xc>

08002b1c <__swhatbuf_r>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	460c      	mov	r4, r1
 8002b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b24:	2900      	cmp	r1, #0
 8002b26:	b096      	sub	sp, #88	@ 0x58
 8002b28:	4615      	mov	r5, r2
 8002b2a:	461e      	mov	r6, r3
 8002b2c:	da0d      	bge.n	8002b4a <__swhatbuf_r+0x2e>
 8002b2e:	89a3      	ldrh	r3, [r4, #12]
 8002b30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2340      	movne	r3, #64	@ 0x40
 8002b3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002b40:	2000      	movs	r0, #0
 8002b42:	6031      	str	r1, [r6, #0]
 8002b44:	602b      	str	r3, [r5, #0]
 8002b46:	b016      	add	sp, #88	@ 0x58
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	466a      	mov	r2, sp
 8002b4c:	f000 f848 	bl	8002be0 <_fstat_r>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	dbec      	blt.n	8002b2e <__swhatbuf_r+0x12>
 8002b54:	9901      	ldr	r1, [sp, #4]
 8002b56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002b5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002b5e:	4259      	negs	r1, r3
 8002b60:	4159      	adcs	r1, r3
 8002b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b66:	e7eb      	b.n	8002b40 <__swhatbuf_r+0x24>

08002b68 <__smakebuf_r>:
 8002b68:	898b      	ldrh	r3, [r1, #12]
 8002b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b6c:	079d      	lsls	r5, r3, #30
 8002b6e:	4606      	mov	r6, r0
 8002b70:	460c      	mov	r4, r1
 8002b72:	d507      	bpl.n	8002b84 <__smakebuf_r+0x1c>
 8002b74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002b78:	6023      	str	r3, [r4, #0]
 8002b7a:	6123      	str	r3, [r4, #16]
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	6163      	str	r3, [r4, #20]
 8002b80:	b003      	add	sp, #12
 8002b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b84:	ab01      	add	r3, sp, #4
 8002b86:	466a      	mov	r2, sp
 8002b88:	f7ff ffc8 	bl	8002b1c <__swhatbuf_r>
 8002b8c:	9f00      	ldr	r7, [sp, #0]
 8002b8e:	4605      	mov	r5, r0
 8002b90:	4639      	mov	r1, r7
 8002b92:	4630      	mov	r0, r6
 8002b94:	f7ff fbbc 	bl	8002310 <_malloc_r>
 8002b98:	b948      	cbnz	r0, 8002bae <__smakebuf_r+0x46>
 8002b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b9e:	059a      	lsls	r2, r3, #22
 8002ba0:	d4ee      	bmi.n	8002b80 <__smakebuf_r+0x18>
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	81a3      	strh	r3, [r4, #12]
 8002bac:	e7e2      	b.n	8002b74 <__smakebuf_r+0xc>
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	6020      	str	r0, [r4, #0]
 8002bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bb6:	81a3      	strh	r3, [r4, #12]
 8002bb8:	9b01      	ldr	r3, [sp, #4]
 8002bba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002bbe:	b15b      	cbz	r3, 8002bd8 <__smakebuf_r+0x70>
 8002bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	f000 f81d 	bl	8002c04 <_isatty_r>
 8002bca:	b128      	cbz	r0, 8002bd8 <__smakebuf_r+0x70>
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	81a3      	strh	r3, [r4, #12]
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	431d      	orrs	r5, r3
 8002bdc:	81a5      	strh	r5, [r4, #12]
 8002bde:	e7cf      	b.n	8002b80 <__smakebuf_r+0x18>

08002be0 <_fstat_r>:
 8002be0:	b538      	push	{r3, r4, r5, lr}
 8002be2:	4d07      	ldr	r5, [pc, #28]	@ (8002c00 <_fstat_r+0x20>)
 8002be4:	2300      	movs	r3, #0
 8002be6:	4604      	mov	r4, r0
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	f7fe fdcf 	bl	8001790 <_fstat>
 8002bf2:	1c43      	adds	r3, r0, #1
 8002bf4:	d102      	bne.n	8002bfc <_fstat_r+0x1c>
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	b103      	cbz	r3, 8002bfc <_fstat_r+0x1c>
 8002bfa:	6023      	str	r3, [r4, #0]
 8002bfc:	bd38      	pop	{r3, r4, r5, pc}
 8002bfe:	bf00      	nop
 8002c00:	200001d0 	.word	0x200001d0

08002c04 <_isatty_r>:
 8002c04:	b538      	push	{r3, r4, r5, lr}
 8002c06:	4d06      	ldr	r5, [pc, #24]	@ (8002c20 <_isatty_r+0x1c>)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	f7fe fdce 	bl	80017b0 <_isatty>
 8002c14:	1c43      	adds	r3, r0, #1
 8002c16:	d102      	bne.n	8002c1e <_isatty_r+0x1a>
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	b103      	cbz	r3, 8002c1e <_isatty_r+0x1a>
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	bd38      	pop	{r3, r4, r5, pc}
 8002c20:	200001d0 	.word	0x200001d0

08002c24 <_sbrk_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4d06      	ldr	r5, [pc, #24]	@ (8002c40 <_sbrk_r+0x1c>)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	602b      	str	r3, [r5, #0]
 8002c30:	f7fe fdd6 	bl	80017e0 <_sbrk>
 8002c34:	1c43      	adds	r3, r0, #1
 8002c36:	d102      	bne.n	8002c3e <_sbrk_r+0x1a>
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	b103      	cbz	r3, 8002c3e <_sbrk_r+0x1a>
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
 8002c40:	200001d0 	.word	0x200001d0

08002c44 <round>:
 8002c44:	ec51 0b10 	vmov	r0, r1, d0
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8002c4e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8002c52:	2a13      	cmp	r2, #19
 8002c54:	460b      	mov	r3, r1
 8002c56:	4605      	mov	r5, r0
 8002c58:	dc1b      	bgt.n	8002c92 <round+0x4e>
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	da0b      	bge.n	8002c76 <round+0x32>
 8002c5e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8002c62:	3201      	adds	r2, #1
 8002c64:	bf04      	itt	eq
 8002c66:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8002c6a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	e015      	b.n	8002ca2 <round+0x5e>
 8002c76:	4c15      	ldr	r4, [pc, #84]	@ (8002ccc <round+0x88>)
 8002c78:	4114      	asrs	r4, r2
 8002c7a:	ea04 0601 	and.w	r6, r4, r1
 8002c7e:	4306      	orrs	r6, r0
 8002c80:	d00f      	beq.n	8002ca2 <round+0x5e>
 8002c82:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8002c86:	fa41 f202 	asr.w	r2, r1, r2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	ea23 0304 	bic.w	r3, r3, r4
 8002c90:	e7ed      	b.n	8002c6e <round+0x2a>
 8002c92:	2a33      	cmp	r2, #51	@ 0x33
 8002c94:	dd08      	ble.n	8002ca8 <round+0x64>
 8002c96:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002c9a:	d102      	bne.n	8002ca2 <round+0x5e>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f7fd fb15 	bl	80002cc <__adddf3>
 8002ca2:	ec41 0b10 	vmov	d0, r0, r1
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8002cac:	f04f 34ff 	mov.w	r4, #4294967295
 8002cb0:	40f4      	lsrs	r4, r6
 8002cb2:	4204      	tst	r4, r0
 8002cb4:	d0f5      	beq.n	8002ca2 <round+0x5e>
 8002cb6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8002cba:	2201      	movs	r2, #1
 8002cbc:	408a      	lsls	r2, r1
 8002cbe:	1952      	adds	r2, r2, r5
 8002cc0:	bf28      	it	cs
 8002cc2:	3301      	addcs	r3, #1
 8002cc4:	ea22 0204 	bic.w	r2, r2, r4
 8002cc8:	e7d2      	b.n	8002c70 <round+0x2c>
 8002cca:	bf00      	nop
 8002ccc:	000fffff 	.word	0x000fffff

08002cd0 <_init>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	bf00      	nop
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr

08002cdc <_fini>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	bf00      	nop
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr
